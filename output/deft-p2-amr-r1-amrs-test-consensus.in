# ::node	0	say-01	
# ::node	0.0	direct-01	6-7
# ::node	0.0.0	thing	4-5
# ::node	0.0.0.0	comment-01	4-5
# ::node	0.0.0.0.0	i	
# ::node	0.0.1	and	19-20
# ::node	0.0.1.0	person	8-9
# ::node	0.0.1.0.0	invest-01	8-9
# ::node	0.0.1.0.1	lobby-01	10-11
# ::node	0.0.1.0.1.0	place-01	12-13
# ::node	0.0.1.0.1.0.0	road	13-14
# ::node	0.0.1.0.1.0.1	near-02	14-15
# ::node	0.0.1.0.1.0.1.0	own-01	17-18
# ::node	0.0.1.0.1.0.1.0.0	property	18-19
# ::node	0.0.1.1	system	22-23
# ::node	0.0.1.1.0	competent-01	21-22
# ::node	0.0.1.1.0.0	-	21-22
# ::node	0.0.1.1.1	fund-01	24-25
# ::node	0.0.1.1.1.0	thing	26-27
# ::node	0.0.1.1.1.0.0	request-01	26-27
# ::node	0.0.1.1.1.0.1	this	
# ::node	0.0.1.1.1.1	regard-01	28-29
# ::node	0.0.1.1.1.1.0	-	
# ::node	0.0.1.1.1.1.1	or	32-33
# ::node	0.0.1.1.1.1.1.0	link-01	31-32
# ::node	0.0.1.1.1.1.1.0.0	plan-01	39-40
# ::node	0.0.1.1.1.1.1.0.0.0	transport-01	38-39
# ::node	0.0.1.1.1.1.1.0.0.1	master	37-38
# ::node	0.0.1.1.1.1.1.1	lack-01	33-34
# ::node	0.1	person	0-2
# ::node	0.1.0	-	
# ::node	0.1.1	name	0-2
# ::node	0.1.1.0	"Ray"	0-2
# ::node	0.1.1.1	"Hyde"	0-2
# ::root	0	say-01
# ::edge	and	op1	person	0.0.1	0.0.1.0	
# ::edge	and	op2	system	0.0.1	0.0.1.1	
# ::edge	comment-01	ARG0	i	0.0.0.0	0.0.0.0.0	
# ::edge	competent-01	polarity	-	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	direct-01	ARG1	thing	0.0	0.0.0	
# ::edge	direct-01	ARG2	and	0.0	0.0.1	
# ::edge	fund-01	ARG1	thing	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	fund-01	manner	regard-01	0.0.1.1.1	0.0.1.1.1.1	
# ::edge	lack-01	ARG1	link-01	0.0.1.1.1.1.1.1	0.0.1.1.1.1.1.0	
# ::edge	link-01	ARG1	thing	0.0.1.1.1.1.1.0	0.0.1.1.1.0	
# ::edge	link-01	ARG2	plan-01	0.0.1.1.1.1.1.0	0.0.1.1.1.1.1.0.0	
# ::edge	lobby-01	ARG1	place-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	name	op1	"Ray"	0.1.1	0.1.1.0	
# ::edge	name	op2	"Hyde"	0.1.1	0.1.1.1	
# ::edge	near-02	ARG1	road	0.0.1.0.1.0.1	0.0.1.0.1.0.0	
# ::edge	near-02	ARG2	own-01	0.0.1.0.1.0.1	0.0.1.0.1.0.1.0	
# ::edge	or	op1	link-01	0.0.1.1.1.1.1	0.0.1.1.1.1.1.0	
# ::edge	or	op2	lack-01	0.0.1.1.1.1.1	0.0.1.1.1.1.1.1	
# ::edge	own-01	ARG0	person	0.0.1.0.1.0.1.0	0.0.1.0	
# ::edge	own-01	ARG1	property	0.0.1.0.1.0.1.0	0.0.1.0.1.0.1.0.0	
# ::edge	person	ARG0-of	invest-01	0.0.1.0	0.0.1.0.0	
# ::edge	person	ARG0-of	lobby-01	0.0.1.0	0.0.1.0.1	
# ::edge	person	name	name	0.1	0.1.1	
# ::edge	person	wiki	-	0.1	0.1.0	
# ::edge	place-01	ARG1	road	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	place-01	ARG2	near-02	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	plan-01	ARG1	transport-01	0.0.1.1.1.1.1.0.0	0.0.1.1.1.1.1.0.0.0	
# ::edge	plan-01	mod	master	0.0.1.1.1.1.1.0.0	0.0.1.1.1.1.1.0.0.1	
# ::edge	regard-01	ARG1	or	0.0.1.1.1.1	0.0.1.1.1.1.1	
# ::edge	regard-01	polarity	-	0.0.1.1.1.1	0.0.1.1.1.1.0	
# ::edge	say-01	ARG0	i	0	0.0.0.0.0	
# ::edge	say-01	ARG1	direct-01	0	0.0	
# ::edge	say-01	ARG2	person	0	0.1	
# ::edge	system	ARG0-of	fund-01	0.0.1.1	0.0.1.1.1	
# ::edge	system	ARG1-of	competent-01	0.0.1.1	0.0.1.1.0	
# ::edge	thing	ARG1-of	comment-01	0.0.0	0.0.0.0	
# ::edge	thing	ARG1-of	request-01	0.0.1.1.1.0	0.0.1.1.1.0.0	
# ::edge	thing	mod	this	0.0.1.1.1.0	0.0.1.1.1.0.1	
(s2 / say-01
      :ARG0 i2
      :ARG1 (d / direct-01
            :ARG1 (t3 / thing
                  :ARG1-of (c / comment-01
                        :ARG0 (i2 / i)))
            :ARG2 (a / and
                  :op1 (p2 / person
                        :ARG0-of (i / invest-01)
                        :ARG0-of (l / lobby-01
                              :ARG1 (p3 / place-01
                                    :ARG1 (r / road)
                                    :ARG2 (n2 / near-02
                                          :ARG1 r
                                          :ARG2 (o / own-01
                                                :ARG0 p2
                                                :ARG1 (p4 / property))))))
                  :op2 (s / system
                        :ARG1-of (c2 / competent-01 :polarity -)
                        :ARG0-of (f / fund-01
                              :ARG1 (t5 / thing
                                    :ARG1-of (r2 / request-01)
                                    :mod (t / this))
                              :manner (r3 / regard-01 :polarity -
                                    :ARG1 (o2 / or
                                          :op1 (l2 / link-01
                                                :ARG1 t5
                                                :ARG2 (p5 / plan-01
                                                      :ARG1 (t2 / transport-01)
                                                      :mod (m / master)))
                                          :op2 (l3 / lack-01
                                                :ARG1 l2)))))))
      :ARG2 (p / person :wiki - :name (n / name :op1 "Ray" :op2 "Hyde")))

# ::node	0	possible-01	3-4
# ::node	0.0	in-fact	
# ::node	0.1	suffice-01	5-6
# ::node	0.1.0	reason	6-7
# ::node	0.1.0.0	build-01	8-9
# ::node	0.1.0.0.0	it	9-10
# ::node	0.1.0.1	that	2-3
# ::node	0.1.1	by-oneself	
# ::node	0.1.1.0	all	11-12
# ::root	0	possible-01
# ::edge	build-01	ARG1	it	0.1.0.0	0.1.0.0.0	
# ::edge	by-oneself	degree	all	0.1.1	0.1.1.0	
# ::edge	possible-01	ARG1	suffice-01	0	0.1	
# ::edge	possible-01	mod	in-fact	0	0.0	
# ::edge	reason	domain	that	0.1.0	0.1.0.1	
# ::edge	reason	mod	build-01	0.1.0	0.1.0.0	
# ::edge	suffice-01	ARG0	reason	0.1	0.1.0	
# ::edge	suffice-01	mod	by-oneself	0.1	0.1.1	
(p / possible-01
      :mod (i2 / in-fact)
      :ARG1 (s / suffice-01
            :ARG0 (r / reason
                  :mod (b / build-01
                        :ARG1 (i / it))
                  :domain (t2 / that))
            :mod (b2 / by-oneself
                  :degree (a / all))))

# ::node	0	say-01	3-4
# ::node	0.0	i	1-2
# ::node	0.1	recommend-01	10-11
# ::node	0.1.0	apply-02	11-12
# ::node	0.1.0.0	logic	9-10
# ::node	0.1.0.0.0	same-01	8-9
# ::node	0.1.0.0.0.0	exact	7-8
# ::node	0.1.0.1	road	13-14
# ::node	0.2	all	0-1
# ::root	0	say-01
# ::edge	apply-02	ARG1	logic	0.1.0	0.1.0.0	
# ::edge	apply-02	ARG2	road	0.1.0	0.1.0.1	
# ::edge	logic	ARG1-of	same-01	0.1.0.0	0.1.0.0.0	
# ::edge	recommend-01	ARG1	apply-02	0.1	0.1.0	
# ::edge	same-01	mod	exact	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	recommend-01	0	0.1	
# ::edge	say-01	mod	all	0	0.2	
(s / say-01
      :ARG0 (i / i)
      :ARG1 (r / recommend-01
            :ARG1 (a / apply-02
                  :ARG1 (l / logic
                        :ARG1-of (s2 / same-01
                              :mod (e / exact)))
                  :ARG2 (r2 / road)))
      :mod (a2 / all))

# ::node	0	recommend-01	1-2
# ::node	0.0	have-03	2-3
# ::node	0.0.0	they	0-1
# ::node	0.0.1	destination	3-4
# ::node	0.0.1.0	end	6-7
# ::node	0.0.1.0.0	both	5-6
# ::node	0.1	use-01	13-14
# ::node	0.1.0	we	10-11
# ::node	0.1.1	thing	17-18
# ::node	0.1.1.0	invest-01	17-18
# ::node	0.1.2	maximum	12-13
# ::root	0	recommend-01
# ::edge	destination	location	end	0.0.1	0.0.1.0	
# ::edge	end	mod	both	0.0.1.0	0.0.1.0.0	
# ::edge	have-03	ARG0	they	0.0	0.0.0	
# ::edge	have-03	ARG1	destination	0.0	0.0.1	
# ::edge	invest-01	ARG0	we	0.1.1.0	0.1.0	
# ::edge	recommend-01	ARG1	have-03	0	0.0	
# ::edge	recommend-01	purpose	use-01	0	0.1	
# ::edge	thing	ARG2-of	invest-01	0.1.1	0.1.1.0	
# ::edge	use-01	ARG0	we	0.1	0.1.0	
# ::edge	use-01	ARG1	thing	0.1	0.1.1	
# ::edge	use-01	degree	maximum	0.1	0.1.2	
(r / recommend-01
      :ARG1 (h / have-03
            :ARG0 (t / they)
            :ARG1 (d / destination
                  :location (e / end
                        :mod (b / both))))
      :purpose (u / use-01
            :ARG0 (w / we)
            :ARG1 (t2 / thing
                  :ARG2-of (i / invest-01
                        :ARG0 w))
            :degree (m / maximum)))

# ::node	0	need-01	1-2
# ::node	0.0	we	0-1
# ::node	0.1	place	3-4
# ::node	0.1.0	more	
# ::node	0.2	get-03	7-8
# ::node	0.2.0	close-10	8-9
# ::node	0.2.0.0	balance	11-12
# ::node	0.2.0.0.0	need-01	15-16
# ::node	0.2.0.0.0.0	say-01	13-14
# ::node	0.2.0.0.0.0.0	you	12-13
# ::node	0.2.0.1	more	2-3
# ::root	0	need-01
# ::edge	balance	ARG1-of	need-01	0.2.0.0	0.2.0.0.0	
# ::edge	close-10	ARG1	we	0.2.0	0.0	
# ::edge	close-10	ARG2	balance	0.2.0	0.2.0.0	
# ::edge	close-10	degree	more	0.2.0	0.2.0.1	
# ::edge	get-03	ARG1	we	0.2	0.0	
# ::edge	get-03	ARG2	close-10	0.2	0.2.0	
# ::edge	need-01	ARG0	we	0	0.0	
# ::edge	need-01	ARG0	we	0.2.0.0.0	0.0	
# ::edge	need-01	ARG1	place	0	0.1	
# ::edge	need-01	ARG1-of	say-01	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	need-01	purpose	get-03	0	0.2	
# ::edge	place	mod	more	0.1	0.1.0	
# ::edge	say-01	ARG0	you	0.2.0.0.0.0	0.2.0.0.0.0.0	
(n / need-01
      :ARG0 (w / we)
      :ARG1 (p / place
            :mod (m / more))
      :purpose (g / get-03
            :ARG1 w
            :ARG2 (c / close-10
                  :ARG1 w
                  :ARG2 (b / balance
                        :ARG1-of (n2 / need-01
                              :ARG0 w
                              :ARG1-of (s / say-01
                                    :ARG0 (y / you))))
                  :degree (m2 / more))))

# ::node	0	contrast-01	0-1
# ::node	0.0	find-01	13-14
# ::node	0.0.0	we	10-11
# ::node	0.0.1	work-01	17-18
# ::node	0.0.1.0	we	5-6
# ::node	0.0.1.0.0	all	16-17
# ::node	0.0.1.1	devil	20-21
# ::node	0.0.2	eventual	12-13
# ::node	0.0.3	aggregate	3-4
# ::node	0.0.4	demonize-01	6-7
# ::node	0.0.4.0	business	7-8
# ::node	0.0.4.1	long-03	8-9
# ::node	0.0.4.1.0	enough	9-10
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	find-01	0	0.0	
# ::edge	demonize-01	ARG0	we	0.0.4	0.0.0	
# ::edge	demonize-01	ARG1	business	0.0.4	0.0.4.0	
# ::edge	demonize-01	ARG1-of	long-03	0.0.4	0.0.4.1	
# ::edge	find-01	ARG0	we	0.0	0.0.0	
# ::edge	find-01	ARG1	work-01	0.0	0.0.1	
# ::edge	find-01	condition	demonize-01	0.0	0.0.4	
# ::edge	find-01	prep-in	aggregate	0.0	0.0.3	
# ::edge	find-01	time	eventual	0.0	0.0.2	
# ::edge	long-03	degree	enough	0.0.4.1	0.0.4.1.0	
# ::edge	we	mod	all	0.0.1.0	0.0.1.0.0	
# ::edge	work-01	ARG0	we	0.0.1	0.0.1.0	
# ::edge	work-01	ARG2	devil	0.0.1	0.0.1.1	
(c / contrast-01
      :ARG2 (f / find-01
            :ARG0 (w / we)
            :ARG1 (w2 / work-01
                  :ARG0 (w3 / we
                        :mod (a / all))
                  :ARG2 (d / devil))
            :time (e / eventual)
            :prep-in (a2 / aggregate)
            :condition (d3 / demonize-01
                  :ARG0 w
                  :ARG1 (b / business)
                  :ARG1-of (l / long-03
                        :degree (e2 / enough)))))

# ::node	0	see-01	3-4
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	have-purpose-91	
# ::node	0.2.0	claim-01	9-10
# ::node	0.2.0.0	solve-01	
# ::node	0.2.0.0.0	balance	16-17
# ::node	0.2.0.0.0.0	nature	24-25
# ::node	0.2.0.0.0.0.0	dynamic	19-20
# ::node	0.2.0.0.0.0.1	change-01	22-23
# ::node	0.2.0.0.0.0.1.0	ever	21-22
# ::root	0	see-01
# ::edge	balance	poss-of	nature	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	change-01	time	ever	0.2.0.0.0.0.1	0.2.0.0.0.0.1.0	
# ::edge	claim-01	ARG1	solve-01	0.2.0	0.2.0.0	
# ::edge	have-purpose-91	ARG1	claim-01	0.2	0.2.0	
# ::edge	nature	ARG1-of	change-01	0.2.0.0.0.0	0.2.0.0.0.0.1	
# ::edge	nature	mod	dynamic	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	see-01	ARG0	i	0	0.1	
# ::edge	see-01	ARG1	have-purpose-91	0	0.2	
# ::edge	see-01	polarity	-	0	0.0	
# ::edge	solve-01	ARG2	balance	0.2.0.0	0.2.0.0.0	
(s3 / see-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (h / have-purpose-91
            :ARG1 (c / claim-01
                  :ARG1 (s / solve-01
                        :ARG2 (b / balance
                              :poss-of (n / nature
                                    :mod (d / dynamic)
                                    :ARG1-of (c2 / change-01
                                          :time (e / ever))))))))

# ::node	0	see-01	2-3
# ::node	0.0	you	1-2
# ::node	0.0.0	even	0-1
# ::node	0.1	rail	23-24
# ::node	0.1.0	airport	5-6
# ::node	0.1.0.0	"Washington_Dulles_International_Airport"	
# ::node	0.1.0.1	name	5-6
# ::node	0.1.0.1.0	"Dulles"	5-6
# ::node	0.2	positive	8-9
# ::node	0.3	cause-01	9-10
# ::node	0.3.0	center	14-15
# ::node	0.3.0.0	job	13-14
# ::node	0.3.0.1	promote-02	16-17
# ::node	0.3.0.1.0	demand-01	20-21
# ::node	0.3.0.1.0.0	rail	3-4
# ::node	0.3.0.1.0.1	bi-directional	
# ::root	0	see-01
# ::edge	airport	name	name	0.1.0	0.1.0.1	
# ::edge	airport	wiki	"Washington_Dulles_International_Airport"	0.1.0	0.1.0.0	
# ::edge	cause-01	ARG0	center	0.3	0.3.0	
# ::edge	center	ARG0-of	promote-02	0.3.0	0.3.0.1	
# ::edge	center	domain	airport	0.3.0	0.1.0	
# ::edge	center	mod	job	0.3.0	0.3.0.0	
# ::edge	demand-01	ARG1	rail	0.3.0.1.0	0.3.0.1.0.0	
# ::edge	demand-01	mod	bi-directional	0.3.0.1.0	0.3.0.1.0.1	
# ::edge	name	op1	"Dulles"	0.1.0.1	0.1.0.1.0	
# ::edge	promote-02	ARG1	demand-01	0.3.0.1	0.3.0.1.0	
# ::edge	rail	destination	airport	0.1	0.1.0	
# ::edge	see-01	ARG0	you	0	0.0	
# ::edge	see-01	ARG1	rail	0	0.1	
# ::edge	see-01	ARG1-of	cause-01	0	0.3	
# ::edge	see-01	ARG2	positive	0	0.2	
# ::edge	you	mod	even	0.0	0.0.0	
(s / see-01
      :ARG0 (y / you
            :mod (e / even))
      :ARG1 (r / rail
            :destination (a / airport :wiki "Washington_Dulles_International_Airport"
                  :name (d / name :op1 "Dulles")))
      :ARG2 (p / positive)
      :ARG1-of (c / cause-01
            :ARG0 (c2 / center
                  :mod (j / job)
                  :domain a
                  :ARG0-of (p2 / promote-02
                        :ARG1 (d2 / demand-01
                              :ARG1 (r2 / rail)
                              :mod (b / bi-directional))))))

# ::node	0	agree-01	1-2
# ::node	0.0	i	0-1
# ::root	0	agree-01
# ::edge	agree-01	ARG0	i	0	0.0	
(a / agree-01
      :ARG0 (i / i))

# ::node	0	check-01	1-2
# ::node	0.0	reality	0-1
# ::node	0.1	here	2-3
# ::root	0	check-01
# ::edge	check-01	ARG2	reality	0	0.0	
# ::edge	check-01	location	here	0	0.1	
(c / check-01
      :ARG2 (r / reality)
      :location (h / here))

# ::node	0	drive-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	past	2-3
# ::node	0.1.0	facility	3-5
# ::node	0.1.0.0	-	
# ::node	0.1.0.1	name	3-5
# ::node	0.1.0.1.0	"Watkins"	3-5
# ::node	0.1.0.1.1	"Landing"	3-5
# ::node	0.2	rate-entity-91	
# ::node	0.2.0	and	7-8
# ::node	0.2.0.0	date-entity	
# ::node	0.2.0.0.0	morning	6-7
# ::node	0.2.0.1	date-entity	
# ::node	0.2.0.1.0	evening	8-9
# ::root	0	drive-01
# ::edge	and	op1	date-entity	0.2.0	0.2.0.0	
# ::edge	and	op2	date-entity	0.2.0	0.2.0.1	
# ::edge	date-entity	dayperiod	evening	0.2.0.1	0.2.0.1.0	
# ::edge	date-entity	dayperiod	morning	0.2.0.0	0.2.0.0.0	
# ::edge	drive-01	ARG0	i	0	0.0	
# ::edge	drive-01	frequency	rate-entity-91	0	0.2	
# ::edge	drive-01	path	past	0	0.1	
# ::edge	facility	name	name	0.1.0	0.1.0.1	
# ::edge	facility	wiki	-	0.1.0	0.1.0.0	
# ::edge	name	op1	"Watkins"	0.1.0.1	0.1.0.1.0	
# ::edge	name	op2	"Landing"	0.1.0.1	0.1.0.1.1	
# ::edge	past	op1	facility	0.1	0.1.0	
# ::edge	rate-entity-91	ARG4	and	0.2	0.2.0	
(d / drive-01
      :ARG0 (i / i)
      :path (p / past
            :op1 (f / facility :wiki -
                  :name (w / name :op1 "Watkins" :op2 "Landing")))
      :frequency (r / rate-entity-91
            :ARG4 (a / and
                  :op1 (d2 / date-entity
                        :dayperiod (m / morning))
                  :op2 (d3 / date-entity
                        :dayperiod (e / evening)))))

# ::node	0	overlook-01	3-4
# ::node	0.0	thing	19-20
# ::node	0.0.0	else	11-12
# ::node	0.0.1	spend-01	19-20
# ::node	0.0.1.0	monetary-quantity	
# ::node	0.0.1.0.0	400000000	
# ::node	0.0.1.0.1	dollar	
# ::node	0.0.1.1	possible-01	16-17
# ::node	0.1	consistent	2-3
# ::node	0.2	debate-01	6-7
# ::node	0.2.0	road	8-9
# ::node	0.2.0.0	"Virginia_State_Route_288"	
# ::node	0.2.0.1	name	8-9
# ::node	0.2.0.1.0	288	8-9
# ::root	0	overlook-01
# ::edge	debate-01	ARG1	road	0.2	0.2.0	
# ::edge	monetary-quantity	quant	400000000	0.0.1.0	0.0.1.0.0	
# ::edge	monetary-quantity	unit	dollar	0.0.1.0	0.0.1.0.1	
# ::edge	name	op1	288	0.2.0.1	0.2.0.1.0	
# ::edge	overlook-01	ARG1	thing	0	0.0	
# ::edge	overlook-01	manner	consistent	0	0.1	
# ::edge	overlook-01	prep-in	debate-01	0	0.2	
# ::edge	road	name	name	0.2.0	0.2.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.2.0	0.2.0.0	
# ::edge	spend-01	ARG1-of	possible-01	0.0.1	0.0.1.1	
# ::edge	spend-01	ARG3	monetary-quantity	0.0.1	0.0.1.0	
# ::edge	thing	ARG1-of	spend-01	0.0	0.0.1	
# ::edge	thing	mod	else	0.0	0.0.0	
(o / overlook-01
      :ARG1 (t / thing
            :mod (e / else)
            :ARG1-of (s2 / spend-01
                  :ARG3 (m2 / monetary-quantity :quant 400000000
                        :unit (d2 / dollar))
                  :ARG1-of (p / possible-01)))
      :manner (c / consistent)
      :prep-in (d3 / debate-01
            :ARG1 (r / road :wiki "Virginia_State_Route_288"
                  :name (n / name :op1 288))))

# ::node	0	possible-01	4-5
# ::node	0.0	alleviate-01	7-8
# ::node	0.0.0	congest-01	3-4
# ::node	0.0.0.0	traffic	2-3
# ::node	0.0.0.1	much	1-2
# ::node	0.1	apply-02	12-13
# ::node	0.1.0	money	10-11
# ::node	0.1.1	or	18-19
# ::node	0.1.1.0	project	27-28
# ::node	0.1.1.0.0	road	26-27
# ::node	0.1.1.0.1	press-01	15-16
# ::node	0.1.1.0.2	other	14-15
# ::node	0.1.1.1	project	17-18
# ::node	0.1.1.1.0	road	16-17
# ::node	0.1.1.1.0.0	-	25-25
# ::node	0.1.1.1.1	even	23-24
# ::node	0.1.1.1.2	forbid-01	21-22
# ::node	0.1.1.1.2.0	imperative	
# ::node	0.1.1.1.2.1	god	20-21
# ::root	0	possible-01
# ::edge	alleviate-01	ARG1	congest-01	0.0	0.0.0	
# ::edge	apply-02	ARG1	money	0.1	0.1.0	
# ::edge	apply-02	ARG2	or	0.1	0.1.1	
# ::edge	congest-01	ARG2	traffic	0.0.0	0.0.0.0	
# ::edge	congest-01	quant	much	0.0.0	0.0.0.1	
# ::edge	forbid-01	ARG0	god	0.1.1.1.2	0.1.1.1.2.1	
# ::edge	forbid-01	mode	imperative	0.1.1.1.2	0.1.1.1.2.0	
# ::edge	or	op1	project	0.1.1	0.1.1.0	
# ::edge	or	op2	project	0.1.1	0.1.1.1	
# ::edge	possible-01	ARG1	alleviate-01	0	0.0	
# ::edge	possible-01	condition	apply-02	0	0.1	
# ::edge	project	ARG1-of	forbid-01	0.1.1.1	0.1.1.1.2	
# ::edge	project	ARG2-of	press-01	0.1.1.0	0.1.1.0.1	
# ::edge	project	mod	even	0.1.1.1	0.1.1.1.1	
# ::edge	project	mod	other	0.1.1.0	0.1.1.0.2	
# ::edge	project	mod	road	0.1.1.0	0.1.1.0.0	
# ::edge	project	mod	road	0.1.1.1	0.1.1.1.0	
# ::edge	road	polarity	-	0.1.1.1.0	0.1.1.1.0.0	
(p / possible-01
      :ARG1 (a / alleviate-01
            :ARG1 (c / congest-01
                  :ARG2 (t / traffic)
                  :quant (m2 / much)))
      :condition (a3 / apply-02
            :ARG1 (m / money)
            :ARG2 (o / or
                  :op1 (p2 / project
                        :mod (r / road)
                        :ARG2-of (p3 / press-01)
                        :mod (o2 / other))
                  :op2 (p4 / project
                        :mod (r2 / road :polarity -)
                        :mod (e / even)
                        :ARG1-of (f / forbid-01 :mode imperative
                              :ARG0 (g / god))))))

# ::node	0	say-01	
# ::node	0.0	right-05	6-7
# ::node	0.0.0	live-01	8-9
# ::node	0.0.0.0	country	11-12
# ::node	0.0.1	every	5-6
# ::node	0.0.2	wish-01	17-18
# ::node	0.1	person	0-2
# ::node	0.1.0	-	
# ::node	0.1.1	name	0-2
# ::node	0.1.1.0	"Anonymous"	0-2
# ::node	0.1.1.1	"6:37"	0-2
# ::root	0	say-01
# ::edge	live-01	ARG0	person	0.0.0	0.1	
# ::edge	live-01	location	country	0.0.0	0.0.0.0	
# ::edge	name	op1	"Anonymous"	0.1.1	0.1.1.0	
# ::edge	name	op2	"6:37"	0.1.1	0.1.1.1	
# ::edge	person	name	name	0.1	0.1.1	
# ::edge	person	wiki	-	0.1	0.1.0	
# ::edge	right-05	ARG1	person	0.0	0.1	
# ::edge	right-05	ARG2	live-01	0.0	0.0.0	
# ::edge	right-05	condition	wish-01	0.0	0.0.2	
# ::edge	right-05	mod	every	0.0	0.0.1	
# ::edge	say-01	ARG1	right-05	0	0.0	
# ::edge	say-01	ARG2	person	0	0.1	
# ::edge	wish-01	ARG0	person	0.0.2	0.1	
# ::edge	wish-01	ARG1	live-01	0.0.2	0.0.0	
(s / say-01
      :ARG1 (r / right-05
            :ARG1 p
            :ARG2 (l / live-01
                  :ARG0 p
                  :location (c / country))
            :mod (e2 / every)
            :condition (w / wish-01
                  :ARG0 p
                  :ARG1 l))
      :ARG2 (p / person :wiki - :name (n / name :op1 "Anonymous" :op2 "6:37")))

# ::node	0	contrast-01	0-1
# ::node	0.0	right-05	6-7
# ::node	0.0.0	-	
# ::node	0.0.1	you	1-2
# ::node	0.0.2	underwrite-01	15-16
# ::node	0.0.2.0	rest	10-11
# ::node	0.0.2.0.0	state	13-14
# ::node	0.0.2.1	construct-01	16-17
# ::node	0.0.2.1.0	highway	22-23
# ::node	0.0.2.1.0.0	cost-01	
# ::node	0.0.2.1.0.0.0	monetary-quantity	
# ::node	0.0.2.1.0.0.0.0	400000000	
# ::node	0.0.2.1.0.0.0.1	dollar	
# ::node	0.0.2.1.1	easy-05	26-27
# ::node	0.0.2.1.1.0	and	29-30
# ::node	0.0.2.1.1.0.0	shop-01	28-29
# ::node	0.0.2.1.1.0.1	get-05	30-31
# ::node	0.0.2.1.1.0.1.0	work-01	32-33
# ::node	0.0.2.1.1.1	more	
# ::root	0	contrast-01
# ::edge	and	op1	shop-01	0.0.2.1.1.0	0.0.2.1.1.0.0	
# ::edge	and	op2	get-05	0.0.2.1.1.0	0.0.2.1.1.0.1	
# ::edge	construct-01	ARG1	highway	0.0.2.1	0.0.2.1.0	
# ::edge	construct-01	purpose	easy-05	0.0.2.1	0.0.2.1.1	
# ::edge	contrast-01	ARG2	right-05	0	0.0	
# ::edge	cost-01	ARG2	monetary-quantity	0.0.2.1.0.0	0.0.2.1.0.0.0	
# ::edge	easy-05	ARG1	and	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	easy-05	degree	more	0.0.2.1.1	0.0.2.1.1.1	
# ::edge	get-05	ARG2	work-01	0.0.2.1.1.0.1	0.0.2.1.1.0.1.0	
# ::edge	highway	ARG1-of	cost-01	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	monetary-quantity	quant	400000000	0.0.2.1.0.0.0	0.0.2.1.0.0.0.0	
# ::edge	monetary-quantity	unit	dollar	0.0.2.1.0.0.0	0.0.2.1.0.0.0.1	
# ::edge	rest	part-of	state	0.0.2.0	0.0.2.0.0	
# ::edge	right-05	ARG1	you	0.0	0.0.1	
# ::edge	right-05	ARG2	underwrite-01	0.0	0.0.2	
# ::edge	right-05	polarity	-	0.0	0.0.0	
# ::edge	underwrite-01	ARG0	rest	0.0.2	0.0.2.0	
# ::edge	underwrite-01	ARG1	construct-01	0.0.2	0.0.2.1	
(c2 / contrast-01
      :ARG2 (r / right-05 :polarity -
            :ARG1 (y / you)
            :ARG2 (u / underwrite-01
                  :ARG0 (r2 / rest
                        :part-of (s / state))
                  :ARG1 (c / construct-01
                        :ARG1 (h / highway
                              :ARG1-of (c3 / cost-01
                                    :ARG2 (m / monetary-quantity :quant 400000000
                                          :unit (d / dollar))))
                        :purpose (e / easy-05
                              :ARG1 (a / and
                                    :op1 (s2 / shop-01)
                                    :op2 (g / get-05
                                          :ARG2 (w / work-01)))
                              :degree (m2 / more))))))

# ::node	0	prefer-01	4-5
# ::node	0.0	person	0-1
# ::node	0.0.0	many	0-1
# ::node	0.1	and	
# ::node	0.1.0	horse	6-7
# ::node	0.1.1	hunt-01	8-9
# ::node	0.1.2	garden-01	10-11
# ::node	0.1.3	business	16-17
# ::node	0.1.3.0	small	15-16
# ::node	0.1.3.1	type	13-14
# ::node	0.1.3.1.0	certain	12-13
# ::node	0.2	legitimate-02	3-4
# ::node	0.3	make-02	19-20
# ::node	0.3.0	want-01	22-23
# ::node	0.3.0.0	-	
# ::node	0.3.0.1	live-01	24-25
# ::node	0.3.0.1.0	core	28-29
# ::node	0.3.0.1.0.0	urban	27-28
# ::root	0	prefer-01
# ::edge	and	op1	horse	0.1	0.1.0	
# ::edge	and	op2	hunt-01	0.1	0.1.1	
# ::edge	and	op3	garden-01	0.1	0.1.2	
# ::edge	and	op4	business	0.1	0.1.3	
# ::edge	business	mod	small	0.1.3	0.1.3.0	
# ::edge	business	mod	type	0.1.3	0.1.3.1	
# ::edge	core	mod	urban	0.3.0.1.0	0.3.0.1.0.0	
# ::edge	live-01	ARG0	person	0.3.0.1	0.0	
# ::edge	live-01	location	core	0.3.0.1	0.3.0.1.0	
# ::edge	make-02	ARG1	want-01	0.3	0.3.0	
# ::edge	person	quant	many	0.0	0.0.0	
# ::edge	prefer-01	ARG0	person	0	0.0	
# ::edge	prefer-01	ARG0-of	make-02	0	0.3	
# ::edge	prefer-01	ARG1	and	0	0.1	
# ::edge	prefer-01	ARG1-of	legitimate-02	0	0.2	
# ::edge	type	mod	certain	0.1.3.1	0.1.3.1.0	
# ::edge	want-01	ARG0	person	0.3.0	0.0	
# ::edge	want-01	ARG1	live-01	0.3.0	0.3.0.1	
# ::edge	want-01	polarity	-	0.3.0	0.3.0.0	
(p / prefer-01
      :ARG0 (p2 / person
            :quant (m / many))
      :ARG1 (a / and
            :op1 (h / horse)
            :op2 (h2 / hunt-01)
            :op3 (g / garden-01)
            :op4 (b / business
                  :mod (s / small)
                  :mod (t / type
                        :mod (c / certain))))
      :ARG1-of (l / legitimate-02)
      :ARG0-of (m2 / make-02
            :ARG1 (w / want-01 :polarity -
                  :ARG0 p2
                  :ARG1 (l2 / live-01
                        :ARG0 p2
                        :location (c3 / core
                              :mod (u / urban))))))

# ::node	0	baffle-01	6-7
# ::node	0.0	infatuation	1-2
# ::node	0.0.0	live-01	4-5
# ::node	0.0.0.0	city	3-4
# ::node	0.0.1	this	0-1
# ::node	0.1	i	
# ::node	0.2	true	
# ::root	0	baffle-01
# ::edge	baffle-01	ARG0	infatuation	0	0.0	
# ::edge	baffle-01	ARG1	i	0	0.1	
# ::edge	baffle-01	mod	true	0	0.2	
# ::edge	infatuation	mod	this	0.0	0.0.1	
# ::edge	infatuation	topic	live-01	0.0	0.0.0	
# ::edge	live-01	location	city	0.0.0	0.0.0.0	
(b / baffle-01
      :ARG0 (i / infatuation
            :topic (l / live-01
                  :location (c / city))
            :mod (t / this))
      :ARG1 (i2 / i)
      :mod (t2 / true))

# ::node	0	possible-01	1-2
# ::node	0.0	go-07	2-3
# ::node	0.0.0	gas	0-1
# ::node	0.0.0.0	volume-quantity	7-8
# ::node	0.0.0.0.0	1	
# ::node	0.0.0.0.1	gallon	7-8
# ::node	0.0.1	monetary-quantity	
# ::node	0.0.1.0	10	5-6
# ::node	0.0.1.1	dollar	
# ::root	0	possible-01
# ::edge	gas	quant	volume-quantity	0.0.0	0.0.0.0	
# ::edge	go-07	ARG1	gas	0.0	0.0.0	
# ::edge	go-07	ARG3	monetary-quantity	0.0	0.0.1	
# ::edge	monetary-quantity	quant	10	0.0.1	0.0.1.0	
# ::edge	monetary-quantity	unit	dollar	0.0.1	0.0.1.1	
# ::edge	possible-01	ARG1	go-07	0	0.0	
# ::edge	volume-quantity	quant	1	0.0.0.0	0.0.0.0.0	
# ::edge	volume-quantity	unit	gallon	0.0.0.0	0.0.0.0.1	
(p / possible-01
      :ARG1 (g / go-07
            :ARG1 (g4 / gas
                  :quant (v2 / volume-quantity :quant 1
                        :unit (g5 / gallon)))
            :ARG3 (m2 / monetary-quantity :quant 10
                  :unit (d2 / dollar))))

# ::node	0	and	0-1
# ::node	0.0	pay-01	4-5
# ::node	0.0.0	i	1-2
# ::node	0.0.1	live-01	6-7
# ::node	0.0.1.0	country	9-10
# ::node	0.0.2	still	3-4
# ::root	0	and
# ::edge	and	op2	pay-01	0	0.0	
# ::edge	live-01	ARG0	i	0.0.1	0.0.0	
# ::edge	live-01	location	country	0.0.1	0.0.1.0	
# ::edge	pay-01	ARG0	i	0.0	0.0.0	
# ::edge	pay-01	ARG3	live-01	0.0	0.0.1	
# ::edge	pay-01	mod	still	0.0	0.0.2	
(a / and
      :op2 (p / pay-01
            :ARG0 (i / i)
            :ARG3 (l / live-01
                  :ARG0 i
                  :location (c / country))
            :mod (s / still)))

# ::node	0	and	0-1
# ::node	0.0	happen-02	2-3
# ::node	0.0.0	like-01	4-5
# ::node	0.0.0.0	i	1-2
# ::node	0.0.0.1	develop-02	7-8
# ::node	0.0.0.1.0	lot	6-7
# ::node	0.0.0.1.0.0	large	5-6
# ::root	0	and
# ::edge	and	op2	happen-02	0	0.0	
# ::edge	develop-02	ARG1	lot	0.0.0.1	0.0.0.1.0	
# ::edge	happen-02	ARG1	like-01	0.0	0.0.0	
# ::edge	like-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	like-01	ARG1	develop-02	0.0.0	0.0.0.1	
# ::edge	lot	mod	large	0.0.0.1.0	0.0.0.1.0.0	
(a / and
  :op2 (h / happen-02
         :ARG1 (l / like-01
                 :ARG0 (i / i)
                 :ARG1 (d / develop-02
                         :ARG1 (l2 / lot
                                 :mod (l3 / large))))))

# ::node	0	understand-01	
# ::node	0.0	-	
# ::node	0.1	thing	6-7
# ::node	0.1.0	keep-01	6-7
# ::node	0.1.0.0	i	2-3
# ::node	0.1.0.1	horse	7-8
# ::node	0.1.0.2	lot	12-13
# ::node	0.1.0.2.0	area-quantity	11-12
# ::node	0.1.0.2.0.0	"1/4"	
# ::node	0.1.0.2.0.1	acre	11-12
# ::node	0.1.0.3	suppose-02	4-5
# ::node	0.1.1	exact	1-2
# ::root	0	understand-01
# ::edge	area-quantity	quant	"1/4"	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	area-quantity	unit	acre	0.1.0.2.0	0.1.0.2.0.1	
# ::edge	keep-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	keep-01	ARG1	horse	0.1.0	0.1.0.1	
# ::edge	keep-01	ARG2-of	suppose-02	0.1.0	0.1.0.3	
# ::edge	keep-01	location	lot	0.1.0	0.1.0.2	
# ::edge	lot	mod	area-quantity	0.1.0.2	0.1.0.2.0	
# ::edge	suppose-02	ARG1	i	0.1.0.3	0.1.0.0	
# ::edge	thing	manner-of	keep-01	0.1	0.1.0	
# ::edge	thing	mod	exact	0.1	0.1.1	
# ::edge	understand-01	ARG0	i	0	0.1.0.0	
# ::edge	understand-01	ARG1	thing	0	0.1	
# ::edge	understand-01	polarity	-	0	0.0	
(u / understand-01 :polarity -
      :ARG0 i
      :ARG1 (t / thing
            :manner-of (k / keep-01
                  :ARG0 (i / i)
                  :ARG1 (h / horse)
                  :location (l / lot
                        :mod (a / area-quantity :quant "1/4"
                              :unit (a2 / acre)))
                  :ARG2-of (s / suppose-02
                        :ARG1 i))
            :mod (e / exact)))

# ::node	0	solve-01	
# ::node	0.0	and	7-8
# ::node	0.0.0	pattern	6-7
# ::node	0.0.0.0	settle-03	5-6
# ::node	0.0.0.0.0	human	4-5
# ::node	0.0.0.1	function-01	3-4
# ::node	0.0.1	balance-01	9-10
# ::node	0.0.1.0	capacity	13-14
# ::node	0.0.1.0.0	system	12-13
# ::node	0.0.1.0.0.0	transport-01	11-12
# ::node	0.0.1.1	demand-01	19-20
# ::node	0.0.1.1.0	travel-01	18-19
# ::node	0.0.1.1.1	generate-01	17-18
# ::node	0.0.1.1.1.0	use-01	16-17
# ::node	0.0.1.1.1.0.0	land	15-16
# ::root	0	solve-01
# ::edge	and	op1	pattern	0.0	0.0.0	
# ::edge	and	op2	balance-01	0.0	0.0.1	
# ::edge	balance-01	ARG1	capacity	0.0.1	0.0.1.0	
# ::edge	balance-01	ARG2	demand-01	0.0.1	0.0.1.1	
# ::edge	capacity	poss	system	0.0.1.0	0.0.1.0.0	
# ::edge	demand-01	ARG1	travel-01	0.0.1.1	0.0.1.1.0	
# ::edge	demand-01	ARG1-of	generate-01	0.0.1.1	0.0.1.1.1	
# ::edge	generate-01	ARG0	use-01	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	pattern	ARG1-of	function-01	0.0.0	0.0.0.1	
# ::edge	pattern	mod	settle-03	0.0.0	0.0.0.0	
# ::edge	settle-03	ARG1	human	0.0.0.0	0.0.0.0.0	
# ::edge	solve-01	ARG2	and	0	0.0	
# ::edge	system	purpose	transport-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	use-01	ARG1	land	0.0.1.1.1.0	0.0.1.1.1.0.0	
(s4 / solve-01
  :ARG2 (a / and
          :op1 (p / pattern
                 :mod (s2 / settle-03
                        :ARG1 (h / human))
                 :ARG1-of (f2 / function-01))
          :op2 (b / balance-01
                 :ARG1 (c / capacity
                         :poss (s3 / system
                                 :purpose (t / transport-01)))
                 :ARG2 (d / demand-01
                         :ARG1 (t2 / travel-01)
                         :ARG1-of (g / generate-01
                                    :ARG0 (u / use-01
                                            :ARG1 (l / land)))))))

# ::node	0	hard-02	4-5
# ::node	0.0	understand-01	6-7
# ::node	0.0.0	it	2-3
# ::node	0.1	cause-01	
# ::node	0.1.0	amr-unknown	
# ::node	0.2	so	3-4
# ::root	0	hard-02
# ::edge	cause-01	ARG0	amr-unknown	0.1	0.1.0	
# ::edge	hard-02	ARG1	understand-01	0	0.0	
# ::edge	hard-02	ARG1-of	cause-01	0	0.1	
# ::edge	hard-02	degree	so	0	0.2	
# ::edge	understand-01	ARG1	it	0.0	0.0.0	
(h / hard-02
      :ARG1 (u / understand-01
            :ARG1 (i / it))
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown))
      :degree (s / so))

# ::node	0	and	21-22
# ::node	0.0	pay-01	2-3
# ::node	0.0.0	imperative	
# ::node	0.0.1	business	1-2
# ::node	0.0.2	thing	14-15
# ::node	0.0.2.0	pass-05	14-15
# ::node	0.0.2.0.0	of-course	
# ::node	0.0.3	thing	8-9
# ::node	0.0.3.0	bill-01	8-9
# ::node	0.0.3.0.0	we	
# ::node	0.0.3.0.1	transport-01	7-8
# ::node	0.0.3.1	more	40-41
# ::node	0.1	incentivize-01	22-23
# ::node	0.1.0	imperative	
# ::node	0.1.1	locate-01	25-26
# ::node	0.1.1.0	stress-02	31-32
# ::node	0.1.1.0.0	system	34-35
# ::node	0.1.1.0.1	least	30-31
# ::node	0.1.2	even-if	36-37
# ::node	0.1.2.0	mean-01	39-40
# ::node	0.1.2.0.0	travel-01	42-43
# ::node	0.1.2.0.0.0	more	4-5
# ::node	0.1.2.0.0.1	overall	41-42
# ::root	0	and
# ::edge	and	op1	pay-01	0	0.0	
# ::edge	and	op2	incentivize-01	0	0.1	
# ::edge	bill-01	ARG2	we	0.0.3.0	0.0.3.0.0	
# ::edge	bill-01	ARG3	transport-01	0.0.3.0	0.0.3.0.1	
# ::edge	even-if	op1	mean-01	0.1.2	0.1.2.0	
# ::edge	incentivize-01	ARG0	we	0.1	0.0.3.0.0	
# ::edge	incentivize-01	ARG1	business	0.1	0.0.1	
# ::edge	incentivize-01	ARG2	locate-01	0.1	0.1.1	
# ::edge	incentivize-01	concession	even-if	0.1	0.1.2	
# ::edge	incentivize-01	mode	imperative	0.1	0.1.0	
# ::edge	locate-01	ARG0	business	0.1.1	0.0.1	
# ::edge	locate-01	ARG1	business	0.1.1	0.0.1	
# ::edge	locate-01	location	stress-02	0.1.1	0.1.1.0	
# ::edge	mean-01	ARG1	locate-01	0.1.2.0	0.1.1	
# ::edge	mean-01	ARG2	travel-01	0.1.2.0	0.1.2.0.0	
# ::edge	pass-05	ARG0	business	0.0.2.0	0.0.1	
# ::edge	pass-05	ARG2	we	0.0.2.0	0.0.3.0.0	
# ::edge	pass-05	mod	of-course	0.0.2.0	0.0.2.0.0	
# ::edge	pay-01	ARG0	business	0.0	0.0.1	
# ::edge	pay-01	ARG1	thing	0.0	0.0.2	
# ::edge	pay-01	ARG3	thing	0.0	0.0.3	
# ::edge	pay-01	mode	imperative	0.0	0.0.0	
# ::edge	stress-02	ARG0	business	0.1.1.0	0.0.1	
# ::edge	stress-02	ARG1	system	0.1.1.0	0.1.1.0.0	
# ::edge	stress-02	degree	least	0.1.1.0	0.1.1.0.1	
# ::edge	thing	ARG1-of	bill-01	0.0.3	0.0.3.0	
# ::edge	thing	ARG1-of	pass-05	0.0.2	0.0.2.0	
# ::edge	thing	mod	more	0.0.3	0.0.3.1	
# ::edge	travel-01	mod	more	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	travel-01	mod	overall	0.1.2.0.0	0.1.2.0.0.1	
(a / and
      :op1 (p / pay-01 :mode imperative
            :ARG0 (b / business)
            :ARG1 (t2 / thing
                  :ARG1-of (p3 / pass-05
                        :ARG0 b
                        :ARG2 w
                        :mod (o2 / of-course)))
            :ARG3 (t4 / thing
                  :ARG1-of (b2 / bill-01
                        :ARG2 (w / we)
                        :ARG3 (t / transport-01))
                  :mod (m / more)))
      :op2 (i / incentivize-01 :mode imperative
            :ARG0 w
            :ARG1 b
            :ARG2 (l2 / locate-01
                  :ARG0 b
                  :ARG1 b
                  :location (s3 / stress-02
                        :ARG0 b
                        :ARG1 (s2 / system)
                        :degree (l3 / least)))
            :concession (e / even-if
                  :op1 (m2 / mean-01
                        :ARG1 l2
                        :ARG2 (t3 / travel-01
                              :mod (m3 / more)
                              :mod (o / overall))))))

# ::node	0	recommend-01	10-11
# ::node	0.0	do-02	11-12
# ::node	0.0.0	thing	13-14
# ::node	0.0.0.0	2	12-13
# ::node	0.1	recognize-02	2-3
# ::node	0.1.0	we	1-2
# ::node	0.1.1	benefit-01	6-7
# ::node	0.1.1.0	road	4-5
# ::node	0.1.1.1	business	7-8
# ::node	0.1.1.2	primary	5-6
# ::root	0	recommend-01
# ::edge	benefit-01	ARG0	road	0.1.1	0.1.1.0	
# ::edge	benefit-01	ARG1	business	0.1.1	0.1.1.1	
# ::edge	benefit-01	mod	primary	0.1.1	0.1.1.2	
# ::edge	do-02	ARG0	we	0.0	0.1.0	
# ::edge	do-02	ARG1	thing	0.0	0.0.0	
# ::edge	recognize-02	ARG0	we	0.1	0.1.0	
# ::edge	recognize-02	ARG1	benefit-01	0.1	0.1.1	
# ::edge	recommend-01	ARG1	do-02	0	0.0	
# ::edge	recommend-01	condition	recognize-02	0	0.1	
# ::edge	thing	quant	2	0.0.0	0.0.0.0	
(r2 / recommend-01
  :ARG1 (d / do-02
          :ARG0 w
          :ARG1 (t / thing
                  :quant 2))
  :condition (r / recognize-02
               :ARG0 (w / we)
               :ARG1 (b / benefit-01
                       :ARG0 (r3 / road)
                       :ARG1 (b2 / business)
                       :mod (p / primary))))

# ::node	0	see-01	3-4
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	point	5-6
# ::node	0.2.0	thing	8-9
# ::node	0.2.0.0	state-01	8-9
# ::node	0.2.0.1	this	7-8
# ::node	0.3	cause-01	9-10
# ::node	0.3.0	appear-02	11-12
# ::node	0.3.0.0	and	17-18
# ::node	0.3.0.0.0	demonize-01	13-14
# ::node	0.3.0.0.0.0	plan	16-17
# ::node	0.3.0.0.0.0.0	business	15-16
# ::node	0.3.0.0.0.0.0.0	private-03	14-15
# ::node	0.3.0.0.1	put-01	18-19
# ::node	0.3.0.0.1.0	interest	21-22
# ::node	0.3.0.0.1.0.0	public	20-21
# ::node	0.3.0.0.1.1	above	22-23
# ::node	0.3.0.0.1.1.0	all	23-24
# ::node	0.3.0.0.1.1.0.0	else	24-25
# ::root	0	see-01
# ::edge	above	op1	all	0.3.0.0.1.1	0.3.0.0.1.1.0	
# ::edge	all	mod	else	0.3.0.0.1.1.0	0.3.0.0.1.1.0.0	
# ::edge	and	op1	demonize-01	0.3.0.0	0.3.0.0.0	
# ::edge	and	op2	put-01	0.3.0.0	0.3.0.0.1	
# ::edge	appear-02	ARG1	and	0.3.0	0.3.0.0	
# ::edge	business	ARG1-of	private-03	0.3.0.0.0.0.0	0.3.0.0.0.0.0.0	
# ::edge	cause-01	ARG0	appear-02	0.3	0.3.0	
# ::edge	demonize-01	ARG0	thing	0.3.0.0.0	0.2.0	
# ::edge	demonize-01	ARG1	plan	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	interest	poss	public	0.3.0.0.1.0	0.3.0.0.1.0.0	
# ::edge	plan	mod	business	0.3.0.0.0.0	0.3.0.0.0.0.0	
# ::edge	point	poss	thing	0.2	0.2.0	
# ::edge	put-01	ARG0	thing	0.3.0.0.1	0.2.0	
# ::edge	put-01	ARG1	interest	0.3.0.0.1	0.3.0.0.1.0	
# ::edge	put-01	ARG2	above	0.3.0.0.1	0.3.0.0.1.1	
# ::edge	see-01	ARG0	i	0	0.1	
# ::edge	see-01	ARG1	point	0	0.2	
# ::edge	see-01	ARG1-of	cause-01	0	0.3	
# ::edge	see-01	polarity	-	0	0.0	
# ::edge	thing	ARG1-of	state-01	0.2.0	0.2.0.0	
# ::edge	thing	mod	this	0.2.0	0.2.0.1	
(s / see-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (p / point
            :poss (t / thing
                  :ARG1-of (s2 / state-01)
                  :mod (t2 / this)))
      :ARG1-of (c / cause-01
            :ARG0 (a / appear-02
                  :ARG1 (a2 / and
                        :op1 (d / demonize-01
                              :ARG0 t
                              :ARG1 (p2 / plan
                                    :mod (b / business
                                          :ARG1-of (p3 / private-03))))
                        :op2 (p4 / put-01
                              :ARG0 t
                              :ARG1 (i2 / interest
                                    :poss (p5 / public))
                              :ARG2 (a3 / above
                                    :op1 (a4 / all
                                          :mod (e2 / else))))))))

# ::node	0	say-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	-	15-15
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	"TMT"	0-1
# ::node	0.1	and	13-14
# ::node	0.1.0	have-purpose-91	
# ::node	0.1.0.0	it	6-7
# ::node	0.1.0.1	benefit-01	9-10
# ::node	0.1.0.1.0	plan	12-13
# ::node	0.1.0.1.0.0	business	11-12
# ::node	0.1.0.1.0.0.0	private-03	10-11
# ::node	0.1.1	have-purpose-91	
# ::node	0.1.1.0	-	15-15
# ::node	0.1.1.1	serve-01	16-17
# ::node	0.1.1.1.0	interest	19-20
# ::node	0.1.1.1.0.0	public	18-19
# ::node	0.1.2	state	4-5
# ::node	0.1.2.0	"Virginia"	
# ::node	0.1.2.1	name	4-5
# ::node	0.1.2.1.0	"Virginia"	4-5
# ::root	0	say-01
# ::edge	and	location	state	0.1	0.1.2	
# ::edge	and	op1	have-purpose-91	0.1	0.1.0	
# ::edge	and	op2	have-purpose-91	0.1	0.1.1	
# ::edge	benefit-01	ARG1	plan	0.1.0.1	0.1.0.1.0	
# ::edge	business	ARG1-of	private-03	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	have-purpose-91	ARG1	it	0.1.0	0.1.0.0	
# ::edge	have-purpose-91	ARG1	it	0.1.1	0.1.0.0	
# ::edge	have-purpose-91	ARG2	benefit-01	0.1.0	0.1.0.1	
# ::edge	have-purpose-91	ARG2	serve-01	0.1.1	0.1.1.1	
# ::edge	have-purpose-91	polarity	-	0.1.1	0.1.1.0	
# ::edge	interest	poss	public	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	name	op1	"TMT"	0.0.1	0.0.1.0	
# ::edge	name	op1	"Virginia"	0.1.2.1	0.1.2.1.0	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	-	0.0	0.0.0	
# ::edge	plan	mod	business	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	say-01	ARG0	person	0	0.0	
# ::edge	say-01	ARG1	and	0	0.1	
# ::edge	serve-01	ARG1	interest	0.1.1.1	0.1.1.1.0	
# ::edge	state	name	name	0.1.2	0.1.2.1	
# ::edge	state	wiki	"Virginia"	0.1.2	0.1.2.0	
(s2 / say-01
      :ARG0 (p2 / person :wiki - :name (n / name :op1 "TMT"))
      :ARG1 (a / and
            :op1 (h / have-purpose-91
                  :ARG1 (i / it)
                  :ARG2 (b / benefit-01
                        :ARG1 (p3 / plan
                              :mod (b2 / business
                                    :ARG1-of (p4 / private-03)))))
            :op2 (h2 / have-purpose-91 :polarity -
                  :ARG1 i
                  :ARG2 (s / serve-01
                        :ARG1 (i2 / interest
                              :poss (p / public))))
            :location (s3 / state :wiki "Virginia" :name (n2 / name :op1 "Virginia"))))

# ::node	0	person	0-1
# ::node	0.0	-	
# ::node	0.1	name	0-1
# ::node	0.1.0	"EMR"	0-1
# ::root	0	person
# ::edge	name	op1	"EMR"	0.1	0.1.0	
# ::edge	person	name	name	0	0.1	
# ::edge	person	wiki	-	0	0.0	
(p / person :wiki -
      :name (n / name :op1 "EMR"))

# ::node	0	spin-03	3-4
# ::node	0.0	all	0-1
# ::node	0.0.0	else	1-2
# ::root	0	spin-03
# ::edge	all	mod	else	0.0	0.0.0	
# ::edge	spin-03	ARG1	all	0	0.0	
(s / spin-03
      :ARG1 (a / all
            :mod (e / else)))

# ::node	0	obvious-01	0-1
# ::node	0.0	problem	4-5
# ::node	0.0.0	local-02	3-4
# ::node	0.1	cause-01	5-6
# ::node	0.1.0	lumpy	10-11
# ::node	0.1.0.0	dough	8-9
# ::node	0.1.0.0.0	cookie	7-8
# ::node	0.1.0.0.1	this	6-7
# ::root	0	obvious-01
# ::edge	cause-01	ARG0	lumpy	0.1	0.1.0	
# ::edge	dough	mod	cookie	0.1.0.0	0.1.0.0.0	
# ::edge	dough	mod	this	0.1.0.0	0.1.0.0.1	
# ::edge	lumpy	domain	dough	0.1.0	0.1.0.0	
# ::edge	obvious-01	ARG1	problem	0	0.0	
# ::edge	obvious-01	ARG1-of	cause-01	0	0.1	
# ::edge	problem	ARG1-of	local-02	0.0	0.0.0	
(o / obvious-01
      :ARG1 (p / problem
            :ARG1-of (l / local-02))
      :ARG1-of (c / cause-01
            :ARG0 (l2 / lumpy
                  :domain (d / dough
                        :mod (c2 / cookie)
                        :mod (t / this)))))

# ::node	0	think-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	intertwine-01	6-7
# ::node	0.1.0	they	2-3
# ::node	0.1.1	cause-01	
# ::node	0.1.1.0	same-01	14-15
# ::node	0.1.1.0.0	virtual	10-11
# ::node	0.1.2	tight-05	5-6
# ::root	0	think-01
# ::edge	cause-01	ARG1	same-01	0.1.1	0.1.1.0	
# ::edge	intertwine-01	ARG0-of	cause-01	0.1	0.1.1	
# ::edge	intertwine-01	ARG0-of	tight-05	0.1	0.1.2	
# ::edge	intertwine-01	ARG1	they	0.1	0.1.0	
# ::edge	same-01	ARG1	they	0.1.1.0	0.1.0	
# ::edge	same-01	mod	virtual	0.1.1.0	0.1.1.0.0	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	intertwine-01	0	0.1	
(t / think-01
      :ARG0 (i / i)
      :ARG1 (i2 / intertwine-01
            :ARG1 (t2 / they)
            :ARG0-of (c / cause-01
                  :ARG1 (s / same-01
                        :ARG1 t2
                        :mod (v / virtual)))
            :ARG0-of (t3 / tight-05)))

# ::node	0	refuse-01	
# ::node	0.0	use-01	3-4
# ::node	0.0.0	i	0-1
# ::node	0.0.1	transit	5-6
# ::node	0.0.1.0	mass	4-5
# ::node	0.0.1.1	safe-01	10-11
# ::node	0.0.1.1.0	-	3-3
# ::node	0.0.1.1.1	female	12-13
# ::node	0.0.1.1.1.0	commute-01	13-14
# ::node	0.0.1.1.1.1	work-01	15-16
# ::node	0.0.1.1.1.1.0	hour	19-20
# ::node	0.0.1.1.1.1.0.0	regular-02	
# ::node	0.0.1.1.1.1.0.0.0	-	3-3
# ::node	0.0.1.1.1.1.1	long-03	16-17
# ::root	0	refuse-01
# ::edge	female	ARG0-of	commute-01	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	female	ARG0-of	work-01	0.0.1.1.1	0.0.1.1.1.1	
# ::edge	hour	ARG2-of	regular-02	0.0.1.1.1.1.0	0.0.1.1.1.1.0.0	
# ::edge	refuse-01	ARG0	i	0	0.0.0	
# ::edge	refuse-01	ARG1	use-01	0	0.0	
# ::edge	regular-02	ARG1	work-01	0.0.1.1.1.1.0.0	0.0.1.1.1.1	
# ::edge	regular-02	polarity	-	0.0.1.1.1.1.0.0	0.0.1.1.1.1.0.0.0	
# ::edge	safe-01	ARG1	female	0.0.1.1	0.0.1.1.1	
# ::edge	safe-01	polarity	-	0.0.1.1	0.0.1.1.0	
# ::edge	transit	ARG0-of	safe-01	0.0.1	0.0.1.1	
# ::edge	transit	mod	mass	0.0.1	0.0.1.0	
# ::edge	use-01	ARG0	i	0.0	0.0.0	
# ::edge	use-01	ARG1	transit	0.0	0.0.1	
# ::edge	work-01	ARG1-of	long-03	0.0.1.1.1.1	0.0.1.1.1.1.1	
# ::edge	work-01	time	hour	0.0.1.1.1.1	0.0.1.1.1.1.0	
(r2 / refuse-01
      :ARG0 i
      :ARG1 (u / use-01
            :ARG0 (i / i)
            :ARG1 (t / transit
                  :mod (m / mass)
                  :ARG0-of (s / safe-01 :polarity -
                        :ARG1 (f / female
                              :ARG0-of (c / commute-01)
                              :ARG0-of (w / work-01
                                    :time (h / hour
                                          :ARG2-of (r / regular-02 :polarity -
                                                :ARG1 w))
                                    :ARG1-of (l / long-03)))))))

# ::node	0	refuse-01	
# ::node	0.0	work-01	3-4
# ::node	0.0.0	i	0-1
# ::node	0.0.1	area	7-8
# ::node	0.0.1.0	downtown	6-7
# ::root	0	refuse-01
# ::edge	area	mod	downtown	0.0.1	0.0.1.0	
# ::edge	refuse-01	ARG0	i	0	0.0.0	
# ::edge	refuse-01	ARG1	work-01	0	0.0	
# ::edge	work-01	ARG0	i	0.0	0.0.0	
# ::edge	work-01	location	area	0.0	0.0.1	
(r / refuse-01
  :ARG0 i
  :ARG1 (w / work-01
          :ARG0 (i / i)
          :location (a / area
                      :mod (d / downtown))))

# ::node	0	and	7-8
# ::node	0.0	possible-01	
# ::node	0.0.0	develop-02	6-7
# ::node	0.0.0.0	we	0-1
# ::node	0.0.0.1	commerce	5-6
# ::node	0.1	possible-01	1-2
# ::node	0.1.0	work-01	12-13
# ::node	0.1.0.0	close-10	13-14
# ::node	0.1.0.0.0	live-01	17-18
# ::node	0.1.0.0.1	more	
# ::root	0	and
# ::edge	and	op1	possible-01	0	0.0	
# ::edge	and	op2	possible-01	0	0.1	
# ::edge	close-10	ARG2	live-01	0.1.0.0	0.1.0.0.0	
# ::edge	close-10	degree	more	0.1.0.0	0.1.0.0.1	
# ::edge	develop-02	ARG3	we	0.0.0	0.0.0.0	
# ::edge	develop-02	mod	commerce	0.0.0	0.0.0.1	
# ::edge	live-01	ARG0	we	0.1.0.0.0	0.0.0.0	
# ::edge	possible-01	ARG1	develop-02	0.0	0.0.0	
# ::edge	possible-01	ARG1	work-01	0.1	0.1.0	
# ::edge	work-01	ARG0	we	0.1.0	0.0.0.0	
# ::edge	work-01	location	close-10	0.1.0	0.1.0.0	
(a / and
      :op1 (p / possible-01
            :ARG1 (d / develop-02
                  :ARG3 (w2 / we)
                  :mod (c / commerce)))
      :op2 (p2 / possible-01
            :ARG1 (w / work-01
                  :ARG0 w2
                  :location (c2 / close-10
                        :ARG2 (l / live-01
                              :ARG0 w2)
                        :degree (m / more)))))

# ::node	0	wonderful-03	12-13
# ::node	0.0	road	0-1
# ::node	0.0.0	"Virginia_State_Route_288"	
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	288	0-1
# ::node	0.1	we	
# ::node	0.1.0	use-01	8-9
# ::node	0.1.0.0	actual	7-8
# ::node	0.2	instead-of-91	14-15
# ::node	0.2.0	bottleneck-01	21-22
# ::node	0.2.0.0	lack-01	23-24
# ::node	0.2.0.0.0	road	25-26
# ::node	0.2.0.1	and	17-18
# ::node	0.2.0.1.0	county	16-17
# ::node	0.2.0.1.0.0	"Powhatan_County,_Virginia"	
# ::node	0.2.0.1.0.1	name	16-17
# ::node	0.2.0.1.0.1.0	"Powhatan"	16-17
# ::node	0.2.0.1.1	west	18-19
# ::node	0.2.0.1.1.0	county	19-20
# ::node	0.2.0.1.1.0.0	"Chesterfield_County,_Virginia"	
# ::node	0.2.0.1.1.0.1	name	19-20
# ::node	0.2.0.1.1.0.1.0	"Chesterfield"	19-20
# ::root	0	wonderful-03
# ::edge	and	op1	county	0.2.0.1	0.2.0.1.0	
# ::edge	and	op2	west	0.2.0.1	0.2.0.1.1	
# ::edge	bottleneck-01	ARG0	lack-01	0.2.0	0.2.0.0	
# ::edge	bottleneck-01	ARG1	and	0.2.0	0.2.0.1	
# ::edge	county	name	name	0.2.0.1.0	0.2.0.1.0.1	
# ::edge	county	name	name	0.2.0.1.1.0	0.2.0.1.1.0.1	
# ::edge	county	wiki	"Chesterfield_County,_Virginia"	0.2.0.1.1.0	0.2.0.1.1.0.0	
# ::edge	county	wiki	"Powhatan_County,_Virginia"	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	instead-of-91	ARG2	bottleneck-01	0.2	0.2.0	
# ::edge	lack-01	ARG0	and	0.2.0.0	0.2.0.1	
# ::edge	lack-01	ARG1	road	0.2.0.0	0.2.0.0.0	
# ::edge	name	op1	"Chesterfield"	0.2.0.1.1.0.1	0.2.0.1.1.0.1.0	
# ::edge	name	op1	"Powhatan"	0.2.0.1.0.1	0.2.0.1.0.1.0	
# ::edge	name	op1	288	0.0.1	0.0.1.0	
# ::edge	road	name	name	0.0	0.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0	0.0.0	
# ::edge	use-01	ARG1	road	0.1.0	0.0	
# ::edge	use-01	mod	actual	0.1.0	0.1.0.0	
# ::edge	we	ARG0-of	use-01	0.1	0.1.0	
# ::edge	west	part-of	county	0.2.0.1.1	0.2.0.1.1.0	
# ::edge	wonderful-03	ARG1	road	0	0.0	
# ::edge	wonderful-03	ARG1-of	instead-of-91	0	0.2	
# ::edge	wonderful-03	ARG2	we	0	0.1	
(w2 / wonderful-03
      :ARG1 (r / road :wiki "Virginia_State_Route_288"
            :name (x / name :op1 288))
      :ARG2 (w3 / we
            :ARG0-of (u / use-01
                  :ARG1 r
                  :mod (a2 / actual)))
      :ARG1-of (i / instead-of-91
            :ARG2 (b / bottleneck-01
                  :ARG0 (l / lack-01
                        :ARG0 a
                        :ARG1 (r2 / road))
                  :ARG1 (a / and
                        :op1 (c / county :wiki "Powhatan_County,_Virginia"
                              :name (p / name :op1 "Powhatan"))
                        :op2 (w4 / west
                              :part-of (c2 / county :wiki "Chesterfield_County,_Virginia"
                                    :name (w / name :op1 "Chesterfield")))))))

# ::node	0	desire-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	live-01	5-6
# ::node	0.1.0	city	8-9
# ::node	0.1.0.0	any	7-8
# ::node	0.2	-	2-3
# ::root	0	desire-01
# ::edge	city	mod	any	0.1.0	0.1.0.0	
# ::edge	desire-01	ARG0	i	0	0.0	
# ::edge	desire-01	ARG1	live-01	0	0.1	
# ::edge	desire-01	polarity	-	0	0.2	
# ::edge	live-01	ARG0	i	0.1	0.0	
# ::edge	live-01	location	city	0.1	0.1.0	
(d / desire-01
  :ARG0 (i / i)
  :ARG1 (l / live-01
          :ARG0 i
          :location (c / city
                      :mod (a / any)))
  :polarity -)

# ::node	0	possible-01	1-2
# ::node	0.0	think-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	use-01	8-9
# ::node	0.0.1.0	land	7-8
# ::node	0.0.1.1	rational	6-7
# ::node	0.0.1.1.0	-	6-6
# ::node	0.0.1.2	that	3-4
# ::root	0	possible-01
# ::edge	possible-01	ARG1	think-01	0	0.0	
# ::edge	rational	polarity	-	0.0.1.1	0.0.1.1.0	
# ::edge	think-01	ARG0	you	0.0	0.0.0	
# ::edge	think-01	ARG1	use-01	0.0	0.0.1	
# ::edge	use-01	ARG1	land	0.0.1	0.0.1.0	
# ::edge	use-01	domain	that	0.0.1	0.0.1.2	
# ::edge	use-01	manner	rational	0.0.1	0.0.1.1	
(p / possible-01
      :ARG1 (x4 / think-01
            :ARG0 (x5 / you)
            :ARG1 (u / use-01
                  :ARG1 (l / land)
                  :manner (r / rational :polarity -)
                  :domain (t / that))))

# ::node	0	see-01	3-4
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	anything	4-5
# ::node	0.2.0	resemble-01	6-7
# ::node	0.2.0.0	flood-01	9-10
# ::node	0.2.0.0.0	traffic	12-13
# ::node	0.2.0.1	remote	5-6
# ::node	0.3	ever	
# ::root	0	see-01
# ::edge	anything	ARG1-of	resemble-01	0.2	0.2.0	
# ::edge	flood-01	ARG2	traffic	0.2.0.0	0.2.0.0.0	
# ::edge	resemble-01	ARG2	flood-01	0.2.0	0.2.0.0	
# ::edge	resemble-01	degree	remote	0.2.0	0.2.0.1	
# ::edge	see-01	ARG0	i	0	0.1	
# ::edge	see-01	ARG1	anything	0	0.2	
# ::edge	see-01	polarity	-	0	0.0	
# ::edge	see-01	time	ever	0	0.3	
(s / see-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (a / anything
            :ARG1-of (r / resemble-01
                  :ARG2 (f / flood-01
                        :ARG2 (t2 / traffic))
                  :degree (r2 / remote)))
      :time (e / ever))

# ::node	0	commute-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	work	6-7
# ::node	0.2	and	3-4
# ::node	0.2.0	back	2-3
# ::node	0.2.1	forth	4-5
# ::node	0.3	road	9-11
# ::node	0.3.0	-	
# ::node	0.3.1	name	9-11
# ::node	0.3.1.0	"Huguenot"	9-11
# ::node	0.3.1.1	"Trail"	9-11
# ::root	0	commute-01
# ::edge	and	op1	back	0.2	0.2.0	
# ::edge	and	op2	forth	0.2	0.2.1	
# ::edge	commute-01	ARG0	i	0	0.0	
# ::edge	commute-01	ARG2	work	0	0.1	
# ::edge	commute-01	direction	and	0	0.2	
# ::edge	commute-01	path	road	0	0.3	
# ::edge	name	op1	"Huguenot"	0.3.1	0.3.1.0	
# ::edge	name	op2	"Trail"	0.3.1	0.3.1.1	
# ::edge	road	name	name	0.3	0.3.1	
# ::edge	road	wiki	-	0.3	0.3.0	
(c / commute-01
      :ARG0 (i / i)
      :ARG2 (w / work)
      :direction (a / and
            :op1 (b / back)
            :op2 (f2 / forth))
      :path (r / road :wiki - :name (h / name :op1 "Huguenot" :op2 "Trail")))

# ::node	0	plan-01	7-8
# ::node	0.0	widen-01	4-5
# ::node	0.0.0	road	1-3
# ::node	0.0.0.0	-	
# ::node	0.0.0.1	name	1-3
# ::node	0.0.0.1.0	"Huguenot"	1-3
# ::node	0.0.0.1.1	"Trail"	1-3
# ::node	0.1	already	6-7
# ::node	0.2	cause-01	
# ::node	0.2.0	and	25-26
# ::node	0.2.0.0	demand-01	13-14
# ::node	0.2.0.0.0	develop-02	31-32
# ::node	0.2.0.0.0.0	side	19-20
# ::node	0.2.0.0.0.0.0	county	18-19
# ::node	0.2.0.0.0.0.0.0	"Chesterfield_County,_Virginia"	
# ::node	0.2.0.0.0.0.0.1	name	18-19
# ::node	0.2.0.0.0.0.0.1.0	"Chesterfield"	18-19
# ::node	0.2.0.0.1	heavy	12-13
# ::node	0.2.0.1	school	23-24
# ::node	0.2.0.1.0	new	22-23
# ::node	0.2.0.2	thing	15-16
# ::node	0.2.0.2.0	develop-02	15-16
# ::node	0.2.0.2.1	bunch	28-29
# ::node	0.2.0.2.1.0	whole	27-28
# ::node	0.2.0.2.2	exist-01	30-31
# ::node	0.2.0.2.3	zone-01	34-35
# ::node	0.2.0.2.3.0	before	
# ::node	0.2.0.2.3.0.0	now	
# ::node	0.2.0.2.3.0.1	multiple	
# ::node	0.2.0.2.3.0.1.0	temporal-quantity	35-36
# ::node	0.2.0.2.3.0.1.0.0	1	
# ::node	0.2.0.2.3.0.1.0.1	year	35-36
# ::node	0.2.0.2.4	funnel-01	41-42
# ::node	0.2.0.2.4.0	road	3-4
# ::node	0.2.0.2.4.0.0	-	
# ::node	0.2.0.2.4.0.1	name	43-45
# ::node	0.2.0.2.4.0.1.0	"Robious"	43-45
# ::node	0.2.0.2.4.0.1.1	"Road"	43-45
# ::root	0	plan-01
# ::edge	and	op1	demand-01	0.2.0	0.2.0.0	
# ::edge	and	op2	school	0.2.0	0.2.0.1	
# ::edge	and	op3	thing	0.2.0	0.2.0.2	
# ::edge	before	op1	now	0.2.0.2.3.0	0.2.0.2.3.0.0	
# ::edge	before	quant	multiple	0.2.0.2.3.0	0.2.0.2.3.0.1	
# ::edge	bunch	mod	whole	0.2.0.2.1	0.2.0.2.1.0	
# ::edge	cause-01	ARG0	and	0.2	0.2.0	
# ::edge	county	name	name	0.2.0.0.0.0.0	0.2.0.0.0.0.0.1	
# ::edge	county	wiki	"Chesterfield_County,_Virginia"	0.2.0.0.0.0.0	0.2.0.0.0.0.0.0	
# ::edge	demand-01	ARG0	develop-02	0.2.0.0	0.2.0.0.0	
# ::edge	demand-01	degree	heavy	0.2.0.0	0.2.0.0.1	
# ::edge	develop-02	location	side	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	funnel-01	path	road	0.2.0.2.4	0.2.0.2.4.0	
# ::edge	funnel-01	time	before	0.2.0.2.4	0.2.0.2.3.0	
# ::edge	multiple	op1	temporal-quantity	0.2.0.2.3.0.1	0.2.0.2.3.0.1.0	
# ::edge	name	op1	"Chesterfield"	0.2.0.0.0.0.0.1	0.2.0.0.0.0.0.1.0	
# ::edge	name	op1	"Huguenot"	0.0.0.1	0.0.0.1.0	
# ::edge	name	op1	"Robious"	0.2.0.2.4.0.1	0.2.0.2.4.0.1.0	
# ::edge	name	op2	"Road"	0.2.0.2.4.0.1	0.2.0.2.4.0.1.1	
# ::edge	name	op2	"Trail"	0.0.0.1	0.0.0.1.1	
# ::edge	plan-01	ARG1	widen-01	0	0.0	
# ::edge	plan-01	ARG1-of	cause-01	0	0.2	
# ::edge	plan-01	time	already	0	0.1	
# ::edge	road	name	name	0.0.0	0.0.0.1	
# ::edge	road	name	name	0.2.0.2.4.0	0.2.0.2.4.0.1	
# ::edge	road	wiki	-	0.0.0	0.0.0.0	
# ::edge	road	wiki	-	0.2.0.2.4.0	0.2.0.2.4.0.0	
# ::edge	school	mod	new	0.2.0.1	0.2.0.1.0	
# ::edge	side	mod	county	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	temporal-quantity	quant	1	0.2.0.2.3.0.1.0	0.2.0.2.3.0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.2.0.2.3.0.1.0	0.2.0.2.3.0.1.0.1	
# ::edge	thing	ARG1-of	develop-02	0.2.0.2	0.2.0.2.0	
# ::edge	thing	ARG1-of	exist-01	0.2.0.2	0.2.0.2.2	
# ::edge	thing	ARG1-of	funnel-01	0.2.0.2	0.2.0.2.4	
# ::edge	thing	ARG1-of	zone-01	0.2.0.2	0.2.0.2.3	
# ::edge	thing	quant	bunch	0.2.0.2	0.2.0.2.1	
# ::edge	widen-01	ARG1	road	0.0	0.0.0	
# ::edge	zone-01	time	before	0.2.0.2.3	0.2.0.2.3.0	
(p / plan-01
      :ARG1 (w / widen-01
            :ARG1 (r2 / road :wiki -
                  :name (h / name :op1 "Huguenot" :op2 "Trail")))
      :time (a / already)
      :ARG1-of (c2 / cause-01
            :ARG0 (a2 / and
                  :op1 (d / demand-01
                        :ARG0 (d2 / develop-02
                              :location (s / side
                                    :mod (c / county :wiki "Chesterfield_County,_Virginia"
                                          :name (n / name :op1 "Chesterfield"))))
                        :degree (h2 / heavy))
                  :op2 (s2 / school
                        :mod (n2 / new))
                  :op3 (t / thing
                        :ARG1-of (d3 / develop-02)
                        :quant (b / bunch
                              :mod (w2 / whole))
                        :ARG1-of (e / exist-01)
                        :ARG1-of (z / zone-01
                              :time (b2 / before
                                    :op1 (n4 / now)
                                    :quant (m / multiple
                                          :op1 (t3 / temporal-quantity :quant 1
                                                :unit (y / year)))))
                        :ARG1-of (f / funnel-01
                              :path (r3 / road :wiki -
                                    :name (n3 / name :op1 "Robious" :op2 "Road"))
                              :time b2)))))

# ::node	0	zone-01	5-6
# ::node	0.0	it	0-1
# ::node	0.1	speed-quantity	4-5
# ::node	0.1.0	55	3-4
# ::node	0.1.1	mph	4-5
# ::node	0.2	car	10-11
# ::node	0.2.0	rate-entity-91	
# ::node	0.2.0.0	between	
# ::node	0.2.0.0.0	75	7-8
# ::node	0.2.0.0.1	100	9-10
# ::node	0.2.0.1	morning	14-15
# ::node	0.2.0.1.0	amr-unknown	
# ::root	0	zone-01
# ::edge	between	op1	75	0.2.0.0	0.2.0.0.0	
# ::edge	between	op2	100	0.2.0.0	0.2.0.0.1	
# ::edge	car	frequency	rate-entity-91	0.2	0.2.0	
# ::edge	morning	duration	amr-unknown	0.2.0.1	0.2.0.1.0	
# ::edge	rate-entity-91	ARG1	between	0.2.0	0.2.0.0	
# ::edge	rate-entity-91	ARG2	morning	0.2.0	0.2.0.1	
# ::edge	speed-quantity	quant	55	0.1	0.1.0	
# ::edge	speed-quantity	unit	mph	0.1	0.1.1	
# ::edge	zone-01	ARG1	it	0	0.0	
# ::edge	zone-01	ARG2	speed-quantity	0	0.1	
# ::edge	zone-01	location-of	car	0	0.2	
(z / zone-01
      :ARG1 (i / it)
      :ARG2 (s / speed-quantity :quant 55
            :unit (m / mph))
      :location-of (c / car
            :frequency (r / rate-entity-91
                  :ARG1 (b / between :op1 75 :op2 100)
                  :ARG2 (m2 / morning
                        :duration (a3 / amr-unknown)))))

# ::node	0	contrast-01	
# ::node	0.0	choose-01	
# ::node	0.0.0	person	22-23
# ::node	0.0.0.0	other	22-23
# ::node	0.0.1	and	14-15
# ::node	0.0.1.0	location	
# ::node	0.0.1.0.0	work-01	32-33
# ::node	0.0.1.1	location	
# ::node	0.0.1.1.0	live-01	30-31
# ::node	0.1	possible-01	
# ::node	0.1.0	relieve-01	9-10
# ::node	0.1.0.0	highway	4-5
# ::node	0.1.0.0.0	access-01	3-4
# ::node	0.1.0.0.0.0	limit-01	2-3
# ::node	0.1.0.1	traffic	8-9
# ::node	0.1.0.2	person	12-13
# ::node	0.1.0.2.0	drive-01	12-13
# ::node	0.1.0.2.0.0	between	16-17
# ::node	0.1.0.2.0.0.0	county	
# ::node	0.1.0.2.0.0.0.0	"Chesterfield_County,_Virginia"	
# ::node	0.1.0.2.0.0.0.1	name	
# ::node	0.1.0.2.0.0.0.1.0	"Chesterfield"	17-18
# ::node	0.1.0.2.0.0.0.1.1	"County"	
# ::node	0.1.0.2.0.0.1	county	19-21
# ::node	0.1.0.2.0.0.1.0	"Goochland_County,_Virginia"	
# ::node	0.1.0.2.0.0.1.1	name	19-21
# ::node	0.1.0.2.0.0.1.1.0	"Goochland"	19-21
# ::node	0.1.0.2.0.0.1.1.1	"County"	19-21
# ::node	0.1.0.2.0.1	and	18-19
# ::node	0.1.0.2.0.1.0	back	13-14
# ::node	0.1.0.2.0.1.1	forth	15-16
# ::root	0	contrast-01
# ::edge	access-01	ARG1-of	limit-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	and	op1	back	0.1.0.2.0.1	0.1.0.2.0.1.0	
# ::edge	and	op1	location	0.0.1	0.0.1.0	
# ::edge	and	op2	forth	0.1.0.2.0.1	0.1.0.2.0.1.1	
# ::edge	and	op2	location	0.0.1	0.0.1.1	
# ::edge	between	op1	county	0.1.0.2.0.0	0.1.0.2.0.0.0	
# ::edge	between	op2	county	0.1.0.2.0.0	0.1.0.2.0.0.1	
# ::edge	choose-01	ARG0	person	0.0	0.0.0	
# ::edge	choose-01	ARG1	and	0.0	0.0.1	
# ::edge	contrast-01	ARG1	choose-01	0	0.0	
# ::edge	contrast-01	ARG2	possible-01	0	0.1	
# ::edge	county	name	name	0.1.0.2.0.0.0	0.1.0.2.0.0.0.1	
# ::edge	county	name	name	0.1.0.2.0.0.1	0.1.0.2.0.0.1.1	
# ::edge	county	wiki	"Chesterfield_County,_Virginia"	0.1.0.2.0.0.0	0.1.0.2.0.0.0.0	
# ::edge	county	wiki	"Goochland_County,_Virginia"	0.1.0.2.0.0.1	0.1.0.2.0.0.1.0	
# ::edge	drive-01	direction	and	0.1.0.2.0	0.1.0.2.0.1	
# ::edge	drive-01	location	between	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	highway	ARG1-of	access-01	0.1.0.0	0.1.0.0.0	
# ::edge	live-01	ARG0	person	0.0.1.1.0	0.0.0	
# ::edge	location	location-of	live-01	0.0.1.1	0.0.1.1.0	
# ::edge	location	location-of	work-01	0.0.1.0	0.0.1.0.0	
# ::edge	name	op1	"Chesterfield"	0.1.0.2.0.0.0.1	0.1.0.2.0.0.0.1.0	
# ::edge	name	op1	"Goochland"	0.1.0.2.0.0.1.1	0.1.0.2.0.0.1.1.0	
# ::edge	name	op2	"County"	0.1.0.2.0.0.0.1	0.1.0.2.0.0.0.1.1	
# ::edge	name	op2	"County"	0.1.0.2.0.0.1.1	0.1.0.2.0.0.1.1.1	
# ::edge	person	ARG0-of	drive-01	0.1.0.2	0.1.0.2.0	
# ::edge	person	mod	other	0.0.0	0.0.0.0	
# ::edge	possible-01	ARG1	relieve-01	0.1	0.1.0	
# ::edge	relieve-01	ARG0	highway	0.1.0	0.1.0.0	
# ::edge	relieve-01	ARG1	traffic	0.1.0	0.1.0.1	
# ::edge	relieve-01	ARG2	person	0.1.0	0.1.0.2	
# ::edge	work-01	ARG0	person	0.0.1.0.0	0.0.0	
(c5 / contrast-01
      :ARG1 (c2 / choose-01
            :ARG0 (p / person
                  :mod (o / other))
            :ARG1 (a / and
                  :op1 (l / location
                        :location-of (w / work-01
                              :ARG0 p))
                  :op2 (l4 / location
                        :location-of (l2 / live-01
                              :ARG0 p))))
      :ARG2 (p4 / possible-01
            :ARG1 (r2 / relieve-01
                  :ARG0 (h / highway
                        :ARG1-of (a2 / access-01
                              :ARG1-of (l3 / limit-01)))
                  :ARG1 (t / traffic)
                  :ARG2 (p2 / person
                        :ARG0-of (d / drive-01
                              :location (b / between
                                    :op1 (c3 / county :wiki "Chesterfield_County,_Virginia"
                                          :name (c / name :op1 "Chesterfield" :op2 "County"))
                                    :op2 (c4 / county :wiki "Goochland_County,_Virginia"
                                          :name (g3 / name :op1 "Goochland" :op2 "County")))
                              :direction (a3 / and
                                    :op1 (b2 / back)
                                    :op2 (f / forth)))))))

# ::node	0	and	0-1
# ::node	0.0	create-01	3-4
# ::node	0.0.0	they	1-2
# ::node	0.0.1	congest-01	5-6
# ::node	0.0.1.0	traffic	4-5
# ::node	0.0.1.1	place	8-9
# ::node	0.0.1.1.0	new	7-8
# ::root	0	and
# ::edge	and	op2	create-01	0	0.0	
# ::edge	congest-01	ARG2	traffic	0.0.1	0.0.1.0	
# ::edge	congest-01	location	place	0.0.1	0.0.1.1	
# ::edge	create-01	ARG0	they	0.0	0.0.0	
# ::edge	create-01	ARG1	congest-01	0.0	0.0.1	
# ::edge	place	mod	new	0.0.1.1	0.0.1.1.0	
(a / and
  :op2 (c / create-01
         :ARG0 (t / they)
         :ARG1 (c2 / congest-01
                 :ARG2 (t2 / traffic)
                 :location (p / place
                             :mod (n / new)))))

# ::node	0	moment	8-9
# ::node	0.0	major-02	3-4
# ::node	0.1	this	0-1
# ::node	0.2	d'oh	5-6
# ::node	0.2.0	expressive	
# ::root	0	moment
# ::edge	d'oh	mode	expressive	0.2	0.2.0	
# ::edge	moment	ARG1-of	major-02	0	0.0	
# ::edge	moment	domain	this	0	0.1	
# ::edge	moment	mod	d'oh	0	0.2	
(m / moment
      :ARG1-of (m2 / major-02)
      :domain (t / this)
      :mod (d / d'oh :mode expressive))

# ::node	0	generate-01	7-8
# ::node	0.0	road	4-6
# ::node	0.0.0	"Virginia_State_Route_288"	
# ::node	0.0.1	name	4-6
# ::node	0.0.1.0	"Route"	4-6
# ::node	0.0.1.1	288	4-6
# ::node	0.1	develop-02	9-10
# ::node	0.1.0	residence	8-9
# ::node	0.1.1	area	13-14
# ::node	0.1.1.0	populate-01	12-13
# ::node	0.1.1.0.0	scarce	11-12
# ::node	0.1.1.1	around	15-16
# ::node	0.1.1.1.0	exit	17-18
# ::node	0.1.1.1.1	all	14-15
# ::node	0.1.2	overtax-01	19-20
# ::node	0.1.2.0	road	23-24
# ::node	0.1.2.0.0	local-02	21-22
# ::node	0.1.2.0.0.0	country	22-23
# ::node	0.2	predict-01	2-3
# ::node	0.2.0	we	1-2
# ::root	0	generate-01
# ::edge	area	ARG1-of	populate-01	0.1.1	0.1.1.0	
# ::edge	area	location	around	0.1.1	0.1.1.1	
# ::edge	around	mod	all	0.1.1.1	0.1.1.1.1	
# ::edge	around	op1	exit	0.1.1.1	0.1.1.1.0	
# ::edge	develop-02	ARG0-of	overtax-01	0.1	0.1.2	
# ::edge	develop-02	ARG1	residence	0.1	0.1.0	
# ::edge	develop-02	location	area	0.1	0.1.1	
# ::edge	exit	part-of	road	0.1.1.1.0	0.0	
# ::edge	generate-01	ARG0	road	0	0.0	
# ::edge	generate-01	ARG1	develop-02	0	0.1	
# ::edge	generate-01	ARG1-of	predict-01	0	0.2	
# ::edge	local-02	ARG2	country	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	name	op1	"Route"	0.0.1	0.0.1.0	
# ::edge	name	op2	288	0.0.1	0.0.1.1	
# ::edge	overtax-01	ARG2	road	0.1.2	0.1.2.0	
# ::edge	populate-01	mod	scarce	0.1.1.0	0.1.1.0.0	
# ::edge	predict-01	ARG0	we	0.2	0.2.0	
# ::edge	road	ARG1-of	local-02	0.1.2.0	0.1.2.0.0	
# ::edge	road	name	name	0.0	0.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0	0.0.0	
(g / generate-01
      :ARG0 (r2 / road :wiki "Virginia_State_Route_288"
            :name (r / name :op1 "Route" :op2 288))
      :ARG1 (d / develop-02
            :ARG1 (r3 / residence)
            :location (a / area
                  :ARG1-of (p2 / populate-01
                        :mod (s / scarce))
                  :location (a2 / around
                        :op1 (e / exit
                              :part-of r2)
                        :mod (a3 / all)))
            :ARG0-of (o / overtax-01
                  :ARG2 (r4 / road
                        :ARG1-of (l / local-02
                              :ARG2 (c2 / country)))))
      :ARG1-of (p / predict-01
            :ARG0 (w / we)))

# ::node	0	cause-01	
# ::node	0.0	spend-01	15-16
# ::node	0.0.0	government-organization	4-5
# ::node	0.0.0.0	"Virginia_Department_of_Transportation"	
# ::node	0.0.0.1	name	4-5
# ::node	0.0.0.1.0	"VDOT"	4-5
# ::node	0.0.1	road	22-23
# ::node	0.0.1.0	"Virginia_State_Route_288"	
# ::node	0.0.1.1	name	22-23
# ::node	0.0.1.1.0	288	22-23
# ::node	0.0.2	money	20-21
# ::node	0.0.2.0	friggin'	18-19
# ::node	0.0.2.1	all	16-17
# ::node	0.0.3	cause-01	
# ::node	0.0.3.0	and	12-13
# ::node	0.0.3.0.0	politician	11-12
# ::node	0.0.3.0.1	person	13-14
# ::node	0.0.3.0.1.0	boost-01	13-14
# ::node	0.0.3.0.2	local-02	10-11
# ::root	0	cause-01
# ::edge	and	ARG1-of	local-02	0.0.3.0	0.0.3.0.2	
# ::edge	and	op1	politician	0.0.3.0	0.0.3.0.0	
# ::edge	and	op2	person	0.0.3.0	0.0.3.0.1	
# ::edge	cause-01	ARG0	and	0.0.3	0.0.3.0	
# ::edge	cause-01	ARG0	spend-01	0	0.0	
# ::edge	government-organization	name	name	0.0.0	0.0.0.1	
# ::edge	government-organization	wiki	"Virginia_Department_of_Transportation"	0.0.0	0.0.0.0	
# ::edge	money	mod	all	0.0.2	0.0.2.1	
# ::edge	money	mod	friggin'	0.0.2	0.0.2.0	
# ::edge	money	poss	government-organization	0.0.2	0.0.0	
# ::edge	name	op1	"VDOT"	0.0.0.1	0.0.0.1.0	
# ::edge	name	op1	288	0.0.1.1	0.0.1.1.0	
# ::edge	person	ARG0-of	boost-01	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	road	name	name	0.0.1	0.0.1.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0.1	0.0.1.0	
# ::edge	spend-01	ARG0	government-organization	0.0	0.0.0	
# ::edge	spend-01	ARG1	road	0.0	0.0.1	
# ::edge	spend-01	ARG1-of	cause-01	0.0	0.0.3	
# ::edge	spend-01	ARG3	money	0.0	0.0.2	
(c / cause-01
      :ARG0 (s / spend-01
            :ARG0 (g / government-organization :wiki "Virginia_Department_of_Transportation"
                  :name (v / name :op1 "VDOT"))
            :ARG1 (r / road :wiki "Virginia_State_Route_288"
                  :name (n / name :op1 288))
            :ARG3 (m / money
                  :poss g
                  :mod (x / friggin')
                  :mod (a / all))
            :ARG1-of (c2 / cause-01
                  :ARG0 (a2 / and
                        :op1 (p / politician)
                        :op2 (p2 / person
                              :ARG0-of (b2 / boost-01))
                        :ARG1-of (l / local-02)))))

# ::node	0	be-located-at-91	
# ::node	0.0	person	2-4
# ::node	0.0.0	"Homer_Simpson"	
# ::node	0.0.1	name	2-4
# ::node	0.0.1.0	"Homer"	2-4
# ::node	0.0.1.1	"Simpson"	2-4
# ::node	0.1	amr-unknown	
# ::node	0.2	need-01	6-7
# ::node	0.2.0	you	5-6
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	person	0	0.0	
# ::edge	be-located-at-91	ARG2	amr-unknown	0	0.1	
# ::edge	be-located-at-91	time	need-01	0	0.2	
# ::edge	name	op1	"Homer"	0.0.1	0.0.1.0	
# ::edge	name	op2	"Simpson"	0.0.1	0.0.1.1	
# ::edge	need-01	ARG0	you	0.2	0.2.0	
# ::edge	need-01	ARG1	person	0.2	0.0	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	"Homer_Simpson"	0.0	0.0.0	
(b / be-located-at-91
      :ARG1 (p / person :wiki "Homer_Simpson"
            :name (h / name :op1 "Homer" :op2 "Simpson"))
      :ARG2 (a / amr-unknown)
      :time (n / need-01
            :ARG0 (y / you)
            :ARG1 p))

# ::node	0	note-01	12-13
# ::node	0.0	person	0-2
# ::node	0.0.0	-	
# ::node	0.0.1	name	0-2
# ::node	0.0.1.0	"Dale"	0-2
# ::node	0.0.1.1	"Totten"	0-2
# ::node	0.0.2	have-org-role-91	4-5
# ::node	0.0.2.0	government-organization	7-11
# ::node	0.0.2.0.0	"Virginia_Department_of_Transportation"	
# ::node	0.0.2.0.1	name	7-11
# ::node	0.0.2.0.1.0	"Virginia"	7-11
# ::node	0.0.2.0.1.1	"Department"	7-11
# ::node	0.0.2.0.1.2	"of"	7-11
# ::node	0.0.2.0.1.3	"Transportation"	7-11
# ::node	0.0.2.1	person	4-5
# ::node	0.0.2.1.0	engineer-01	4-5
# ::node	0.0.2.1.1	person	3-4
# ::node	0.0.2.1.1.0	reside-01	3-4
# ::node	0.1	lane-01	18-19
# ::node	0.1.0	4	16-17
# ::node	0.1.1	road	20-21
# ::node	0.1.2	have-03	28-29
# ::node	0.1.2.0	money	30-31
# ::node	0.1.2.0.0	more	29-30
# ::node	0.1.3	cost-01	
# ::node	0.1.3.0	about	22-23
# ::node	0.1.3.0.0	monetary-quantity	
# ::node	0.1.3.0.0.0	13000000	
# ::node	0.1.3.0.0.1	dollar	
# ::root	0	note-01
# ::edge	about	op1	monetary-quantity	0.1.3.0	0.1.3.0.0	
# ::edge	cost-01	ARG2	about	0.1.3	0.1.3.0	
# ::edge	government-organization	name	name	0.0.2.0	0.0.2.0.1	
# ::edge	government-organization	wiki	"Virginia_Department_of_Transportation"	0.0.2.0	0.0.2.0.0	
# ::edge	have-03	ARG0	government-organization	0.1.2	0.0.2.0	
# ::edge	have-03	ARG1	money	0.1.2	0.1.2.0	
# ::edge	have-org-role-91	ARG1	government-organization	0.0.2	0.0.2.0	
# ::edge	have-org-role-91	ARG2	person	0.0.2	0.0.2.1	
# ::edge	lane-01	ARG0	government-organization	0.1	0.0.2.0	
# ::edge	lane-01	ARG1	road	0.1	0.1.1	
# ::edge	lane-01	ARG1-of	cost-01	0.1	0.1.3	
# ::edge	lane-01	condition	have-03	0.1	0.1.2	
# ::edge	lane-01	quant	4	0.1	0.1.0	
# ::edge	monetary-quantity	quant	13000000	0.1.3.0.0	0.1.3.0.0.0	
# ::edge	monetary-quantity	unit	dollar	0.1.3.0.0	0.1.3.0.0.1	
# ::edge	money	mod	more	0.1.2.0	0.1.2.0.0	
# ::edge	name	op1	"Dale"	0.0.1	0.0.1.0	
# ::edge	name	op1	"Virginia"	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	name	op2	"Department"	0.0.2.0.1	0.0.2.0.1.1	
# ::edge	name	op2	"Totten"	0.0.1	0.0.1.1	
# ::edge	name	op3	"of"	0.0.2.0.1	0.0.2.0.1.2	
# ::edge	name	op4	"Transportation"	0.0.2.0.1	0.0.2.0.1.3	
# ::edge	note-01	ARG0	person	0	0.0	
# ::edge	note-01	ARG1	lane-01	0	0.1	
# ::edge	person	ARG0-of	engineer-01	0.0.2.1	0.0.2.1.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.2	
# ::edge	person	ARG0-of	reside-01	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	person	mod	person	0.0.2.1	0.0.2.1.1	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	-	0.0	0.0.0	
(n / note-01
      :ARG0 (p / person :wiki -
            :name (d / name :op1 "Dale" :op2 "Totten")
            :ARG0-of (h2 / have-org-role-91
                  :ARG1 (g / government-organization :wiki "Virginia_Department_of_Transportation"
                        :name (v / name :op1 "Virginia" :op2 "Department" :op3 "of" :op4 "Transportation"))
                  :ARG2 (p3 / person
                        :ARG0-of (e2 / engineer-01)
                        :mod (p2 / person
                              :ARG0-of (r / reside-01)))))
      :ARG1 (l2 / lane-01 :quant 4
            :ARG0 g
            :ARG1 (r2 / road)
            :condition (h / have-03
                  :ARG0 g
                  :ARG1 (m2 / money
                        :mod (m3 / more)))
            :ARG1-of (c / cost-01
                  :ARG2 (a / about
                        :op1 (m / monetary-quantity :quant 13000000
                              :unit (d2 / dollar))))))

# ::node	0	have-03	4-5
# ::node	0.0	-	5-6
# ::node	0.1	government-organization	3-4
# ::node	0.1.0	"Virginia_Department_of_Transportation"	
# ::node	0.1.1	name	3-4
# ::node	0.1.1.0	"VDOT"	3-4
# ::node	0.2	money	7-8
# ::node	0.2.0	construct-01	10-11
# ::node	0.2.0.0	road	9-10
# ::node	0.2.0.0.0	region	14-15
# ::node	0.2.0.0.0.0	city	13-14
# ::node	0.2.0.0.0.0.0	"Richmond,_Virginia"	
# ::node	0.2.0.0.0.0.1	name	13-14
# ::node	0.2.0.0.0.0.1.0	"Richmond"	13-14
# ::node	0.3	of-course	
# ::root	0	have-03
# ::edge	city	name	name	0.2.0.0.0.0	0.2.0.0.0.0.1	
# ::edge	city	wiki	"Richmond,_Virginia"	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	construct-01	ARG1	road	0.2.0	0.2.0.0	
# ::edge	government-organization	name	name	0.1	0.1.1	
# ::edge	government-organization	wiki	"Virginia_Department_of_Transportation"	0.1	0.1.0	
# ::edge	have-03	ARG0	government-organization	0	0.1	
# ::edge	have-03	ARG1	money	0	0.2	
# ::edge	have-03	mod	of-course	0	0.3	
# ::edge	have-03	polarity	-	0	0.0	
# ::edge	money	purpose	construct-01	0.2	0.2.0	
# ::edge	name	op1	"Richmond"	0.2.0.0.0.0.1	0.2.0.0.0.0.1.0	
# ::edge	name	op1	"VDOT"	0.1.1	0.1.1.0	
# ::edge	region	part	city	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	road	location	region	0.2.0.0	0.2.0.0.0	
(h / have-03 :polarity -
      :ARG0 (g / government-organization :wiki "Virginia_Department_of_Transportation"
            :name (v / name :op1 "VDOT"))
      :ARG1 (m / money
            :purpose (c2 / construct-01
                  :ARG1 (r2 / road
                        :location (r3 / region
                              :part (c / city :wiki "Richmond,_Virginia"
                                    :name (r / name :op1 "Richmond"))))))
      :mod (o / of-course))

# ::node	0	surprise-01	4-5
# ::node	0.0	rapid	8-9
# ::node	0.0.0	this	9-10
# ::node	0.0.1	only	1-2
# ::node	0.1	i	
# ::root	0	surprise-01
# ::edge	rapid	manner-of	this	0.0	0.0.0	
# ::edge	rapid	mod	only	0.0	0.0.1	
# ::edge	surprise-01	ARG0	rapid	0	0.0	
# ::edge	surprise-01	ARG1	i	0	0.1	
(s / surprise-01
  :ARG0 (r / rapid
          :manner-of (t / this)
          :mod (o / only))
  :ARG1 (i / i))

# ::node	0	think-01	2-3
# ::node	0.0	i	1-2
# ::node	0.0.0	even	0-1
# ::node	0.1	possible-01	
# ::node	0.1.0	lag-01	7-8
# ::node	0.1.0.0	or	10-11
# ::node	0.1.0.0.0	temporal-quantity	
# ::node	0.1.0.0.0.0	3	9-10
# ::node	0.1.0.0.0.1	year	
# ::node	0.1.0.0.1	temporal-quantity	12-13
# ::node	0.1.0.0.1.0	4	11-12
# ::node	0.1.0.0.1.1	year	12-13
# ::root	0	think-01
# ::edge	i	mod	even	0.0	0.0.0	
# ::edge	lag-01	ARG2	or	0.1.0	0.1.0.0	
# ::edge	or	op1	temporal-quantity	0.1.0.0	0.1.0.0.0	
# ::edge	or	op2	temporal-quantity	0.1.0.0	0.1.0.0.1	
# ::edge	possible-01	ARG1	lag-01	0.1	0.1.0	
# ::edge	temporal-quantity	quant	3	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	temporal-quantity	quant	4	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	temporal-quantity	unit	year	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	temporal-quantity	unit	year	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	possible-01	0	0.1	
(t2 / think-01
  :ARG0 (i / i
          :mod (e / even))
  :ARG1 (p / possible-01
          :ARG1 (l / lag-01
                    :ARG2 (o2 / or
                            :op1 (t3 / temporal-quantity
                                   :quant 3
                                   :unit (y3 / year))
                            :op2 (t / temporal-quantity
                                   :quant 4
                                   :unit (y2 / year))))))

# ::node	0	open-01	20-21
# ::node	0.0	highway	5-6
# ::node	0.0.0	"Virginia_State_Route_288"	
# ::node	0.0.1	name	0-2
# ::node	0.0.1.0	"Route"	0-2
# ::node	0.0.1.1	288	0-2
# ::node	0.0.2	run-04	6-7
# ::node	0.0.2.0	around	7-8
# ::node	0.0.2.0.0	quadrant	12-13
# ::node	0.0.2.0.0.0	country-region	15-19
# ::node	0.0.2.0.0.0.0	-	
# ::node	0.0.2.0.0.0.1	name	15-19
# ::node	0.0.2.0.0.0.1.0	"Richmond"	15-19
# ::node	0.0.2.0.0.0.1.1	"New"	15-19
# ::node	0.0.2.0.0.0.1.2	"Urban"	15-19
# ::node	0.0.2.0.0.0.1.3	"Region"	15-19
# ::node	0.0.2.0.0.1	south-west	9-10
# ::node	0.0.3	circumference	4-5
# ::node	0.1	late	22-23
# ::node	0.1.0	date-entity	23-24
# ::node	0.1.0.0	2004	23-24
# ::root	0	open-01
# ::edge	around	op1	quadrant	0.0.2.0	0.0.2.0.0	
# ::edge	country-region	name	name	0.0.2.0.0.0	0.0.2.0.0.0.1	
# ::edge	country-region	wiki	-	0.0.2.0.0.0	0.0.2.0.0.0.0	
# ::edge	date-entity	year	2004	0.1.0	0.1.0.0	
# ::edge	highway	ARG1-of	run-04	0.0	0.0.2	
# ::edge	highway	mod	circumference	0.0	0.0.3	
# ::edge	highway	name	name	0.0	0.0.1	
# ::edge	highway	wiki	"Virginia_State_Route_288"	0.0	0.0.0	
# ::edge	late	op1	date-entity	0.1	0.1.0	
# ::edge	name	op1	"Richmond"	0.0.2.0.0.0.1	0.0.2.0.0.0.1.0	
# ::edge	name	op1	"Route"	0.0.1	0.0.1.0	
# ::edge	name	op2	"New"	0.0.2.0.0.0.1	0.0.2.0.0.0.1.1	
# ::edge	name	op2	288	0.0.1	0.0.1.1	
# ::edge	name	op3	"Urban"	0.0.2.0.0.0.1	0.0.2.0.0.0.1.2	
# ::edge	name	op4	"Region"	0.0.2.0.0.0.1	0.0.2.0.0.0.1.3	
# ::edge	open-01	ARG1	highway	0	0.0	
# ::edge	open-01	time	late	0	0.1	
# ::edge	quadrant	mod	south-west	0.0.2.0.0	0.0.2.0.0.1	
# ::edge	quadrant	part-of	country-region	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	run-04	direction	around	0.0.2	0.0.2.0	
(o / open-01
      :ARG1 (h / highway :wiki "Virginia_State_Route_288"
            :name (r / name :op1 "Route" :op2 288)
            :ARG1-of (r3 / run-04
                  :direction (a / around
                        :op1 (q / quadrant
                              :part-of (c / country-region :wiki -
                                    :name (r2 / name :op1 "Richmond" :op2 "New" :op3 "Urban" :op4 "Region"))
                              :mod (s / south-west))))
            :mod (c2 / circumference))
      :time (l / late
            :op1 (d / date-entity :year 2004)))

# ::node	0	and	9-10
# ::node	0.0	change-01	3-4
# ::node	0.0.0	it	1-2
# ::node	0.0.1	pattern	5-6
# ::node	0.0.1.0	develop-02	4-5
# ::node	0.0.2	cause-01	
# ::node	0.0.2.0	worsen-01	8-9
# ::node	0.1	cause-01	10-11
# ::node	0.1.0	congest-01	13-14
# ::node	0.1.0.0	around	14-15
# ::node	0.1.0.0.0	exit	16-17
# ::node	0.1.0.1	traffic	12-13
# ::node	0.1.0.2	localize-01	11-12
# ::node	0.2	already	0-1
# ::root	0	and
# ::edge	and	op1	change-01	0	0.0	
# ::edge	and	op2	cause-01	0	0.1	
# ::edge	and	time	already	0	0.2	
# ::edge	around	op1	exit	0.1.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG0	it	0.1	0.0.0	
# ::edge	cause-01	ARG0	worsen-01	0.0.2	0.0.2.0	
# ::edge	cause-01	ARG1	congest-01	0.1	0.1.0	
# ::edge	change-01	ARG0	it	0.0	0.0.0	
# ::edge	change-01	ARG1	pattern	0.0	0.0.1	
# ::edge	change-01	ARG1-of	cause-01	0.0	0.0.2	
# ::edge	congest-01	ARG1	around	0.1.0	0.1.0.0	
# ::edge	congest-01	ARG1-of	localize-01	0.1.0	0.1.0.2	
# ::edge	congest-01	ARG2	traffic	0.1.0	0.1.0.1	
# ::edge	exit	poss	it	0.1.0.0.0	0.0.0	
# ::edge	pattern	mod	develop-02	0.0.1	0.0.1.0	
# ::edge	worsen-01	ARG1	pattern	0.0.2.0	0.0.1	
(a / and
      :op1 (c / change-01
            :ARG0 (i / it)
            :ARG1 (p / pattern
                  :mod (d / develop-02))
            :ARG1-of (c4 / cause-01
                  :ARG0 (w / worsen-01
                        :ARG1 p)))
      :op2 (c2 / cause-01
            :ARG0 i
            :ARG1 (c3 / congest-01
                  :ARG1 (a2 / around
                        :op1 (e / exit
                              :poss i))
                  :ARG2 (t / traffic)
                  :ARG1-of (l2 / localize-01)))
      :time (a3 / already))

# ::node	0	tell-01	5-6
# ::node	0.0	newspaper	1-5
# ::node	0.0.0	"Richmond_Times-Dispatch"	
# ::node	0.0.1	name	1-5
# ::node	0.0.1.0	"Richmond"	1-5
# ::node	0.0.1.1	"Times-Dispatch"	1-5
# ::node	0.1	tale	7-8
# ::node	0.1.0	impact-01	11-12
# ::node	0.1.0.0	road	14-16
# ::node	0.1.0.0.0	-	
# ::node	0.1.0.0.1	name	14-16
# ::node	0.1.0.0.1.0	"Huguenot"	14-16
# ::node	0.1.0.0.1.1	"Trail"	14-16
# ::node	0.1.0.0.2	county	17-19
# ::node	0.1.0.0.2.0	"Powhatan_County,_Virginia"	
# ::node	0.1.0.0.2.1	name	17-19
# ::node	0.1.0.0.2.1.0	"Powhatan"	17-19
# ::node	0.1.0.0.2.1.1	"County"	17-19
# ::node	0.2	today	8-9
# ::root	0	tell-01
# ::edge	county	name	name	0.1.0.0.2	0.1.0.0.2.1	
# ::edge	county	wiki	"Powhatan_County,_Virginia"	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	impact-01	ARG1	road	0.1.0	0.1.0.0	
# ::edge	name	op1	"Huguenot"	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	name	op1	"Powhatan"	0.1.0.0.2.1	0.1.0.0.2.1.0	
# ::edge	name	op1	"Richmond"	0.0.1	0.0.1.0	
# ::edge	name	op2	"County"	0.1.0.0.2.1	0.1.0.0.2.1.1	
# ::edge	name	op2	"Times-Dispatch"	0.0.1	0.0.1.1	
# ::edge	name	op2	"Trail"	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	newspaper	name	name	0.0	0.0.1	
# ::edge	newspaper	wiki	"Richmond_Times-Dispatch"	0.0	0.0.0	
# ::edge	road	location	county	0.1.0.0	0.1.0.0.2	
# ::edge	road	name	name	0.1.0.0	0.1.0.0.1	
# ::edge	road	wiki	-	0.1.0.0	0.1.0.0.0	
# ::edge	tale	topic	impact-01	0.1	0.1.0	
# ::edge	tell-01	ARG0	newspaper	0	0.0	
# ::edge	tell-01	ARG1	tale	0	0.1	
# ::edge	tell-01	time	today	0	0.2	
(t / tell-01
      :ARG0 (n / newspaper :wiki "Richmond_Times-Dispatch"
            :name (r / name :op1 "Richmond" :op2 "Times-Dispatch"))
      :ARG1 (t2 / tale
            :topic (i / impact-01
                  :ARG1 (r2 / road :wiki -
                        :name (h / name :op1 "Huguenot" :op2 "Trail")
                        :location (c / county :wiki "Powhatan_County,_Virginia"
                              :name (p / name :op1 "Powhatan" :op2 "County")))))
      :time (t3 / today))

# ::node	0	report-01	15-16
# ::node	0.0	person	16-18
# ::node	0.0.0	-	
# ::node	0.0.1	name	16-18
# ::node	0.0.1.0	"Will"	16-18
# ::node	0.0.1.1	"Jones"	16-18
# ::node	0.1	double-01	4-5
# ::node	0.1.0	traffic	0-1
# ::node	0.1.0.0	section	7-8
# ::node	0.1.0.0.0	1	6-7
# ::node	0.1.0.0.1	road	9-11
# ::node	0.1.0.0.1.0	-	
# ::node	0.1.0.0.1.1	name	9-11
# ::node	0.1.0.0.1.1.0	"Huguenot"	9-11
# ::node	0.1.0.0.1.1.1	"Trail"	9-11
# ::node	0.1.1	since	11-12
# ::node	0.1.1.0	open-01	13-14
# ::node	0.1.1.0.0	road	12-13
# ::node	0.1.1.0.0.0	"Virginia_State_Route_288"	
# ::node	0.1.1.0.0.1	name	12-13
# ::node	0.1.1.0.0.1.0	288	12-13
# ::node	0.1.2	more-than	2-3
# ::root	0	report-01
# ::edge	double-01	ARG1	traffic	0.1	0.1.0	
# ::edge	double-01	mod	more-than	0.1	0.1.2	
# ::edge	double-01	time	since	0.1	0.1.1	
# ::edge	name	op1	"Huguenot"	0.1.0.0.1.1	0.1.0.0.1.1.0	
# ::edge	name	op1	"Will"	0.0.1	0.0.1.0	
# ::edge	name	op1	288	0.1.1.0.0.1	0.1.1.0.0.1.0	
# ::edge	name	op2	"Jones"	0.0.1	0.0.1.1	
# ::edge	name	op2	"Trail"	0.1.0.0.1.1	0.1.0.0.1.1.1	
# ::edge	open-01	ARG1	road	0.1.1.0	0.1.1.0.0	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	-	0.0	0.0.0	
# ::edge	report-01	ARG0	person	0	0.0	
# ::edge	report-01	ARG1	double-01	0	0.1	
# ::edge	road	name	name	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	road	name	name	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	road	wiki	-	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	section	part-of	road	0.1.0.0	0.1.0.0.1	
# ::edge	section	quant	1	0.1.0.0	0.1.0.0.0	
# ::edge	since	op1	open-01	0.1.1	0.1.1.0	
# ::edge	traffic	location	section	0.1.0	0.1.0.0	
(r2 / report-01
      :ARG0 (p / person :wiki -
            :name (w / name :op1 "Will" :op2 "Jones"))
      :ARG1 (d / double-01
            :ARG1 (t / traffic
                  :location (s / section :quant 1
                        :part-of (r / road :wiki -
                              :name (h / name :op1 "Huguenot" :op2 "Trail"))))
            :time (s2 / since
                  :op1 (o / open-01
                        :ARG1 (r3 / road :wiki "Virginia_State_Route_288"
                              :name (x / name :op1 288))))
            :mod (m / more-than)))

# ::node	0	braawwk	0-1
# ::root	0	braawwk
(b / braawwk)

# ::node	0	braawwkkk	0-1
# ::root	0	braawwkkk
(b / braawwkkk)

# ::node	0	take-10	3-4
# ::node	0.0	it	0-1
# ::node	0.1	long-03	4-5
# ::node	0.1.0	-	
# ::root	0	take-10
# ::edge	long-03	ARG1	it	0.1	0.0	
# ::edge	long-03	polarity	-	0.1	0.1.0	
# ::edge	take-10	ARG0	it	0	0.0	
# ::edge	take-10	ARG1	long-03	0	0.1	
(t / take-10
      :ARG0 (i / it)
      :ARG1 (l / long-03 :polarity -
            :ARG1 i))

# ::node	0	surge-01	4-5
# ::node	0.0	and	1-2
# ::node	0.0.0	speed-01	0-1
# ::node	0.0.1	accident	2-3
# ::node	0.1	as-well	
# ::root	0	surge-01
# ::edge	and	op1	speed-01	0.0	0.0.0	
# ::edge	and	op2	accident	0.0	0.0.1	
# ::edge	surge-01	ARG1	and	0	0.0	
# ::edge	surge-01	mod	as-well	0	0.1	
(s / surge-01
  :ARG1 (a / and
          :op1 (s2 / speed-01)
          :op2 (a2 / accident))
  :mod (a3 / as-well))

# ::node	0	report-01	4-5
# ::node	0.0	accident	1-2
# ::node	0.0.0	near-02	5-6
# ::node	0.0.0.0	intersect-01	7-8
# ::node	0.0.0.0.0	road	9-11
# ::node	0.0.0.0.0.0	-	
# ::node	0.0.0.0.0.1	name	9-11
# ::node	0.0.0.0.0.1.0	"Winterfield"	9-11
# ::node	0.0.0.0.0.1.1	"Road"	9-11
# ::node	0.0.1	17	0-1
# ::node	0.0.1.0	up-02	16-17
# ::node	0.0.1.0.0	12	18-19
# ::node	0.0.1.0.0.0	accident	
# ::node	0.0.1.0.0.0.0	all	20-21
# ::node	0.0.1.0.0.0.0.0	date-entity	22-23
# ::node	0.0.1.0.0.0.0.0.0	2004	22-23
# ::node	0.1	so-far	
# ::node	0.1.0	year	14-15
# ::node	0.1.0.0	this	13-14
# ::root	0	report-01
# ::edge	12	quant-of	accident	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	17	ARG4-of	up-02	0.0.1	0.0.1.0	
# ::edge	accident	ARG1-of	near-02	0.0	0.0.0	
# ::edge	accident	quant	17	0.0	0.0.1	
# ::edge	accident	time	all	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	all	op1	date-entity	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
# ::edge	date-entity	year	2004	0.0.1.0.0.0.0.0	0.0.1.0.0.0.0.0.0	
# ::edge	intersect-01	ARG0	road	0.0.0.0	0.0.0.0.0	
# ::edge	name	op1	"Winterfield"	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	name	op2	"Road"	0.0.0.0.0.1	0.0.0.0.0.1.1	
# ::edge	near-02	ARG2	intersect-01	0.0.0	0.0.0.0	
# ::edge	report-01	ARG1	accident	0	0.0	
# ::edge	report-01	time	so-far	0	0.1	
# ::edge	road	name	name	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	road	wiki	-	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	so-far	op1	year	0.1	0.1.0	
# ::edge	up-02	ARG3	12	0.0.1.0	0.0.1.0.0	
# ::edge	year	mod	this	0.1.0	0.1.0.0	
(r / report-01
      :ARG1 (a / accident
            :ARG1-of (n / near-02
                  :ARG2 (i4 / intersect-01
                        :ARG0 (r2 / road :wiki - :name (w / name :op1 "Winterfield" :op2 "Road"))))
            :quant (x / 17
                  :ARG4-of (u / up-02
                        :ARG3 (x2 / 12
                              :quant-of (a3 / accident
                                    :time (a2 / all
                                          :op1 (d / date-entity :year 2004)))))))
      :time (s2 / so-far
            :op1 (y / year
                  :mod (t / this))))

# ::node	0	understand-01	2-3
# ::node	0.0	you	1-2
# ::node	0.1	thing	9-10
# ::node	0.1.0	feel-01	9-10
# ::node	0.1.0.0	person	6-7
# ::node	0.1.0.0.0	person	6-7
# ::node	0.1.0.0.0.0	-	
# ::node	0.1.0.0.0.1	name	6-7
# ::node	0.1.0.0.0.1.0	"TMT"	6-7
# ::node	0.1.0.0.0.2	city	8-9
# ::node	0.1.0.0.0.2.0	"Fairfax,_Virginia"	
# ::node	0.1.0.0.0.2.1	name	8-9
# ::node	0.1.0.0.0.2.1.0	"Fairfax"	8-9
# ::node	0.2	now	0-1
# ::root	0	understand-01
# ::edge	city	name	name	0.1.0.0.0.2	0.1.0.0.0.2.1	
# ::edge	city	wiki	"Fairfax,_Virginia"	0.1.0.0.0.2	0.1.0.0.0.2.0	
# ::edge	feel-01	ARG0	person	0.1.0	0.1.0.0	
# ::edge	name	op1	"Fairfax"	0.1.0.0.0.2.1	0.1.0.0.0.2.1.0	
# ::edge	name	op1	"TMT"	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	person	example	person	0.1.0.0	0.1.0.0.0	
# ::edge	person	location	city	0.1.0.0.0	0.1.0.0.0.2	
# ::edge	person	name	name	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	person	wiki	-	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	thing	ARG1-of	feel-01	0.1	0.1.0	
# ::edge	understand-01	ARG0	you	0	0.0	
# ::edge	understand-01	ARG1	thing	0	0.1	
# ::edge	understand-01	time	now	0	0.2	
(u / understand-01
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG1-of (f2 / feel-01
                  :ARG0 (p2 / person
                        :example (p / person :wiki -
                              :name (t / name :op1 "TMT")
                              :location (c / city :wiki "Fairfax,_Virginia"
                                    :name (f / name :op1 "Fairfax"))))))
      :time (n / now))

# ::node	0	take-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	position-02	8-9
# ::node	0.1.0	favor-01	
# ::node	0.1.0.0	road	7-8
# ::node	0.2	usual	2-3
# ::root	0	take-01
# ::edge	favor-01	ARG1	road	0.1.0	0.1.0.0	
# ::edge	position-02	ARG0	i	0.1	0.0	
# ::edge	position-02	ARG2	favor-01	0.1	0.1.0	
# ::edge	take-01	ARG0	i	0	0.0	
# ::edge	take-01	ARG1	position-02	0	0.1	
# ::edge	take-01	mod	usual	0	0.2	
(t / take-01
      :ARG0 (i / i)
      :ARG1 (p / position-02
            :ARG0 i
            :ARG2 (f / favor-01
                  :ARG1 (r / road)))
      :mod (u / usual))

# ::node	0	contrast-01	0-1
# ::node	0.0	excess	15-16
# ::node	0.0.0	definite	14-15
# ::node	0.0.1	road	12-13
# ::node	0.0.1.0	"Virginia_State_Route_288"	
# ::node	0.0.1.1	name	12-13
# ::node	0.0.1.1.0	288	12-13
# ::node	0.0.2	need-01	4-5
# ::node	0.0.2.0	glaring	3-4
# ::node	0.0.2.1	thing	10-11
# ::node	0.0.2.1.0	state	10-11
# ::node	0.0.2.1.1	other	6-7
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	excess	0	0.0	
# ::edge	excess	domain	road	0.0	0.0.1	
# ::edge	excess	mod	definite	0.0	0.0.0	
# ::edge	excess	prep-with	need-01	0.0	0.0.2	
# ::edge	name	op1	288	0.0.1.1	0.0.1.1.0	
# ::edge	need-01	location	thing	0.0.2	0.0.2.1	
# ::edge	need-01	mod	glaring	0.0.2	0.0.2.0	
# ::edge	road	name	name	0.0.1	0.0.1.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0.1	0.0.1.0	
# ::edge	thing	mod	other	0.0.2.1	0.0.2.1.1	
# ::edge	thing	part-of	state	0.0.2.1	0.0.2.1.0	
(c / contrast-01
      :ARG2 (e / excess
            :mod (d / definite)
            :domain (r / road :wiki "Virginia_State_Route_288"
                  :name (x / name :op1 288))
            :prep-with (n / need-01
                  :mod (g / glaring)
                  :location (t / thing
                        :part-of (s / state)
                        :mod (o / other)))))

# ::node	0	have-03	1-2
# ::node	0.0	city	3-4
# ::node	0.0.0	"Richmond,_Virginia"	
# ::node	0.0.1	name	5-6
# ::node	0.0.1.0	"Richmond"	5-6
# ::node	0.1	traffic	11-12
# ::node	0.2	have-polarity-91	8-9
# ::node	0.2.0	-	10-11
# ::node	0.2.1	virtual	9-10
# ::root	0	have-03
# ::edge	city	name	name	0.0	0.0.1	
# ::edge	city	wiki	"Richmond,_Virginia"	0.0	0.0.0	
# ::edge	have-03	ARG0	city	0	0.0	
# ::edge	have-03	ARG1	traffic	0	0.1	
# ::edge	have-03	ARG1-of	have-polarity-91	0	0.2	
# ::edge	have-polarity-91	ARG2	-	0.2	0.2.0	
# ::edge	have-polarity-91	degree	virtual	0.2	0.2.1	
# ::edge	name	op1	"Richmond"	0.0.1	0.0.1.0	
(h / have-03
      :ARG0 (c / city :wiki "Richmond,_Virginia" :name (r / name :op1 "Richmond"))
      :ARG1 (t / traffic)
      :ARG1-of (h2 / have-polarity-91
            :ARG2 -
            :degree (v / virtual)))

# ::node	0	last-01	
# ::node	0.0	hour	2-3
# ::node	0.0.0	rush-01	1-2
# ::node	0.1	temporal-quantity	5-6
# ::node	0.1.0	30	4-5
# ::node	0.1.1	minute	5-6
# ::root	0	last-01
# ::edge	hour	time-of	rush-01	0.0	0.0.0	
# ::edge	last-01	ARG1	hour	0	0.0	
# ::edge	last-01	ARG2	temporal-quantity	0	0.1	
# ::edge	temporal-quantity	quant	30	0.1	0.1.0	
# ::edge	temporal-quantity	unit	minute	0.1	0.1.1	
(l / last-01
      :ARG1 (h / hour
            :time-of (r / rush-01))
      :ARG2 (t / temporal-quantity :quant 30
            :unit (m / minute)))

# ::node	0	and	0-1
# ::node	0.0	give-01	2-3
# ::node	0.0.0	you	1-2
# ::node	0.0.1	beltway	5-6
# ::node	0.0.1.0	area	10-11
# ::node	0.0.1.0.0	rural	9-10
# ::node	0.0.1.0.0.0	large	8-9
# ::node	0.0.2	they	
# ::root	0	and
# ::edge	and	op2	give-01	0	0.0	
# ::edge	area	mod	rural	0.0.1.0	0.0.1.0.0	
# ::edge	beltway	path	area	0.0.1	0.0.1.0	
# ::edge	give-01	ARG0	you	0.0	0.0.0	
# ::edge	give-01	ARG1	beltway	0.0	0.0.1	
# ::edge	give-01	ARG2	they	0.0	0.0.2	
# ::edge	rural	degree	large	0.0.1.0.0	0.0.1.0.0.0	
(a / and
      :op2 (g / give-01
            :ARG0 (y / you)
            :ARG1 (b / beltway
                  :path (a2 / area
                        :mod (r / rural
                              :degree (l / large))))
            :ARG2 (t / they)))

# ::node	0	road	1-2
# ::node	0.0	nowhere	
# ::root	0	road
# ::edge	road	destination	nowhere	0	0.0	
(r / road
      :destination (n / nowhere))

# ::node	0	think-01	1-2
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	possible-01	
# ::node	0.2.0	spend-01	7-8
# ::node	0.2.0.0	or	12-13
# ::node	0.2.0.0.0	facility	
# ::node	0.2.0.0.0.0	cross-02	11-12
# ::node	0.2.0.0.0.0.0	river	10-11
# ::node	0.2.0.0.0.0.0.0	"Potomac_River"	
# ::node	0.2.0.0.0.0.0.1	name	10-11
# ::node	0.2.0.0.0.0.0.1.0	"Potomac"	10-11
# ::node	0.2.0.0.0.1	another	9-10
# ::node	0.2.0.0.1	improve-01	14-15
# ::node	0.2.0.0.1.0	road	13-14
# ::node	0.2.0.0.1.1	need-01	18-19
# ::node	0.2.0.0.1.1.0	desperate	17-18
# ::node	0.2.0.0.1.1.1	country-region	20-21
# ::node	0.2.0.0.1.1.1.0	"Northern_Virginia"	
# ::node	0.2.0.0.1.1.1.1	name	20-21
# ::node	0.2.0.0.1.1.1.1.0	"NOVA"	20-21
# ::node	0.2.0.1	money	4-5
# ::node	0.2.0.1.0	this	3-4
# ::node	0.3	just	0-1
# ::root	0	think-01
# ::edge	country-region	name	name	0.2.0.0.1.1.1	0.2.0.0.1.1.1.1	
# ::edge	country-region	wiki	"Northern_Virginia"	0.2.0.0.1.1.1	0.2.0.0.1.1.1.0	
# ::edge	cross-02	ARG1	river	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	facility	location-of	cross-02	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	facility	mod	another	0.2.0.0.0	0.2.0.0.0.1	
# ::edge	improve-01	ARG1	road	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	improve-01	ARG1-of	need-01	0.2.0.0.1	0.2.0.0.1.1	
# ::edge	money	mod	this	0.2.0.1	0.2.0.1.0	
# ::edge	name	op1	"NOVA"	0.2.0.0.1.1.1.1	0.2.0.0.1.1.1.1.0	
# ::edge	name	op1	"Potomac"	0.2.0.0.0.0.0.1	0.2.0.0.0.0.0.1.0	
# ::edge	need-01	location	country-region	0.2.0.0.1.1	0.2.0.0.1.1.1	
# ::edge	need-01	manner	desperate	0.2.0.0.1.1	0.2.0.0.1.1.0	
# ::edge	or	op1	facility	0.2.0.0	0.2.0.0.0	
# ::edge	or	op2	improve-01	0.2.0.0	0.2.0.0.1	
# ::edge	possible-01	ARG1	spend-01	0.2	0.2.0	
# ::edge	river	name	name	0.2.0.0.0.0.0	0.2.0.0.0.0.0.1	
# ::edge	river	wiki	"Potomac_River"	0.2.0.0.0.0.0	0.2.0.0.0.0.0.0	
# ::edge	spend-01	ARG1	or	0.2.0	0.2.0.0	
# ::edge	spend-01	ARG3	money	0.2.0	0.2.0.1	
# ::edge	think-01	ARG0	you	0	0.1	
# ::edge	think-01	ARG1	possible-01	0	0.2	
# ::edge	think-01	mod	just	0	0.3	
# ::edge	think-01	mode	imperative	0	0.0	
(t / think-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p2 / possible-01
            :ARG1 (s / spend-01
                  :ARG1 (o / or
                        :op1 (f2 / facility
                              :location-of (c / cross-02
                                    :ARG1 (r / river :wiki "Potomac_River"
                                          :name (n2 / name :op1 "Potomac")))
                              :mod (a / another))
                        :op2 (i / improve-01
                              :ARG1 (r2 / road)
                              :ARG1-of (n3 / need-01
                                    :manner (d / desperate)
                                    :location (c2 / country-region :wiki "Northern_Virginia"
                                          :name (n / name :op1 "NOVA")))))
                  :ARG3 (m / money
                        :mod (t2 / this))))
      :mod (j / just))

# ::node	0	say-01	
# ::node	0.0	cause-01	
# ::node	0.0.0	help-01	14-15
# ::node	0.0.0.0	rest	10-11
# ::node	0.0.0.0.0	state	13-14
# ::node	0.0.0.1	pay-01	15-16
# ::node	0.0.0.1.0	road	17-18
# ::node	0.0.0.1.0.0	"Virginia_State_Route_288"	
# ::node	0.0.0.1.0.1	name	17-18
# ::node	0.0.0.1.0.1.0	288	17-18
# ::node	0.0.0.1.1	deal-01	23-24
# ::node	0.0.0.1.1.0	budget	22-23
# ::node	0.0.0.1.1.1	year	20-21
# ::node	0.0.0.1.1.1.0	last	19-20
# ::node	0.0.0.2	add-02	4-5
# ::node	0.0.0.2.0	insult-01	5-6
# ::node	0.0.0.2.1	injure-01	7-8
# ::node	0.0.1	wipe-out-02	25-26
# ::node	0.0.1.0	debt	30-31
# ::node	0.1	person	0-2
# ::node	0.1.0	-	
# ::node	0.1.1	name	0-2
# ::node	0.1.1.0	"Virginia"	0-2
# ::node	0.1.1.1	"Centrist"	0-2
# ::root	0	say-01
# ::edge	add-02	ARG1	insult-01	0.0.0.2	0.0.0.2.0	
# ::edge	add-02	ARG2	injure-01	0.0.0.2	0.0.0.2.1	
# ::edge	cause-01	ARG0	help-01	0.0	0.0.0	
# ::edge	cause-01	ARG1	wipe-out-02	0.0	0.0.1	
# ::edge	deal-01	ARG2	budget	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	deal-01	time	year	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	help-01	ARG0	rest	0.0.0	0.0.0.0	
# ::edge	help-01	ARG0-of	add-02	0.0.0	0.0.0.2	
# ::edge	help-01	ARG1	pay-01	0.0.0	0.0.0.1	
# ::edge	name	op1	"Virginia"	0.1.1	0.1.1.0	
# ::edge	name	op1	288	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	name	op2	"Centrist"	0.1.1	0.1.1.1	
# ::edge	pay-01	ARG0	rest	0.0.0.1	0.0.0.0	
# ::edge	pay-01	ARG3	road	0.0.0.1	0.0.0.1.0	
# ::edge	pay-01	time	deal-01	0.0.0.1	0.0.0.1.1	
# ::edge	person	name	name	0.1	0.1.1	
# ::edge	person	wiki	-	0.1	0.1.0	
# ::edge	rest	part-of	state	0.0.0.0	0.0.0.0.0	
# ::edge	road	name	name	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	say-01	ARG0	insult-01	0	0.0.0.2.0	
# ::edge	say-01	ARG1	cause-01	0	0.0	
# ::edge	say-01	ARG2	person	0	0.1	
# ::edge	wipe-out-02	ARG0	pay-01	0.0.1	0.0.0.1	
# ::edge	wipe-out-02	ARG1	debt	0.0.1	0.0.1.0	
# ::edge	year	mod	last	0.0.0.1.1.1	0.0.0.1.1.1.0	
(s2 / say-01
      :ARG0 i
      :ARG1 (c / cause-01
            :ARG0 (h / help-01
                  :ARG0 (r / rest
                        :part-of (s / state))
                  :ARG1 (p2 / pay-01
                        :ARG0 r
                        :ARG3 (r2 / road :wiki "Virginia_State_Route_288"
                              :name (x / name :op1 288))
                        :time (d / deal-01
                              :ARG2 (b / budget)
                              :time (y / year
                                    :mod (l / last))))
                  :ARG0-of (a / add-02
                        :ARG1 (i / insult-01)
                        :ARG2 (i2 / injure-01)))
            :ARG1 (w / wipe-out-02
                  :ARG0 p2
                  :ARG1 (d2 / debt)))
      :ARG2 (p / person :wiki -
            :name (v / name :op1 "Virginia" :op2 "Centrist")))

# ::node	0	nice-01	3-4
# ::node	0.0	oblige-01	7-8
# ::node	0.0.0	y'all	5-6
# ::node	0.0.1	we	
# ::node	0.1	very	2-3
# ::root	0	nice-01
# ::edge	nice-01	ARG1	oblige-01	0	0.0	
# ::edge	nice-01	degree	very	0	0.1	
# ::edge	oblige-01	ARG0	y'all	0.0	0.0.0	
# ::edge	oblige-01	ARG1	we	0.0	0.0.1	
(n / nice-01
  :ARG1 (o / oblige-01
          :ARG0 (x / y'all)
          :ARG1 (w / we))
  :degree (v / very))

# ::node	0	congest-01	2-3
# ::node	0.0	traffic	1-2
# ::node	0.1	place	5-6
# ::node	0.1.0	old	4-5
# ::node	0.2	interrogative	
# ::node	0.3	additional	0-1
# ::root	0	congest-01
# ::edge	congest-01	ARG2	traffic	0	0.0	
# ::edge	congest-01	location	place	0	0.1	
# ::edge	congest-01	mod	additional	0	0.3	
# ::edge	congest-01	mode	interrogative	0	0.2	
# ::edge	place	mod	old	0.1	0.1.0	
(c / congest-01
  :ARG2 (t / traffic)
  :location (p / place
              :mod (o / old))
  :mode interrogative
  :mod (a2 / additional))

# ::node	0	alternative	18-19
# ::node	0.0	amr-unknown	
# ::node	0.1	enough	2-3
# ::node	0.1.0	they	
# ::node	0.1.1	create-01	6-7
# ::node	0.1.1.0	congest-01	9-10
# ::node	0.1.1.0.0	traffic	8-9
# ::node	0.1.1.0.1	place	12-13
# ::node	0.1.1.0.1.0	new	7-8
# ::node	0.1.1.0.2	new	11-12
# ::root	0	alternative
# ::edge	alternative	condition	enough	0	0.1	
# ::edge	alternative	domain	amr-unknown	0	0.0	
# ::edge	congest-01	ARG0	they	0.1.1.0	0.1.0	
# ::edge	congest-01	ARG2	traffic	0.1.1.0	0.1.1.0.0	
# ::edge	congest-01	location	place	0.1.1.0	0.1.1.0.1	
# ::edge	congest-01	mod	new	0.1.1.0	0.1.1.0.2	
# ::edge	create-01	ARG1	congest-01	0.1.1	0.1.1.0	
# ::edge	enough	ARG0-of	create-01	0.1	0.1.1	
# ::edge	enough	quant-of	they	0.1	0.1.0	
# ::edge	place	mod	new	0.1.1.0.1	0.1.1.0.1.0	
(a / alternative
      :domain (a2 / amr-unknown)
      :condition (e / enough
            :quant-of (t3 / they)
            :ARG0-of (c / create-01
                  :ARG1 (c2 / congest-01
                        :ARG0 t3
                        :ARG2 (t2 / traffic)
                        :location (p / place
                              :mod (n2 / new))
                        :mod (n / new)))))

# ::node	0	think-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	recommend-01	
# ::node	0.1.0	-	
# ::node	0.1.1	blame-01	6-7
# ::node	0.1.1.0	you	4-5
# ::node	0.1.1.1	road	7-8
# ::node	0.1.1.1.0	"Virginia_State_Route_288"	
# ::node	0.1.1.1.1	name	7-8
# ::node	0.1.1.1.1.0	288	7-8
# ::node	0.1.1.2	create-01	9-10
# ::node	0.1.1.2.0	person	
# ::node	0.1.1.2.0.0	that	
# ::node	0.1.2	you	
# ::root	0	think-01
# ::edge	blame-01	ARG0	you	0.1.1	0.1.1.0	
# ::edge	blame-01	ARG1	road	0.1.1	0.1.1.1	
# ::edge	blame-01	ARG2	create-01	0.1.1	0.1.1.2	
# ::edge	create-01	ARG1	person	0.1.1.2	0.1.1.2.0	
# ::edge	name	op1	288	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	person	mod	that	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	recommend-01	ARG1	blame-01	0.1	0.1.1	
# ::edge	recommend-01	ARG2	you	0.1	0.1.2	
# ::edge	recommend-01	polarity	-	0.1	0.1.0	
# ::edge	road	name	name	0.1.1.1	0.1.1.1.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.1.1.1	0.1.1.1.0	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	recommend-01	0	0.1	
(t / think-01
      :ARG0 (i / i)
      :ARG1 (r / recommend-01 :polarity -
            :ARG1 (b / blame-01
                  :ARG0 (y / you)
                  :ARG1 (r2 / road :wiki "Virginia_State_Route_288"
                        :name (x / name :op1 288))
                  :ARG2 (c / create-01
                        :ARG1 (p / person
                              :mod (t2 / that))))
            :ARG2 (y2 / you)))

# ::node	0	think-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	possible-01	3-4
# ::node	0.1.0	spend-01	5-6
# ::node	0.1.0.0	we	2-3
# ::node	0.1.0.1	elsewhere	11-12
# ::node	0.1.0.2	monetary-quantity	
# ::node	0.1.0.2.0	dollar	
# ::node	0.1.0.2.1	400000000	
# ::node	0.1.0.3	good	10-11
# ::node	0.1.0.3.0	more	
# ::root	0	think-01
# ::edge	good	degree	more	0.1.0.3	0.1.0.3.0	
# ::edge	monetary-quantity	quant	400000000	0.1.0.2	0.1.0.2.1	
# ::edge	monetary-quantity	unit	dollar	0.1.0.2	0.1.0.2.0	
# ::edge	possible-01	ARG1	spend-01	0.1	0.1.0	
# ::edge	spend-01	ARG0	we	0.1.0	0.1.0.0	
# ::edge	spend-01	ARG1	elsewhere	0.1.0	0.1.0.1	
# ::edge	spend-01	ARG3	monetary-quantity	0.1.0	0.1.0.2	
# ::edge	spend-01	manner	good	0.1.0	0.1.0.3	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	possible-01	0	0.1	
(t / think-01
  :ARG0 (i / i)
  :ARG1 (p / possible-01
          :ARG1 (s / spend-01
                    :ARG0 (w / we)
                    :ARG1 (e / elsewhere)
                    :ARG3 (m / monetary-quantity
                            :unit (d / dollar)
                            :quant 400000000)
                    :manner (g / good
                              :degree (m2 / more)))))

# ::node	0	thank-01	0-1
# ::node	0.0	i	
# ::node	0.1	you	
# ::node	0.2	nothing	2-3
# ::root	0	thank-01
# ::edge	thank-01	ARG0	i	0	0.0	
# ::edge	thank-01	ARG1	you	0	0.1	
# ::edge	thank-01	ARG2	nothing	0	0.2	
(t / thank-01
  :ARG0 (i / i)
  :ARG1 (y / you)
  :ARG2 (n / nothing))

# ::node	0	say-01	
# ::node	0.0	brainiac	2-3
# ::node	0.0.0	think-01	4-5
# ::node	0.0.0.0	idea	11-12
# ::node	0.0.0.0.0	great	10-11
# ::node	0.0.0.0.0.0	such	8-9
# ::node	0.0.0.0.1	road	5-7
# ::node	0.0.0.0.1.0	"Virginia_State_Route_288"	
# ::node	0.0.0.0.1.1	name	5-7
# ::node	0.0.0.0.1.1.0	"Route"	5-7
# ::node	0.0.0.0.1.1.1	288	5-7
# ::root	0	say-01
# ::edge	brainiac	ARG0-of	think-01	0.0	0.0.0	
# ::edge	great	mod	such	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	idea	domain	road	0.0.0.0	0.0.0.0.1	
# ::edge	idea	mod	great	0.0.0.0	0.0.0.0.0	
# ::edge	name	op1	"Route"	0.0.0.0.1.1	0.0.0.0.1.1.0	
# ::edge	name	op2	288	0.0.0.0.1.1	0.0.0.0.1.1.1	
# ::edge	road	name	name	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	say-01	ARG0	idea	0	0.0.0.0	
# ::edge	say-01	ARG2	brainiac	0	0.0	
# ::edge	think-01	ARG1	idea	0.0.0	0.0.0.0	
(s / say-01
      :ARG0 i
      :ARG2 (b / brainiac
            :ARG0-of (t / think-01
                  :ARG1 (i / idea
                        :mod (g / great
                              :mod (s2 / such))
                        :domain (r2 / road :wiki "Virginia_State_Route_288"
                              :name (r / name :op1 "Route" :op2 288))))))

# ::node	0	possible-01	8-9
# ::node	0.0	see-01	10-11
# ::node	0.0.0	we	7-8
# ::node	0.0.1	zoom-01	14-15
# ::node	0.0.1.0	liability	13-14
# ::node	0.0.1.0.0	fund-01	12-13
# ::node	0.0.1.0.0.0	-	12-13
# ::node	0.0.1.1	past	16-17
# ::node	0.0.1.1.0	monetary-quantity	
# ::node	0.0.1.1.0.0	400000000	
# ::node	0.0.1.1.0.1	dollar	
# ::node	0.0.1.1.0.2	take-10	23-24
# ::node	0.0.1.1.0.2.0	build-01	25-26
# ::node	0.0.1.1.0.2.0.0	highway	28-29
# ::node	0.0.1.1.0.2.0.0.0	original	18-19
# ::node	0.0.1.1.0.3	original	27-28
# ::node	0.0.1.1.1	well	15-16
# ::node	0.0.2	before	0-1
# ::node	0.0.2.0	end-01	2-3
# ::node	0.0.2.0.0	decade	5-6
# ::node	0.1	well	9-10
# ::root	0	possible-01
# ::edge	before	op1	end-01	0.0.2	0.0.2.0	
# ::edge	build-01	ARG1	highway	0.0.1.1.0.2.0	0.0.1.1.0.2.0.0	
# ::edge	end-01	ARG1	decade	0.0.2.0	0.0.2.0.0	
# ::edge	fund-01	polarity	-	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	highway	mod	original	0.0.1.1.0.2.0.0	0.0.1.1.0.2.0.0.0	
# ::edge	liability	ARG1-of	fund-01	0.0.1.0	0.0.1.0.0	
# ::edge	monetary-quantity	ARG1-of	take-10	0.0.1.1.0	0.0.1.1.0.2	
# ::edge	monetary-quantity	mod	original	0.0.1.1.0	0.0.1.1.0.3	
# ::edge	monetary-quantity	quant	400000000	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	monetary-quantity	unit	dollar	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	past	mod	well	0.0.1.1	0.0.1.1.1	
# ::edge	past	op1	monetary-quantity	0.0.1.1	0.0.1.1.0	
# ::edge	possible-01	ARG1	see-01	0	0.0	
# ::edge	possible-01	degree	well	0	0.1	
# ::edge	see-01	ARG0	we	0.0	0.0.0	
# ::edge	see-01	ARG1	zoom-01	0.0	0.0.1	
# ::edge	see-01	time	before	0.0	0.0.2	
# ::edge	take-10	ARG0	build-01	0.0.1.1.0.2	0.0.1.1.0.2.0	
# ::edge	zoom-01	ARG1	liability	0.0.1	0.0.1.0	
# ::edge	zoom-01	ARG4	past	0.0.1	0.0.1.1	
(p / possible-01
      :ARG1 (s / see-01
            :ARG0 (w / we)
            :ARG1 (z / zoom-01
                  :ARG1 (l / liability
                        :ARG1-of (f / fund-01 :polarity -))
                  :ARG4 (p2 / past
                        :op1 (m / monetary-quantity :quant 400000000
                              :unit (d / dollar)
                              :ARG1-of (t / take-10
                                    :ARG0 (b2 / build-01
                                          :ARG1 (h / highway
                                                :mod (o / original))))
                              :mod (o2 / original))
                        :mod (w2 / well)))
            :time (b / before
                  :op1 (e / end-01
                        :ARG1 (d2 / decade))))
      :degree (w3 / well))

# ::node	0	soar-01	28-29
# ::node	0.0	need-01	22-23
# ::node	0.0.0	improve-01	26-27
# ::node	0.0.0.0	road	
# ::node	0.0.0.1	new	24-25
# ::node	0.1	after	0-1
# ::node	0.1.0	and	9-10
# ::node	0.1.0.0	develop-02	8-9
# ::node	0.1.0.0.0	subdivision	7-8
# ::node	0.1.0.0.1	scatter-01	6-7
# ::node	0.1.0.1	approve-01	10-11
# ::node	0.1.0.1.0	project	15-16
# ::node	0.1.0.1.0.0	commerce	14-15
# ::node	0.1.0.1.0.0.0	mega	12-13
# ::node	0.1.0.1.0.1	intersect-01	19-20
# ::node	0.1.0.1.0.1.0	road	25-26
# ::node	0.1.0.1.0.1.0.0	"Virginia_State_Route_288"	
# ::node	0.1.0.1.0.1.0.1	name	18-19
# ::node	0.1.0.1.0.1.0.1.0	288	18-19
# ::node	0.1.0.1.0.1.1	road	
# ::node	0.1.0.1.0.1.1.0	major-02	17-18
# ::node	0.1.0.2	few	2-3
# ::node	0.1.0.2.0	temporal-quantity	4-5
# ::node	0.1.0.2.0.0	1	
# ::node	0.1.0.2.0.1	year	4-5
# ::node	0.1.0.2.1	more	3-4
# ::root	0	soar-01
# ::edge	after	op1	and	0.1	0.1.0	
# ::edge	and	duration	few	0.1.0	0.1.0.2	
# ::edge	and	op1	develop-02	0.1.0	0.1.0.0	
# ::edge	and	op2	approve-01	0.1.0	0.1.0.1	
# ::edge	approve-01	ARG1	project	0.1.0.1	0.1.0.1.0	
# ::edge	commerce	mod	mega	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	develop-02	ARG1	subdivision	0.1.0.0	0.1.0.0.0	
# ::edge	develop-02	ARG1-of	scatter-01	0.1.0.0	0.1.0.0.1	
# ::edge	few	mod	more	0.1.0.2	0.1.0.2.1	
# ::edge	few	op1	temporal-quantity	0.1.0.2	0.1.0.2.0	
# ::edge	improve-01	ARG1	road	0.0.0	0.0.0.0	
# ::edge	improve-01	mod	new	0.0.0	0.0.0.1	
# ::edge	intersect-01	ARG0	road	0.1.0.1.0.1	0.1.0.1.0.1.0	
# ::edge	intersect-01	ARG1	road	0.1.0.1.0.1	0.1.0.1.0.1.1	
# ::edge	name	op1	288	0.1.0.1.0.1.0.1	0.1.0.1.0.1.0.1.0	
# ::edge	need-01	ARG1	improve-01	0.0	0.0.0	
# ::edge	project	location	intersect-01	0.1.0.1.0	0.1.0.1.0.1	
# ::edge	project	mod	commerce	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	road	ARG1-of	major-02	0.1.0.1.0.1.1	0.1.0.1.0.1.1.0	
# ::edge	road	name	name	0.1.0.1.0.1.0	0.1.0.1.0.1.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.1.0.1.0.1.0	0.1.0.1.0.1.0.0	
# ::edge	soar-01	ARG1	need-01	0	0.0	
# ::edge	soar-01	time	after	0	0.1	
# ::edge	temporal-quantity	quant	1	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	temporal-quantity	unit	year	0.1.0.2.0	0.1.0.2.0.1	
(s / soar-01
      :ARG1 (n / need-01
            :ARG1 (i / improve-01
                  :ARG1 (r / road)
                  :mod (n2 / new)))
      :time (a / after
            :op1 (a2 / and
                  :op1 (d / develop-02
                        :ARG1 (s2 / subdivision)
                        :ARG1-of (s3 / scatter-01))
                  :op2 (a3 / approve-01
                        :ARG1 (p / project
                              :mod (c / commerce
                                    :mod (m2 / mega))
                              :location (i2 / intersect-01
                                    :ARG0 (r2 / road :wiki "Virginia_State_Route_288"
                                          :name (x / name :op1 288))
                                    :ARG1 (r3 / road
                                          :ARG1-of (m3 / major-02)))))
                  :duration (f3 / few
                        :op1 (t / temporal-quantity :quant 1
                              :unit (y / year))
                        :mod (m / more)))))

# ::node	0	thing	
# ::node	0.0	predict-01	
# ::node	0.1	another	2-3
# ::root	0	thing
# ::edge	thing	ARG1-of	predict-01	0	0.0	
# ::edge	thing	mod	another	0	0.1	
(t / thing
  :ARG1-of (p / predict-01)
  :mod (a / another))

# ::node	0	think-01	19-20
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	liable-01	22-23
# ::node	0.2.0	create-01	25-26
# ::node	0.2.0.0	exit	
# ::node	0.2.0.0.0	all	27-28
# ::node	0.3	cause-01	0-1
# ::node	0.3.0	create-01	5-6
# ::node	0.3.0.0	road	1-3
# ::node	0.3.0.0.0	"Virginia_State_Route_288"	
# ::node	0.3.0.0.1	name	1-3
# ::node	0.3.0.0.1.0	"Route"	1-3
# ::node	0.3.0.0.1.1	288	1-3
# ::node	0.3.0.1	construct-01	12-13
# ::node	0.3.0.1.0	road	10-11
# ::node	0.3.0.1.1	cost-01	
# ::node	0.3.0.1.1.0	monetary-quantity	
# ::node	0.3.0.1.1.0.0	13000000	
# ::node	0.3.0.1.1.0.1	dollar	
# ::node	0.3.0.1.2	exit	30-31
# ::node	0.3.0.1.2.0	1	16-17
# ::node	0.3.0.1.2.1	this	15-16
# ::node	0.3.0.1.2.2	just	14-15
# ::node	0.3.0.2	already	4-5
# ::root	0	think-01
# ::edge	cause-01	ARG0	create-01	0.3	0.3.0	
# ::edge	construct-01	ARG1	road	0.3.0.1	0.3.0.1.0	
# ::edge	construct-01	ARG1-of	cost-01	0.3.0.1	0.3.0.1.1	
# ::edge	construct-01	location	exit	0.3.0.1	0.3.0.1.2	
# ::edge	cost-01	ARG2	monetary-quantity	0.3.0.1.1	0.3.0.1.1.0	
# ::edge	create-01	ARG0	road	0.2.0	0.3.0.0	
# ::edge	create-01	ARG0	road	0.3.0	0.3.0.0	
# ::edge	create-01	ARG1	construct-01	0.3.0	0.3.0.1	
# ::edge	create-01	ARG3	exit	0.2.0	0.2.0.0	
# ::edge	create-01	time	already	0.3.0	0.3.0.2	
# ::edge	exit	mod	all	0.2.0.0	0.2.0.0.0	
# ::edge	exit	mod	just	0.3.0.1.2	0.3.0.1.2.2	
# ::edge	exit	mod	this	0.3.0.1.2	0.3.0.1.2.1	
# ::edge	exit	poss	road	0.2.0.0	0.3.0.0	
# ::edge	exit	quant	1	0.3.0.1.2	0.3.0.1.2.0	
# ::edge	liable-01	ARG1-of	create-01	0.2	0.2.0	
# ::edge	monetary-quantity	quant	13000000	0.3.0.1.1.0	0.3.0.1.1.0.0	
# ::edge	monetary-quantity	unit	dollar	0.3.0.1.1.0	0.3.0.1.1.0.1	
# ::edge	name	op1	"Route"	0.3.0.0.1	0.3.0.0.1.0	
# ::edge	name	op2	288	0.3.0.0.1	0.3.0.0.1.1	
# ::edge	road	name	name	0.3.0.0	0.3.0.0.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.3.0.0	0.3.0.0.0	
# ::edge	think-01	ARG0	you	0	0.1	
# ::edge	think-01	ARG1	liable-01	0	0.2	
# ::edge	think-01	ARG1-of	cause-01	0	0.3	
# ::edge	think-01	mode	imperative	0	0.0	
(t / think-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / liable-01
            :ARG1-of (c / create-01
                  :ARG0 r2
                  :ARG3 (e / exit
                        :mod (a / all)
                        :poss r2)))
      :ARG1-of (c5 / cause-01
            :ARG0 (c2 / create-01
                  :ARG0 (r2 / road :wiki "Virginia_State_Route_288"
                        :name (r / name :op1 "Route" :op2 288))
                  :ARG1 (c3 / construct-01
                        :ARG1 (r3 / road)
                        :ARG1-of (c4 / cost-01
                              :ARG2 (m / monetary-quantity :quant 13000000
                                    :unit (d / dollar)))
                        :location (e2 / exit :quant 1
                              :mod (t2 / this)
                              :mod (j / just)))
                  :time (a2 / already))))

# ::node	0	need-01	26-27
# ::node	0.0	support-01	29-30
# ::node	0.0.0	business	30-31
# ::node	0.1	overwhelm-01	25-26
# ::node	0.2	and	16-17
# ::node	0.2.0	drive-01	8-9
# ::node	0.2.0.0	date-entity	
# ::node	0.2.0.0.0	sunday	7-8
# ::node	0.2.1	trip-03	11-12
# ::node	0.2.1.0	location	
# ::node	0.2.1.0.0	person	
# ::node	0.2.1.0.0.0	have-rel-role-91	13-14
# ::node	0.2.1.0.0.0.0	grandmother	13-14
# ::node	0.2.2	game	19-20
# ::node	0.2.2.0	soccer	18-19
# ::node	0.2.3	of-course	
# ::root	0	need-01
# ::edge	and	mod	of-course	0.2	0.2.3	
# ::edge	and	op1	drive-01	0.2	0.2.0	
# ::edge	and	op2	trip-03	0.2	0.2.1	
# ::edge	and	op3	game	0.2	0.2.2	
# ::edge	date-entity	weekday	sunday	0.2.0.0	0.2.0.0.0	
# ::edge	drive-01	time	date-entity	0.2.0	0.2.0.0	
# ::edge	game	mod	soccer	0.2.2	0.2.2.0	
# ::edge	have-rel-role-91	ARG2	grandmother	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	location	poss	person	0.2.1.0	0.2.1.0.0	
# ::edge	need-01	ARG0-of	overwhelm-01	0	0.1	
# ::edge	need-01	ARG1	support-01	0	0.0	
# ::edge	need-01	concession	and	0	0.2	
# ::edge	person	ARG0-of	have-rel-role-91	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	support-01	ARG1	business	0.0	0.0.0	
# ::edge	trip-03	ARG1	location	0.2.1	0.2.1.0	
(n / need-01
      :ARG1 (s3 / support-01
            :ARG1 (b / business))
      :ARG0-of (o / overwhelm-01)
      :concession (a / and
            :op1 (d / drive-01
                  :time (d2 / date-entity
                        :weekday (s / sunday)))
            :op2 (t / trip-03
                  :ARG1 (l / location
                        :poss (p / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG2 (g / grandmother)))))
            :op3 (g2 / game
                  :mod (s2 / soccer))
            :mod (o2 / of-course)))

# ::node	0	wonder-02	19-20
# ::node	0.0	-	18-19
# ::node	0.1	suffer-01	21-22
# ::node	0.1.0	we	20-21
# ::node	0.1.1	problem	23-24
# ::node	0.1.1.0	congest-01	22-23
# ::node	0.2	cause-01	
# ::node	0.2.0	match-01	6-7
# ::node	0.2.0.0	-	
# ::node	0.2.0.1	thing	3-4
# ::node	0.2.0.1.0	expend-01	3-4
# ::node	0.2.0.1.0.0	road	2-3
# ::node	0.2.0.2	thing	8-9
# ::node	0.2.0.2.0	increase-01	8-9
# ::node	0.2.0.2.0.0	or	11-12
# ::node	0.2.0.2.0.0.0	business	10-11
# ::node	0.2.0.2.0.0.1	product	14-15
# ::node	0.2.0.2.0.0.1.0	domestic	13-14
# ::node	0.2.0.2.0.0.1.1	state	12-13
# ::root	0	wonder-02
# ::edge	cause-01	ARG0	match-01	0.2	0.2.0	
# ::edge	expend-01	ARG0	we	0.2.0.1.0	0.1.0	
# ::edge	expend-01	ARG2	road	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	increase-01	ARG1	or	0.2.0.2.0	0.2.0.2.0.0	
# ::edge	match-01	ARG1	thing	0.2.0	0.2.0.1	
# ::edge	match-01	ARG2	thing	0.2.0	0.2.0.2	
# ::edge	match-01	polarity	-	0.2.0	0.2.0.0	
# ::edge	or	op1	business	0.2.0.2.0.0	0.2.0.2.0.0.0	
# ::edge	or	op2	product	0.2.0.2.0.0	0.2.0.2.0.0.1	
# ::edge	problem	topic	congest-01	0.1.1	0.1.1.0	
# ::edge	product	mod	domestic	0.2.0.2.0.0.1	0.2.0.2.0.0.1.0	
# ::edge	product	mod	state	0.2.0.2.0.0.1	0.2.0.2.0.0.1.1	
# ::edge	suffer-01	ARG0	we	0.1	0.1.0	
# ::edge	suffer-01	ARG1	problem	0.1	0.1.1	
# ::edge	thing	ARG1-of	expend-01	0.2.0.1	0.2.0.1.0	
# ::edge	thing	ARG2-of	increase-01	0.2.0.2	0.2.0.2.0	
# ::edge	wonder-02	ARG1	suffer-01	0	0.1	
# ::edge	wonder-02	ARG1-of	cause-01	0	0.2	
# ::edge	wonder-02	polarity	-	0	0.0	
(w2 / wonder-02 :polarity -
      :ARG1 (s / suffer-01
            :ARG0 (w / we)
            :ARG1 (p / problem
                  :topic (c / congest-01)))
      :ARG1-of (c2 / cause-01
            :ARG0 (m / match-01 :polarity -
                  :ARG1 (t / thing
                        :ARG1-of (e / expend-01
                              :ARG0 w
                              :ARG2 (r / road)))
                  :ARG2 (t2 / thing
                        :ARG2-of (i / increase-01
                              :ARG1 (o2 / or
                                    :op1 (b2 / business)
                                    :op2 (p2 / product
                                          :mod (d / domestic)
                                          :mod (s2 / state))))))))

# ::node	0	wrong-04	4-5
# ::node	0.0	y'all	
# ::node	0.1	dead	3-4
# ::root	0	wrong-04
# ::edge	wrong-04	ARG1	y'all	0	0.0	
# ::edge	wrong-04	degree	dead	0	0.1	
(w / wrong-04
  :ARG1 (y / y'all)
  :degree (d / dead))

# ::node	0	state-01	5-6
# ::node	0.0	person	3-5
# ::node	0.0.0	"Walter_Stosch"	
# ::node	0.0.1	name	3-5
# ::node	0.0.1.0	"Walter"	3-5
# ::node	0.0.1.1	"Stoch"	3-5
# ::node	0.0.2	less	1-2
# ::node	0.0.2.0	-	
# ::node	0.1	intend-01	10-11
# ::node	0.1.0	pay-01	13-14
# ::node	0.1.0.0	money	8-9
# ::node	0.1.0.0.0	develop-02	16-17
# ::node	0.1.0.0.0.0	economy	15-16
# ::node	0.1.0.1	road	7-8
# ::node	0.1.0.1.0	"Virginia_State_Route_288"	
# ::node	0.1.0.1.1	name	7-8
# ::node	0.1.0.1.1.0	288	7-8
# ::root	0	state-01
# ::edge	develop-02	ARG1	economy	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	intend-01	ARG1	pay-01	0.1	0.1.0	
# ::edge	less	polarity	-	0.0.2	0.0.2.0	
# ::edge	money	purpose	develop-02	0.1.0.0	0.1.0.0.0	
# ::edge	name	op1	"Walter"	0.0.1	0.0.1.0	
# ::edge	name	op1	288	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	name	op2	"Stoch"	0.0.1	0.0.1.1	
# ::edge	pay-01	ARG1	money	0.1.0	0.1.0.0	
# ::edge	pay-01	ARG3	road	0.1.0	0.1.0.1	
# ::edge	person	mod	less	0.0	0.0.2	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	"Walter_Stosch"	0.0	0.0.0	
# ::edge	road	name	name	0.1.0.1	0.1.0.1.1	
# ::edge	road	wiki	"Virginia_State_Route_288"	0.1.0.1	0.1.0.1.0	
# ::edge	state-01	ARG0	person	0	0.0	
# ::edge	state-01	ARG1	intend-01	0	0.1	
(s / state-01
      :ARG0 (p / person :wiki "Walter_Stosch"
            :name (w / name :op1 "Walter" :op2 "Stoch")
            :mod (l / less :polarity -))
      :ARG1 (i / intend-01
            :ARG1 (p2 / pay-01
                  :ARG1 (m2 / money
                        :purpose (d / develop-02
                              :ARG1 (e / economy)))
                  :ARG3 (r / road :wiki "Virginia_State_Route_288"
                        :name (x / name :op1 288)))))

# ::node	0	have-purpose-91	
# ::node	0.0	thing	8-9
# ::node	0.0.0	expend-01	8-9
# ::node	0.0.0.0	transport-01	5-6
# ::node	0.1	amr-unknown	
# ::root	0	have-purpose-91
# ::edge	expend-01	ARG2	transport-01	0.0.0	0.0.0.0	
# ::edge	have-purpose-91	ARG1	thing	0	0.0	
# ::edge	have-purpose-91	ARG2	amr-unknown	0	0.1	
# ::edge	thing	ARG1-of	expend-01	0.0	0.0.0	
(h / have-purpose-91
      :ARG1 (t / thing
            :ARG1-of (e / expend-01
                  :ARG2 (t2 / transport-01)))
      :ARG2 (a / amr-unknown))

# ::node	0	and	10-11
# ::node	0.0	have-purpose-91	
# ::node	0.0.0	it	3-4
# ::node	0.0.1	benefit-01	6-7
# ::node	0.0.1.0	plan	9-10
# ::node	0.0.1.0.0	business	8-9
# ::node	0.0.1.0.0.0	private-03	7-8
# ::node	0.1	have-purpose-91	
# ::node	0.1.0	-	12-12
# ::node	0.1.1	serve-01	13-14
# ::node	0.1.1.0	interest	16-17
# ::node	0.1.1.0.0	public	15-16
# ::node	0.2	state	1-2
# ::node	0.2.0	"Virginia"	
# ::node	0.2.1	name	1-2
# ::node	0.2.1.0	"Virginia"	1-2
# ::root	0	and
# ::edge	and	location	state	0	0.2	
# ::edge	and	op1	have-purpose-91	0	0.0	
# ::edge	and	op2	have-purpose-91	0	0.1	
# ::edge	benefit-01	ARG1	plan	0.0.1	0.0.1.0	
# ::edge	business	ARG1-of	private-03	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	have-purpose-91	ARG1	it	0.0	0.0.0	
# ::edge	have-purpose-91	ARG1	it	0.1	0.0.0	
# ::edge	have-purpose-91	ARG2	benefit-01	0.0	0.0.1	
# ::edge	have-purpose-91	ARG2	serve-01	0.1	0.1.1	
# ::edge	have-purpose-91	polarity	-	0.1	0.1.0	
# ::edge	interest	poss	public	0.1.1.0	0.1.1.0.0	
# ::edge	name	op1	"Virginia"	0.2.1	0.2.1.0	
# ::edge	plan	mod	business	0.0.1.0	0.0.1.0.0	
# ::edge	serve-01	ARG1	interest	0.1.1	0.1.1.0	
# ::edge	state	name	name	0.2	0.2.1	
# ::edge	state	wiki	"Virginia"	0.2	0.2.0	
(a / and
      :op1 (h / have-purpose-91
            :ARG1 (i / it)
            :ARG2 (b / benefit-01
                  :ARG1 (p / plan
                        :mod (b2 / business
                              :ARG1-of (p2 / private-03)))))
      :op2 (h2 / have-purpose-91 :polarity -
            :ARG1 i
            :ARG2 (s2 / serve-01
                  :ARG1 (i2 / interest
                        :poss (p3 / public))))
      :location (s / state :wiki "Virginia" :name (v / name :op1 "Virginia")))

# ::node	0	stick-01	7-8
# ::node	0.0	you	5-6
# ::node	0.1	traffic	9-10
# ::node	0.2	amr-unknown	
# ::node	0.2.0	last	3-4
# ::node	0.2.1	or	18-19
# ::node	0.2.1.0	be-destined-for-91	
# ::node	0.2.1.0.0	business	23-24
# ::node	0.2.1.0.0.0	sort	21-22
# ::node	0.2.1.0.0.0.0	some	20-21
# ::node	0.2.1.1	be-from-91	
# ::node	0.2.1.2	-	
# ::root	0	stick-01
# ::edge	amr-unknown	mod	last	0.2	0.2.0	
# ::edge	amr-unknown	time-of	or	0.2	0.2.1	
# ::edge	be-destined-for-91	ARG1	you	0.2.1.0	0.0	
# ::edge	be-destined-for-91	ARG2	business	0.2.1.0	0.2.1.0.0	
# ::edge	be-from-91	ARG1	you	0.2.1.1	0.0	
# ::edge	be-from-91	ARG2	business	0.2.1.1	0.2.1.0.0	
# ::edge	business	mod	sort	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	or	op1	be-destined-for-91	0.2.1	0.2.1.0	
# ::edge	or	op2	be-from-91	0.2.1	0.2.1.1	
# ::edge	or	polarity	-	0.2.1	0.2.1.2	
# ::edge	sort	mod	some	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	stick-01	ARG1	you	0	0.0	
# ::edge	stick-01	ARG2	traffic	0	0.1	
# ::edge	stick-01	time	amr-unknown	0	0.2	
(s / stick-01
  :ARG1 (y / you)
  :ARG2 (t / traffic)
  :time (a / amr-unknown
          :mod (l2 / last)
          :time-of (o / or
                     :op1 (b2 / be-destined-for-91
                            :ARG1 y
                            :ARG2 (b / business
                                    :mod (s2 / sort
                                           :mod (s3 / some))))
                     :op2 (b3 / be-from-91
                            :ARG1 y
                            :ARG2 b)
                     :polarity -)))

# ::node	0	seem-01	1-2
# ::node	0.0	have-purpose-91	
# ::node	0.0.0	road	9-10
# ::node	0.0.1	facilitate-01	12-13
# ::node	0.0.1.0	interest-01	15-16
# ::node	0.0.1.0.0	public	14-15
# ::node	0.0.1.0.1	and	19-20
# ::node	0.0.1.0.1.0	get-05	
# ::node	0.0.1.0.1.0.0	business	22-23
# ::node	0.0.1.0.1.0.0.0	private-03	21-22
# ::node	0.0.1.0.1.1	get-05	17-18
# ::node	0.0.2	whole	6-7
# ::node	0.1	i	
# ::root	0	seem-01
# ::edge	and	op1	get-05	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	and	op2	get-05	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	business	ARG1-of	private-03	0.0.1.0.1.0.0	0.0.1.0.1.0.0.0	
# ::edge	facilitate-01	ARG0	road	0.0.1	0.0.0	
# ::edge	facilitate-01	ARG1	interest-01	0.0.1	0.0.1.0	
# ::edge	get-05	ARG0	public	0.0.1.0.1.0	0.0.1.0.0	
# ::edge	get-05	ARG0	public	0.0.1.0.1.1	0.0.1.0.0	
# ::edge	get-05	ARG2	business	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	get-05	source	business	0.0.1.0.1.1	0.0.1.0.1.0.0	
# ::edge	have-purpose-91	ARG1	road	0.0	0.0.0	
# ::edge	have-purpose-91	ARG2	facilitate-01	0.0	0.0.1	
# ::edge	have-purpose-91	mod	whole	0.0	0.0.2	
# ::edge	interest-01	ARG1	public	0.0.1.0	0.0.1.0.0	
# ::edge	interest-01	ARG2	and	0.0.1.0	0.0.1.0.1	
# ::edge	seem-01	ARG1	have-purpose-91	0	0.0	
# ::edge	seem-01	ARG2	i	0	0.1	
(s / seem-01
      :ARG1 (h / have-purpose-91
            :ARG1 (r / road)
            :ARG2 (f / facilitate-01
                  :ARG0 r
                  :ARG1 (i3 / interest-01
                        :ARG1 (p / public)
                        :ARG2 (a / and
                              :op1 (g / get-05
                                    :ARG0 p
                                    :ARG2 (b / business
                                          :ARG1-of (p2 / private-03)))
                              :op2 (g2 / get-05
                                    :ARG0 p
                                    :source b))))
            :mod (w / whole))
      :ARG2 (i / i))

# ::node	0	come-on-25	0-1
# ::node	0.0	folk	2-3
# ::node	0.1	imperative	
# ::root	0	come-on-25
# ::edge	come-on-25	ARG1	folk	0	0.0	
# ::edge	come-on-25	mode	imperative	0	0.1	
(c / come-on-25
  :ARG1 (f / folk)
  :mode imperative)

# ::node	0	say-01	
# ::node	0.0	i	2-3
# ::node	0.1	understand-01	5-6
# ::node	0.1.0	-	5-6
# ::node	0.1.1	point	7-8
# ::node	0.2	person	0-1
# ::node	0.2.0	-	
# ::node	0.2.1	name	0-1
# ::node	0.2.1.0	"TMT"	0-1
# ::root	0	say-01
# ::edge	name	op1	"TMT"	0.2.1	0.2.1.0	
# ::edge	person	name	name	0.2	0.2.1	
# ::edge	person	wiki	-	0.2	0.2.0	
# ::edge	point	poss	person	0.1.1	0.2	
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	understand-01	0	0.1	
# ::edge	say-01	ARG2	person	0	0.2	
# ::edge	understand-01	ARG0	i	0.1	0.0	
# ::edge	understand-01	ARG1	point	0.1	0.1.1	
# ::edge	understand-01	polarity	-	0.1	0.1.0	
(s / say-01
      :ARG0 (i / i)
      :ARG1 (u / understand-01 :polarity -
            :ARG0 i
            :ARG1 (p2 / point
                  :poss p))
      :ARG2 (p / person :wiki -
            :name (t / name :op1 "TMT")))

# ::node	0	and	4-5
# ::node	0.0	pour-01	12-13
# ::node	0.0.0	and	
# ::node	0.0.0.0	person	3-4
# ::node	0.0.0.0.0	"John_Chichester"	
# ::node	0.0.0.0.1	name	3-4
# ::node	0.0.0.0.1.0	"Chichester"	3-4
# ::node	0.0.0.0.2	have-org-role-91	2-3
# ::node	0.0.0.0.2.0	government-organization	2-3
# ::node	0.0.0.0.2.0.0	"Senate_of_Virginia"	
# ::node	0.0.0.0.2.0.1	name	2-3
# ::node	0.0.0.0.2.0.1.0	"Senate"	2-3
# ::node	0.0.0.1	toady	6-7
# ::node	0.0.1	money	14-15
# ::node	0.0.1.0	more	13-14
# ::node	0.0.2	institution	18-19
# ::node	0.0.2.0	this	16-17
# ::node	0.0.2.1	flaw-01	17-18
# ::node	0.0.3	cause-01	
# ::node	0.0.3.0	worsen-01	10-11
# ::node	0.0.3.0.0	this	9-10
# ::root	0	and
# ::edge	and	op1	person	0.0.0	0.0.0.0	
# ::edge	and	op2	pour-01	0	0.0	
# ::edge	and	op2	toady	0.0.0	0.0.0.1	
# ::edge	cause-01	ARG1	worsen-01	0.0.3	0.0.3.0	
# ::edge	government-organization	name	name	0.0.0.0.2.0	0.0.0.0.2.0.1	
# ::edge	government-organization	wiki	"Senate_of_Virginia"	0.0.0.0.2.0	0.0.0.0.2.0.0	
# ::edge	have-org-role-91	ARG1	government-organization	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	institution	ARG1-of	flaw-01	0.0.2	0.0.2.1	
# ::edge	institution	mod	this	0.0.2	0.0.2.0	
# ::edge	money	mod	more	0.0.1	0.0.1.0	
# ::edge	name	op1	"Chichester"	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	name	op1	"Senate"	0.0.0.0.2.0.1	0.0.0.0.2.0.1.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0.0.0	0.0.0.0.2	
# ::edge	person	name	name	0.0.0.0	0.0.0.0.1	
# ::edge	person	wiki	"John_Chichester"	0.0.0.0	0.0.0.0.0	
# ::edge	pour-01	ARG0	and	0.0	0.0.0	
# ::edge	pour-01	ARG0-of	cause-01	0.0	0.0.3	
# ::edge	pour-01	ARG1	money	0.0	0.0.1	
# ::edge	pour-01	ARG3	institution	0.0	0.0.2	
# ::edge	toady	poss	person	0.0.0.1	0.0.0.0	
# ::edge	worsen-01	ARG1	this	0.0.3.0	0.0.3.0.0	
(a / and
      :op2 (p2 / pour-01
            :ARG0 (a2 / and
                  :op1 (p / person :wiki "John_Chichester" :name (n / name :op1 "Chichester")
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (g / government-organization :wiki "Senate_of_Virginia" :name (n2 / name :op1 "Senate"))))
                  :op2 (t / toady
                        :poss p))
            :ARG1 (m2 / money
                  :mod (m3 / more))
            :ARG3 (i / institution
                  :mod (t3 / this)
                  :ARG1-of (f / flaw-01))
            :ARG0-of (c / cause-01
                  :ARG1 (w / worsen-01
                        :ARG1 (t4 / this)))))

# ::node	0	submit-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	situation	7-8
# ::node	0.1.0	this	3-4
# ::node	0.1.1	tolerate-01	12-13
# ::node	0.1.1.0	-	11-11
# ::node	0.1.1.1	recommend-01	9-10
# ::node	0.1.2	disgrace-01	6-7
# ::root	0	submit-01
# ::edge	situation	ARG0-of	disgrace-01	0.1	0.1.2	
# ::edge	situation	ARG1-of	tolerate-01	0.1	0.1.1	
# ::edge	situation	domain	this	0.1	0.1.0	
# ::edge	submit-01	ARG0	i	0	0.0	
# ::edge	submit-01	ARG1	situation	0	0.1	
# ::edge	tolerate-01	ARG1-of	recommend-01	0.1.1	0.1.1.1	
# ::edge	tolerate-01	polarity	-	0.1.1	0.1.1.0	
(s / submit-01
  :ARG0 (i / i)
  :ARG1 (s2 / situation
          :domain (t2 / this)
          :ARG1-of (t / tolerate-01
                     :polarity -
                     :ARG1-of (r / recommend-01))
          :ARG0-of (d2 / disgrace-01)))

# ::node	0	problem	5-6
# ::node	0.0	same-01	3-4
# ::node	0.0.0	it	0-1
# ::node	0.1	old	4-5
# ::root	0	problem
# ::edge	problem	ARG1-of	same-01	0	0.0	
# ::edge	problem	mod	old	0	0.1	
# ::edge	same-01	ARG2	it	0.0	0.0.0	
(p / problem
  :ARG1-of (s / same-01
             :ARG2 (i / it))
  :mod (o / old))

# ::node	0	have-concession-91	
# ::node	0.0	sense-02	4-5
# ::node	0.0.0	-	
# ::node	0.0.1	much	3-4
# ::root	0	have-concession-91
# ::edge	have-concession-91	ARG1	sense-02	0	0.0	
# ::edge	sense-02	degree	much	0.0	0.0.1	
# ::edge	sense-02	polarity	-	0.0	0.0.0	
(h / have-concession-91
      :ARG1 (s / sense-02 :polarity -
            :degree (m2 / much)))

# ::node	0	claim-01	12-13
# ::node	0.0	possible-01	
# ::node	0.0.0	-	
# ::node	0.0.1	pave-02	17-18
# ::node	0.0.1.0	you	1-2
# ::node	0.0.1.1	way	19-20
# ::node	0.0.1.2	out-06	20-21
# ::node	0.0.1.2.0	congest-01	22-23
# ::node	0.1	build-01	2-3
# ::node	0.1.0	place	
# ::node	0.1.0.0	need-01	5-6
# ::node	0.1.0.0.0	acute	8-9
# ::node	0.1.0.0.0.0	already	7-8
# ::root	0	claim-01
# ::edge	acute	time	already	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	build-01	ARG0	you	0.1	0.0.1.0	
# ::edge	build-01	location	place	0.1	0.1.0	
# ::edge	claim-01	ARG1	possible-01	0	0.0	
# ::edge	claim-01	condition	build-01	0	0.1	
# ::edge	need-01	mod	acute	0.1.0.0	0.1.0.0.0	
# ::edge	out-06	ARG2	congest-01	0.0.1.2	0.0.1.2.0	
# ::edge	pave-02	ARG0	you	0.0.1	0.0.1.0	
# ::edge	pave-02	ARG1	way	0.0.1	0.0.1.1	
# ::edge	pave-02	ARG2	out-06	0.0.1	0.0.1.2	
# ::edge	place	location-of	need-01	0.1.0	0.1.0.0	
# ::edge	possible-01	ARG1	pave-02	0.0	0.0.1	
# ::edge	possible-01	polarity	-	0.0	0.0.0	
# ::edge	way	poss	you	0.0.1.1	0.0.1.0	
(c / claim-01
      :ARG1 (p / possible-01 :polarity -
            :ARG1 (p2 / pave-02
                  :ARG0 (y / you)
                  :ARG1 (w / way
                        :poss y)
                  :ARG2 (o / out-06
                        :ARG2 (c2 / congest-01))))
      :condition (b / build-01
            :ARG0 y
            :location (p3 / place
                  :location-of (n / need-01
                        :mod (a / acute
                              :time (a2 / already))))))

# ::node	0	accuse-01	10-11
# ::node	0.0	you	1-2
# ::node	0.1	cause-01	0-1
# ::node	0.1.0	sprawl-01	13-14
# ::node	0.2	get-05	2-3
# ::node	0.2.0	ahead	4-5
# ::node	0.2.0.0	need-01	7-8
# ::root	0	accuse-01
# ::edge	accuse-01	ARG1	you	0	0.0	
# ::edge	accuse-01	ARG2	cause-01	0	0.1	
# ::edge	accuse-01	condition	get-05	0	0.2	
# ::edge	ahead	op1	need-01	0.2.0	0.2.0.0	
# ::edge	cause-01	ARG0	you	0.1	0.0	
# ::edge	cause-01	ARG1	sprawl-01	0.1	0.1.0	
# ::edge	get-05	ARG1	you	0.2	0.0	
# ::edge	get-05	ARG2	ahead	0.2	0.2.0	
(a / accuse-01
  :ARG1 (y / you)
  :ARG2 (c / cause-01
          :ARG0 y
          :ARG1 (s / sprawl-01))
  :condition (g / get-05
               :ARG1 y
               :ARG2 (a2 / ahead
                       :op1 (n2 / need-01))))

# ::node	0	point	4-5
# ::node	0.0	that	0-1
# ::node	0.1	fair	3-4
# ::root	0	point
# ::edge	point	domain	that	0	0.0	
# ::edge	point	mod	fair	0	0.1	
(p / point
  :domain (t / that)
  :mod (f / fair))

# ::node	0	person	0-1
# ::node	0.0	-	
# ::node	0.1	name	0-1
# ::node	0.1.0	"Anonymous"	0-1
# ::root	0	person
# ::edge	name	op1	"Anonymous"	0.1	0.1.0	
# ::edge	person	name	name	0	0.1	
# ::edge	person	wiki	-	0	0.0	
(p / person :wiki -
      :name (a / name :op1 "Anonymous"))

# ::node	0	contrast-01	33-34
# ::node	0.0	hammer-02	4-5
# ::node	0.0.0	situation	3-4
# ::node	0.0.0.0	this	2-3
# ::node	0.0.1	valid-02	7-8
# ::node	0.0.1.0	thing	13-14
# ::node	0.0.1.0.0	report-01	13-14
# ::node	0.0.1.0.0.0	person	
# ::node	0.0.1.0.0.0.0	have-org-role-91	10-11
# ::node	0.0.1.0.0.0.0.0	state	10-11
# ::node	0.0.1.0.0.0.0.1	audit-01	11-12
# ::node	0.0.1.0.1	find-02	14-15
# ::node	0.0.1.0.1.0	fund-01	22-23
# ::node	0.0.1.0.1.0.0	and	18-19
# ::node	0.0.1.0.1.0.0.0	government-organization	17-18
# ::node	0.0.1.0.1.0.0.0.0	"Commonwealth_Transportation_Board"	
# ::node	0.0.1.0.1.0.0.0.1	name	17-18
# ::node	0.0.1.0.1.0.0.0.1.0	"CTB"	17-18
# ::node	0.0.1.0.1.0.0.1	government-organization	19-20
# ::node	0.0.1.0.1.0.0.1.0	"Virginia_Department_of_Transportation"	
# ::node	0.0.1.0.1.0.0.1.1	name	19-20
# ::node	0.0.1.0.1.0.0.1.1.0	"VDOT"	19-20
# ::node	0.0.1.0.1.0.1	project	24-25
# ::node	0.0.1.0.1.0.1.0	transport-01	30-31
# ::node	0.0.1.0.1.0.2	base-02	25-26
# ::node	0.0.1.0.1.0.2.0	person	44-45
# ::node	0.0.1.0.1.0.2.0.0	lobby-01	44-45
# ::node	0.0.1.0.1.0.2.0.0.0	good	41-42
# ::node	0.0.1.0.1.0.2.0.0.0.0	most	41-42
# ::node	0.0.1.0.1.0.2.1	instead-of-91	
# ::node	0.0.1.0.1.0.2.1.0	base-02	36-37
# ::node	0.0.1.0.1.0.2.1.0.0	plan-01	31-32
# ::node	0.0.1.0.1.0.2.1.0.0.0	transport-01	23-24
# ::node	0.0.1.0.1.0.2.1.0.0.0.0	state	29-30
# ::node	0.0.1.0.1.0.2.1.0.0.1	comprehensive	28-29
# ::node	0.0.2	home	5-6
# ::root	0	contrast-01
# ::edge	and	op1	government-organization	0.0.1.0.1.0.0	0.0.1.0.1.0.0.0	
# ::edge	and	op2	government-organization	0.0.1.0.1.0.0	0.0.1.0.1.0.0.1	
# ::edge	audit-01	ARG0-of	person	0.0.1.0.0.0.0.1	0.0.1.0.0.0	
# ::edge	base-02	ARG1	fund-01	0.0.1.0.1.0.2.1.0	0.0.1.0.1.0	
# ::edge	base-02	ARG1-of	instead-of-91	0.0.1.0.1.0.2	0.0.1.0.1.0.2.1	
# ::edge	base-02	ARG2	person	0.0.1.0.1.0.2	0.0.1.0.1.0.2.0	
# ::edge	base-02	ARG2	plan-01	0.0.1.0.1.0.2.1.0	0.0.1.0.1.0.2.1.0.0	
# ::edge	contrast-01	ARG2	hammer-02	0	0.0	
# ::edge	find-02	ARG1	fund-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	fund-01	ARG0	and	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	fund-01	ARG1	project	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	fund-01	ARG1-of	base-02	0.0.1.0.1.0	0.0.1.0.1.0.2	
# ::edge	good	degree	most	0.0.1.0.1.0.2.0.0.0	0.0.1.0.1.0.2.0.0.0.0	
# ::edge	government-organization	name	name	0.0.1.0.1.0.0.0	0.0.1.0.1.0.0.0.1	
# ::edge	government-organization	name	name	0.0.1.0.1.0.0.1	0.0.1.0.1.0.0.1.1	
# ::edge	government-organization	wiki	"Commonwealth_Transportation_Board"	0.0.1.0.1.0.0.0	0.0.1.0.1.0.0.0.0	
# ::edge	government-organization	wiki	"Virginia_Department_of_Transportation"	0.0.1.0.1.0.0.1	0.0.1.0.1.0.0.1.0	
# ::edge	hammer-02	ARG0	situation	0.0	0.0.0	
# ::edge	hammer-02	ARG1	valid-02	0.0	0.0.1	
# ::edge	hammer-02	destination	home	0.0	0.0.2	
# ::edge	have-org-role-91	ARG1	state	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
# ::edge	have-org-role-91	ARG3	audit-01	0.0.1.0.0.0.0	0.0.1.0.0.0.0.1	
# ::edge	instead-of-91	ARG2	base-02	0.0.1.0.1.0.2.1	0.0.1.0.1.0.2.1.0	
# ::edge	lobby-01	manner	good	0.0.1.0.1.0.2.0.0	0.0.1.0.1.0.2.0.0.0	
# ::edge	name	op1	"CTB"	0.0.1.0.1.0.0.0.1	0.0.1.0.1.0.0.0.1.0	
# ::edge	name	op1	"VDOT"	0.0.1.0.1.0.0.1.1	0.0.1.0.1.0.0.1.1.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	person	ARG0-of	lobby-01	0.0.1.0.1.0.2.0	0.0.1.0.1.0.2.0.0	
# ::edge	plan-01	ARG1	transport-01	0.0.1.0.1.0.2.1.0.0	0.0.1.0.1.0.2.1.0.0.0	
# ::edge	plan-01	manner	comprehensive	0.0.1.0.1.0.2.1.0.0	0.0.1.0.1.0.2.1.0.0.1	
# ::edge	project	mod	transport-01	0.0.1.0.1.0.1	0.0.1.0.1.0.1.0	
# ::edge	report-01	ARG0	person	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	situation	mod	this	0.0.0	0.0.0.0	
# ::edge	thing	ARG0-of	find-02	0.0.1.0	0.0.1.0.1	
# ::edge	thing	ARG1-of	report-01	0.0.1.0	0.0.1.0.0	
# ::edge	transport-01	ARG4	state	0.0.1.0.1.0.2.1.0.0.0	0.0.1.0.1.0.2.1.0.0.0.0	
# ::edge	valid-02	ARG1	thing	0.0.1	0.0.1.0	
(c3 / contrast-01
      :ARG2 (h / hammer-02
            :ARG0 (s / situation
                  :mod (t / this))
            :ARG1 (v2 / valid-02
                  :ARG1 (t2 / thing
                        :ARG1-of (r / report-01
                              :ARG0 (p / person
                                    :ARG0-of (h3 / have-org-role-91
                                          :ARG1 (s4 / state)
                                          :ARG3 (a / audit-01
                                                :ARG0-of p))))
                        :ARG0-of (f / find-02
                              :ARG1 (f4 / fund-01
                                    :ARG0 (a2 / and
                                          :op1 (g / government-organization :wiki "Commonwealth_Transportation_Board" :name (c / name :op1 "CTB"))
                                          :op2 (g2 / government-organization :wiki "Virginia_Department_of_Transportation" :name (v / name :op1 "VDOT")))
                                    :ARG1 (p2 / project
                                          :mod (t3 / transport-01))
                                    :ARG1-of (b4 / base-02
                                          :ARG2 (p4 / person
                                                :ARG0-of (l / lobby-01
                                                      :manner (g3 / good
                                                            :degree (m / most))))
                                          :ARG1-of (i / instead-of-91
                                                :ARG2 (b2 / base-02
                                                      :ARG1 f4
                                                      :ARG2 (p3 / plan-01
                                                            :ARG1 (t5 / transport-01
                                                                  :ARG4 (s3 / state))
                                                            :manner (c2 / comprehensive)))))))))
            :destination (h2 / home)))

# ::node	0	make-01	1-2
# ::node	0.0	person	0-1
# ::node	0.0.0	-	
# ::node	0.0.1	name	0-1
# ::node	0.0.1.0	"5:26"	0-1
# ::node	0.1	point	4-5
# ::node	0.1.0	good	3-4
# ::root	0	make-01
# ::edge	make-01	ARG0	person	0	0.0	
# ::edge	make-01	ARG1	point	0	0.1	
# ::edge	name	op1	"5:26"	0.0.1	0.0.1.0	
# ::edge	person	name	name	0.0	0.0.1	
# ::edge	person	wiki	-	0.0	0.0.0	
# ::edge	point	mod	good	0.1	0.1.0	
(m / make-01
      :ARG0 (p3 / person :wiki - :name (n / name :op1 "5:26"))
      :ARG1 (p2 / point
            :mod (g / good)))

