# ::node	0	anger-01	
# ::node	0.0	i	
# ::node	0.1	person	3-4
# ::node	0.1.0	teach-01	3-4
# ::node	0.2	then	1-2
# ::node	0.3	cause-01	
# ::root	0	anger-01
# ::edge	anger-01	ARG0	i	0	0.0	
# ::edge	anger-01	ARG1	person	0	0.1	
# ::edge	anger-01	ARG1-of	cause-01	0	0.3	
# ::edge	anger-01	time	then	0	0.2	
# ::edge	person	ARG0-of	teach-01	0.1	0.1.0	
# ::edge	teach-01	ARG2	i	0.1.0	0.0	
(a / anger-01
      :ARG0 (i / i)
      :ARG1 (p / person
            :ARG0-of (t / teach-01
                  :ARG2 i))
      :time (t2 / then)
      :ARG1-of (c / cause-01))

# ::node	0	and	6-7
# ::node	0.0	lovely	4-5
# ::node	0.0.0	she	2-3
# ::node	0.0.1	minute	
# ::node	0.0.1.0	one	0-1
# ::node	0.0.2	resemble-01	
# ::node	0.0.2.0	have-06	10-11
# ::node	0.0.2.0.0	person	
# ::node	0.0.2.0.0.0	have-org-role-91	12-13
# ::node	0.0.2.0.0.0.0	i	
# ::node	0.0.2.0.0.0.1	mummy	12-13
# ::node	0.0.2.0.1	back	13-14
# ::node	0.1	turn-02	20-21
# ::node	0.1.0	human	25-26
# ::node	0.1.0.0	spiteful	24-25
# ::node	0.1.0.0.0	most	23-24
# ::node	0.1.0.1	live-01	
# ::node	0.1.1	then	15-16
# ::node	0.1.2	minute	1-2
# ::node	0.1.2.0	next	17-18
# ::root	0	and
# ::edge	and	op1	lovely	0	0.0	
# ::edge	and	op2	turn-02	0	0.1	
# ::edge	have-06	ARG0	i	0.0.2.0	0.0.2.0.0.0.0	
# ::edge	have-06	ARG1	person	0.0.2.0	0.0.2.0.0	
# ::edge	have-06	mod	back	0.0.2.0	0.0.2.0.1	
# ::edge	have-org-role-91	ARG1	i	0.0.2.0.0.0	0.0.2.0.0.0.0	
# ::edge	have-org-role-91	ARG2	mummy	0.0.2.0.0.0	0.0.2.0.0.0.1	
# ::edge	human	ARG0-of	live-01	0.1.0	0.1.0.1	
# ::edge	human	mod	spiteful	0.1.0	0.1.0.0	
# ::edge	lovely	ARG1-of	resemble-01	0.0	0.0.2	
# ::edge	lovely	domain	she	0.0	0.0.0	
# ::edge	lovely	time	minute	0.0	0.0.1	
# ::edge	minute	mod	next	0.1.2	0.1.2.0	
# ::edge	minute	mod	one	0.0.1	0.0.1.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	resemble-01	ARG2	have-06	0.0.2	0.0.2.0	
# ::edge	spiteful	degree	most	0.1.0.0	0.1.0.0.0	
# ::edge	turn-02	ARG1	she	0.1	0.0.0	
# ::edge	turn-02	ARG2	human	0.1	0.1.0	
# ::edge	turn-02	time	minute	0.1	0.1.2	
# ::edge	turn-02	time	then	0.1	0.1.1	
(a / and
      :op1 (l / lovely
            :domain (s / she)
            :time (m5 / minute
                  :mod (o / one))
            :ARG1-of (r / resemble-01
                  :ARG2 (h / have-06
                        :ARG0 i
                        :ARG1 (p / person
                              :ARG0-of (h3 / have-org-role-91
                                    :ARG1 (i / i)
                                    :ARG2 (m / mummy)))
                        :mod (b / back))))
      :op2 (t2 / turn-02
            :ARG1 s
            :ARG2 (h2 / human
                  :mod (s2 / spiteful
                        :degree (m3 / most))
                  :ARG0-of (l2 / live-01))
            :time (t3 / then)
            :time (m4 / minute
                  :mod (n / next))))

# ::node	0	and	3-4
# ::node	0.0	age-01	
# ::node	0.0.0	i	0-1
# ::node	0.0.1	temporal-quantity	
# ::node	0.0.1.0	24	2-3
# ::node	0.0.1.1	year	
# ::node	0.1	have-rel-role-91	5-6
# ::node	0.1.0	person	
# ::node	0.1.0.0	age-01	
# ::node	0.1.0.0.0	temporal-quantity	12-13
# ::node	0.1.0.0.0.0	2.5	
# ::node	0.1.0.0.0.1	year	12-13
# ::node	0.1.1	mother	5-6
# ::root	0	and
# ::edge	age-01	ARG1	i	0.0	0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0	0.0.1	
# ::edge	age-01	ARG2	temporal-quantity	0.1.0.0	0.1.0.0.0	
# ::edge	and	op1	age-01	0	0.0	
# ::edge	and	op2	have-rel-role-91	0	0.1	
# ::edge	have-rel-role-91	ARG0	i	0.1	0.0.0	
# ::edge	have-rel-role-91	ARG1	person	0.1	0.1.0	
# ::edge	have-rel-role-91	ARG2	mother	0.1	0.1.1	
# ::edge	person	ARG1-of	age-01	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	quant	2.5	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	temporal-quantity	quant	24	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	unit	year	0.0.1	0.0.1.1	
# ::edge	temporal-quantity	unit	year	0.1.0.0.0	0.1.0.0.0.1	
(a / and
      :op1 (a2 / age-01
            :ARG1 (i / i)
            :ARG2 (t / temporal-quantity :quant 24
                  :unit (y2 / year)))
      :op2 (h / have-rel-role-91
            :ARG0 i
            :ARG1 (p / person
                  :ARG1-of (a3 / age-01
                        :ARG2 (t3 / temporal-quantity :quant 2.5
                              :unit (y / year))))
            :ARG2 (m / mother)))

# ::node	0	person	
# ::node	0.0	have-03	
# ::node	0.0.0	bursary	21-22
# ::node	0.0.0.0	percentage-entity	
# ::node	0.0.0.0.0	95	19-20
# ::node	0.1	study-01	
# ::node	0.1.0	time	7-8
# ::node	0.1.0.0	full	5-6
# ::node	0.1.1	school	15-16
# ::node	0.1.1.0	private-03	14-15
# ::node	0.1.1.1	pressure-01	13-14
# ::node	0.1.1.1.0	high-02	12-13
# ::node	0.1.2	form	9-10
# ::node	0.1.2.0	ordinal-entity	
# ::node	0.1.2.0.0	6	
# ::node	0.2	temporal-quantity	
# ::node	0.2.0	18	2-3
# ::node	0.2.1	year	
# ::node	0.3	point	28-29
# ::node	0.3.0	break-01	27-28
# ::node	0.4	i	0-1
# ::root	0	person
# ::edge	break-01	ARG1	i	0.3.0	0.4	
# ::edge	bursary	mod	percentage-entity	0.0.0	0.0.0.0	
# ::edge	form	ord	ordinal-entity	0.1.2	0.1.2.0	
# ::edge	have-03	ARG1	bursary	0.0	0.0.0	
# ::edge	ordinal-entity	value	6	0.1.2.0	0.1.2.0.0	
# ::edge	percentage-entity	value	95	0.0.0.0	0.0.0.0.0	
# ::edge	person	ARG0-of	have-03	0	0.0	
# ::edge	person	ARG0-of	study-01	0	0.1	
# ::edge	person	age	temporal-quantity	0	0.2	
# ::edge	person	domain	i	0	0.4	
# ::edge	person	location	point	0	0.3	
# ::edge	point	mod	break-01	0.3	0.3.0	
# ::edge	pressure-01	ARG1-of	high-02	0.1.1.1	0.1.1.1.0	
# ::edge	school	ARG0-of	pressure-01	0.1.1	0.1.1.1	
# ::edge	school	ARG1-of	private-03	0.1.1	0.1.1.0	
# ::edge	study-01	location	school	0.1	0.1.1	
# ::edge	study-01	mod	time	0.1	0.1.0	
# ::edge	study-01	prep-in	form	0.1	0.1.2	
# ::edge	temporal-quantity	quant	18	0.2	0.2.0	
# ::edge	temporal-quantity	unit	year	0.2	0.2.1	
# ::edge	time	mod	full	0.1.0	0.1.0.0	
(p5 / person
      :ARG0-of (h2 / have-03
            :ARG1 (b / bursary
                  :mod (p / percentage-entity :value 95)))
      :ARG0-of (s2 / study-01
            :mod (t2 / time
                  :mod (f2 / full))
            :location (s / school
                  :ARG1-of (p2 / private-03)
                  :ARG0-of (p3 / pressure-01
                        :ARG1-of (h / high-02)))
            :prep-in (f / form
                  :ord (o / ordinal-entity :value 6)))
      :age (t / temporal-quantity :quant 18
            :unit (y / year))
      :location (p4 / point
            :mod (b2 / break-01
                  :ARG1 i))
      :domain (i / i))

# ::node	0	and	7-8
# ::node	0.0	want-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	start-01	3-4
# ::node	0.0.1.0	date-02	4-5
# ::node	0.0.1.0.0	person	5-6
# ::node	0.0.1.0.0.0	other	5-6
# ::node	0.1	say-01	12-13
# ::node	0.1.0	person	
# ::node	0.1.0.0	have-rel-role-91	11-12
# ::node	0.1.0.0.0	person	
# ::node	0.1.0.0.0.0	have-rel-role-91	9-10
# ::node	0.1.0.0.0.0.0	son	9-10
# ::node	0.1.0.0.1	father	11-12
# ::node	0.1.1	have-to-do-with-04	18-19
# ::node	0.1.1.0	nothing	19-20
# ::root	0	and
# ::edge	and	op1	want-01	0	0.0	
# ::edge	and	op2	say-01	0	0.1	
# ::edge	date-02	ARG0	i	0.0.1.0	0.0.0	
# ::edge	date-02	ARG1	person	0.0.1.0	0.0.1.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.0.0.0	0.0.0	
# ::edge	have-rel-role-91	ARG1	person	0.1.0.0	0.1.0.0.0	
# ::edge	have-rel-role-91	ARG2	father	0.1.0.0	0.1.0.0.1	
# ::edge	have-rel-role-91	ARG2	son	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	have-to-do-with-04	ARG0	person	0.1.1	0.1.0	
# ::edge	have-to-do-with-04	ARG1	person	0.1.1	0.1.0.0.0	
# ::edge	have-to-do-with-04	ARG2	nothing	0.1.1	0.1.1.0	
# ::edge	have-to-do-with-04	condition	date-02	0.1.1	0.0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0	0.1.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	person	mod	other	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	say-01	ARG0	person	0.1	0.1.0	
# ::edge	say-01	ARG1	have-to-do-with-04	0.1	0.1.1	
# ::edge	start-01	ARG0	i	0.0.1	0.0.0	
# ::edge	start-01	ARG1	date-02	0.0.1	0.0.1.0	
# ::edge	want-01	ARG0	i	0.0	0.0.0	
# ::edge	want-01	ARG1	start-01	0.0	0.0.1	
(a / and
      :op1 (w / want-01
            :ARG0 (i / i)
            :ARG1 (s2 / start-01
                  :ARG0 i
                  :ARG1 (d / date-02
                        :ARG0 i
                        :ARG1 (p / person
                              :mod (o / other)))))
      :op2 (s / say-01
            :ARG0 (p2 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (p3 / person
                              :ARG0-of (h2 / have-rel-role-91
                                    :ARG1 i
                                    :ARG2 (s3 / son)))
                        :ARG2 (f / father)))
            :ARG1 (h3 / have-to-do-with-04
                  :ARG0 p2
                  :ARG1 p3
                  :ARG2 (n / nothing)
                  :condition d)))

# ::node	0	break-up-08	8-9
# ::node	0.0	i	
# ::node	0.1	person	6-7
# ::node	0.1.0	have-rel-role-91	6-7
# ::node	0.1.0.0	person	
# ::node	0.1.0.0.0	have-rel-role-91	3-4
# ::node	0.1.0.0.0.0	son	3-4
# ::node	0.1.0.1	father	5-6
# ::node	0.2	since	10-11
# ::node	0.2.0	date-entity	11-12
# ::node	0.2.0.0	8	11-12
# ::root	0	break-up-08
# ::edge	break-up-08	ARG0	i	0	0.0	
# ::edge	break-up-08	ARG1	person	0	0.1	
# ::edge	break-up-08	time	since	0	0.2	
# ::edge	date-entity	month	8	0.2.0	0.2.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.0.0	0.0	
# ::edge	have-rel-role-91	ARG1	person	0.1.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG2	father	0.1.0	0.1.0.1	
# ::edge	have-rel-role-91	ARG2	son	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1	0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.0	0.1.0.0.0	
# ::edge	since	op1	date-entity	0.2	0.2.0	
(b / break-up-08
      :ARG0 (i / i)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 i
                              :ARG2 (s3 / son)))
                  :ARG2 (f / father)))
      :time (s2 / since
            :op1 (d / date-entity :month 8)))

# ::node	0	and	11-12
# ::node	0.0	go-on-15	
# ::node	0.0.0	much	3-4
# ::node	0.0.0.0	too	2-3
# ::node	0.0.1	life	8-9
# ::node	0.0.1.0	he	0-1
# ::node	0.0.2	now	10-11
# ::node	0.0.2.0	right	9-10
# ::node	0.1	think-01	13-14
# ::node	0.1.0	possible-01	15-16
# ::node	0.1.0.0	work-09	16-17
# ::node	0.1.0.0.0	we	14-15
# ::node	0.1.1	tell-01	20-21
# ::node	0.1.1.0	i	18-19
# ::node	0.1.1.1	and	28-29
# ::node	0.1.1.1.0	love-01	32-33
# ::node	0.1.1.1.0.0	-	32-32
# ::node	0.1.1.1.1	love-01	26-27
# ::node	0.1.1.1.1.0	-	32-32
# ::node	0.1.1.2	several	22-23
# ::root	0	and
# ::edge	and	op1	go-on-15	0	0.0	
# ::edge	and	op1	love-01	0.1.1.1	0.1.1.1.0	
# ::edge	and	op2	love-01	0.1.1.1	0.1.1.1.1	
# ::edge	and	op2	think-01	0	0.1	
# ::edge	go-on-15	ARG1	much	0.0	0.0.0	
# ::edge	go-on-15	location	life	0.0	0.0.1	
# ::edge	go-on-15	time	now	0.0	0.0.2	
# ::edge	life	poss	he	0.0.1	0.0.1.0	
# ::edge	love-01	ARG0	he	0.1.1.1.1	0.0.1.0	
# ::edge	love-01	ARG0	i	0.1.1.1.0	0.1.1.0	
# ::edge	love-01	ARG1	he	0.1.1.1.0	0.0.1.0	
# ::edge	love-01	ARG1	i	0.1.1.1.1	0.1.1.0	
# ::edge	love-01	polarity	-	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	love-01	polarity	-	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	much	degree	too	0.0.0	0.0.0.0	
# ::edge	now	mod	right	0.0.2	0.0.2.0	
# ::edge	possible-01	ARG1	work-09	0.1.0	0.1.0.0	
# ::edge	tell-01	ARG0	i	0.1.1	0.1.1.0	
# ::edge	tell-01	ARG1	and	0.1.1	0.1.1.1	
# ::edge	tell-01	ARG2	he	0.1.1	0.0.1.0	
# ::edge	tell-01	frequency	several	0.1.1	0.1.1.2	
# ::edge	think-01	ARG0	he	0.1	0.0.1.0	
# ::edge	think-01	ARG1	possible-01	0.1	0.1.0	
# ::edge	think-01	concession	tell-01	0.1	0.1.1	
# ::edge	work-09	ARG1	we	0.1.0.0	0.1.0.0.0	
(a / and
      :op1 (g / go-on-15
            :ARG1 (m / much
                  :degree (t2 / too))
            :location (l / life
                  :poss (h2 / he))
            :time (n / now
                  :mod (r / right)))
      :op2 (t / think-01
            :ARG0 h2
            :ARG1 (p / possible-01
                  :ARG1 (w / work-09
                        :ARG1 (w2 / we)))
            :concession (t3 / tell-01
                  :ARG0 (i / i)
                  :ARG1 (a2 / and
                        :op1 (l2 / love-01 :polarity -
                              :ARG0 i
                              :ARG1 h2)
                        :op2 (l3 / love-01 :polarity -
                              :ARG0 h2
                              :ARG1 i))
                  :ARG2 h2
                  :frequency (s2 / several))))

# ::node	0	contrast-01	6-7
# ::node	0.0	and	4-5
# ::node	0.0.0	possessive-03	3-4
# ::node	0.0.0.0	he	0-1
# ::node	0.0.0.1	very	
# ::node	0.0.1	controlling	5-6
# ::node	0.0.1.0	very	2-3
# ::node	0.1	right-05	10-11
# ::node	0.1.0	-	9-10
# ::node	0.1.1	cause-01	
# ::node	0.1.1.0	together	17-18
# ::node	0.1.1.0.0	we	14-15
# ::root	0	contrast-01
# ::edge	and	op1	possessive-03	0.0	0.0.0	
# ::edge	and	op2	controlling	0.0	0.0.1	
# ::edge	cause-01	ARG0	together	0.1.1	0.1.1.0	
# ::edge	contrast-01	ARG1	and	0	0.0	
# ::edge	contrast-01	ARG2	right-05	0	0.1	
# ::edge	controlling	degree	very	0.0.1	0.0.1.0	
# ::edge	controlling	domain	he	0.0.1	0.0.0.0	
# ::edge	possessive-03	ARG0	he	0.0.0	0.0.0.0	
# ::edge	possessive-03	degree	very	0.0.0	0.0.0.1	
# ::edge	right-05	ARG1	he	0.1	0.0.0.0	
# ::edge	right-05	ARG1-of	cause-01	0.1	0.1.1	
# ::edge	right-05	ARG2	and	0.1	0.0	
# ::edge	right-05	polarity	-	0.1	0.1.0	
# ::edge	together	domain	we	0.1.1.0	0.1.1.0.0	
(c / contrast-01
      :ARG1 (a / and
            :op1 (p / possessive-03
                  :ARG0 (h2 / he)
                  :degree (v2 / very))
            :op2 (c3 / controlling
                  :domain h2
                  :degree (v / very)))
      :ARG2 (r / right-05 :polarity -
            :ARG1 h2
            :ARG2 a
            :ARG1-of (c2 / cause-01
                  :ARG0 (t / together
                        :domain (w / we)))))

# ::node	0	multi-sentence	
# ::node	0.0	contrast-01	0-1
# ::node	0.0.0	have-03	2-3
# ::node	0.0.0.0	he	1-2
# ::node	0.0.0.1	no-one	
# ::node	0.1	and	7-8
# ::node	0.1.0	get-along-18	
# ::node	0.1.0.0	-	3-4
# ::node	0.1.0.1	family	6-7
# ::node	0.1.0.1.0	have-org-role-91	
# ::node	0.1.0.1.0.0	member	
# ::node	0.1.0.2	he	
# ::node	0.1.1	have-03	13-14
# ::node	0.1.1.0	and	12-13
# ::node	0.1.1.1	issue-02	16-17
# ::root	0	multi-sentence
# ::edge	and	op1	get-along-18	0.1	0.1.0	
# ::edge	and	op1	he	0.1.1.0	0.1.0.2	
# ::edge	and	op2	family	0.1.1.0	0.1.0.1	
# ::edge	and	op2	have-03	0.1	0.1.1	
# ::edge	contrast-01	ARG2	have-03	0.0	0.0.0	
# ::edge	family	ARG1-of	have-org-role-91	0.1.0.1	0.1.0.1.0	
# ::edge	get-along-18	ARG1	family	0.1.0	0.1.0.1	
# ::edge	get-along-18	ARG2	he	0.1.0	0.1.0.2	
# ::edge	get-along-18	polarity	-	0.1.0	0.1.0.0	
# ::edge	have-03	ARG0	and	0.1.1	0.1.1.0	
# ::edge	have-03	ARG0	he	0.0.0	0.0.0.0	
# ::edge	have-03	ARG1	issue-02	0.1.1	0.1.1.1	
# ::edge	have-03	ARG1	no-one	0.0.0	0.0.0.1	
# ::edge	have-org-role-91	ARG0	he	0.1.0.1.0	0.1.0.2	
# ::edge	have-org-role-91	ARG2	member	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	issue-02	ARG1	and	0.1.1.1	0.1.1.0	
# ::edge	multi-sentence	snt1	contrast-01	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG2 (h / have-03
                  :ARG0 (h2 / he)
                  :ARG1 (n / no-one)))
      :snt2 (a / and
            :op1 (g / get-along-18 :polarity -
                  :ARG1 (f / family
                        :ARG1-of (h5 / have-org-role-91
                              :ARG0 h3
                              :ARG2 (m2 / member)))
                  :ARG2 (h3 / he))
            :op2 (h4 / have-03
                  :ARG0 (a3 / and
                        :op1 h3
                        :op2 f)
                  :ARG1 (i / issue-02
                        :ARG1 a3))))

# ::node	0	want-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	he	
# ::node	0.1.0	there	5-6
# ::node	0.1.0.0	person	
# ::node	0.1.0.0.0	have-rel-role-91	8-9
# ::node	0.1.0.0.0.0	son	8-9
# ::node	0.2	need-01	10-11
# ::node	0.2.0	-	
# ::node	0.2.1	too	12-13
# ::root	0	want-01
# ::edge	have-rel-role-91	ARG1	he	0.1.0.0.0	0.1	
# ::edge	have-rel-role-91	ARG2	son	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	he	location	there	0.1	0.1.0	
# ::edge	need-01	ARG0	he	0.2	0.1	
# ::edge	need-01	ARG1	i	0.2	0.0	
# ::edge	need-01	mod	too	0.2	0.2.1	
# ::edge	need-01	polarity	-	0.2	0.2.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.0	0.1.0.0.0	
# ::edge	there	beneficiary	person	0.1.0	0.1.0.0	
# ::edge	want-01	ARG0	i	0	0.0	
# ::edge	want-01	ARG1	he	0	0.1	
# ::edge	want-01	manner	need-01	0	0.2	
(w / want-01
      :ARG0 (i / i)
      :ARG1 (h / he
            :location (t / there
                  :beneficiary (p / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 h
                              :ARG2 (s / son)))))
      :manner (n / need-01 :polarity -
            :ARG0 h
            :ARG1 i
            :mod (t2 / too)))

# ::node	0	want-01	2-3
# ::node	0.0	-	6-6
# ::node	0.1	i	0-1
# ::node	0.2	he	12-13
# ::node	0.2.0	there	7-8
# ::node	0.2.0.0	-	6-6
# ::node	0.2.0.1	person	
# ::node	0.2.0.1.0	have-rel-role-91	10-11
# ::node	0.2.0.1.0.0	son	10-11
# ::node	0.3	cause-01	
# ::node	0.3.0	or	17-18
# ::node	0.3.0.0	have-rel-role-91	16-17
# ::node	0.3.0.0.0	father	16-17
# ::node	0.3.0.0.0.0	good	15-16
# ::node	0.3.0.1	try-01	21-22
# ::node	0.3.0.1.0	at-least	
# ::root	0	want-01
# ::edge	cause-01	ARG0	or	0.3	0.3.0	
# ::edge	father	mod	good	0.3.0.0.0	0.3.0.0.0.0	
# ::edge	have-rel-role-91	ARG0	he	0.3.0.0	0.2	
# ::edge	have-rel-role-91	ARG1	he	0.2.0.1.0	0.2	
# ::edge	have-rel-role-91	ARG2	father	0.3.0.0	0.3.0.0.0	
# ::edge	have-rel-role-91	ARG2	son	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	he	location	there	0.2	0.2.0	
# ::edge	or	op1	have-rel-role-91	0.3.0	0.3.0.0	
# ::edge	or	op2	try-01	0.3.0	0.3.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.2.0.1	0.2.0.1.0	
# ::edge	there	beneficiary	person	0.2.0	0.2.0.1	
# ::edge	there	polarity	-	0.2.0	0.2.0.0	
# ::edge	try-01	ARG0	he	0.3.0.1	0.2	
# ::edge	try-01	ARG1	have-rel-role-91	0.3.0.1	0.3.0.0	
# ::edge	try-01	manner	at-least	0.3.0.1	0.3.0.1.0	
# ::edge	want-01	ARG0	i	0	0.1	
# ::edge	want-01	ARG1	he	0	0.2	
# ::edge	want-01	ARG1-of	cause-01	0	0.3	
# ::edge	want-01	polarity	-	0	0.0	
(w / want-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (h / he
            :location (t / there :polarity -
                  :beneficiary (p / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 h
                              :ARG2 (s / son)))))
      :ARG1-of (c / cause-01
            :ARG0 (o / or
                  :op1 (h3 / have-rel-role-91
                        :ARG0 h
                        :ARG2 (f / father
                              :mod (g / good)))
                  :op2 (t2 / try-01
                        :ARG0 h
                        :ARG1 h3
                        :manner (a / at-least)))))

# ::node	0	and	8-9
# ::node	0.0	want-01	3-4
# ::node	0.0.0	-	
# ::node	0.0.1	i	0-1
# ::node	0.0.2	miserable	16-17
# ::node	0.0.3	anymore	7-8
# ::node	0.1	miserable	6-7
# ::node	0.1.0	more	
# ::node	0.1.1	be-located-at-91	
# ::node	0.1.1.0	he	11-12
# ::node	0.1.1.1	around	13-14
# ::node	0.1.1.2	long-03	10-11
# ::node	0.1.1.2.0	more	15-16
# ::root	0	and
# ::edge	and	op1	want-01	0	0.0	
# ::edge	and	op2	miserable	0	0.1	
# ::edge	be-located-at-91	ARG1	he	0.1.1	0.1.1.0	
# ::edge	be-located-at-91	ARG1-of	long-03	0.1.1	0.1.1.2	
# ::edge	be-located-at-91	ARG2	around	0.1.1	0.1.1.1	
# ::edge	long-03	degree	more	0.1.1.2	0.1.1.2.0	
# ::edge	miserable	condition	be-located-at-91	0.1	0.1.1	
# ::edge	miserable	degree	more	0.1	0.1.0	
# ::edge	miserable	domain	i	0.0.2	0.0.1	
# ::edge	miserable	domain	i	0.1	0.0.1	
# ::edge	want-01	ARG0	i	0.0	0.0.1	
# ::edge	want-01	ARG1	miserable	0.0	0.0.2	
# ::edge	want-01	polarity	-	0.0	0.0.0	
# ::edge	want-01	time	anymore	0.0	0.0.3	
(a3 / and
      :op1 (w / want-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (m / miserable
                  :domain i)
            :time (a / anymore))
      :op2 (m2 / miserable
            :degree (m3 / more)
            :domain i
            :condition (b2 / be-located-at-91
                  :ARG1 (h / he)
                  :ARG2 (a2 / around)
                  :ARG1-of (l / long-03
                        :degree (m4 / more)))))

# ::node	0	possible-01	
# ::node	0.0	-	
# ::node	0.1	cope-01	3-4
# ::node	0.1.0	i	0-1
# ::node	0.1.1	and	7-8
# ::node	0.1.1.0	outburst	6-7
# ::node	0.1.1.0.0	she	
# ::node	0.1.1.1	thing	10-11
# ::node	0.1.1.1.0	remark-01	10-11
# ::node	0.1.1.1.1	hateful	9-10
# ::node	0.1.1.1.2	nasty	8-9
# ::node	0.2	be-located-at-91	
# ::node	0.2.0	home	15-16
# ::root	0	possible-01
# ::edge	and	op1	outburst	0.1.1	0.1.1.0	
# ::edge	and	op2	thing	0.1.1	0.1.1.1	
# ::edge	be-located-at-91	ARG1	i	0.2	0.1.0	
# ::edge	be-located-at-91	ARG2	home	0.2	0.2.0	
# ::edge	cope-01	ARG0	i	0.1	0.1.0	
# ::edge	cope-01	ARG1	and	0.1	0.1.1	
# ::edge	outburst	poss	she	0.1.1.0	0.1.1.0.0	
# ::edge	possible-01	ARG1	cope-01	0	0.1	
# ::edge	possible-01	polarity	-	0	0.0	
# ::edge	possible-01	time	be-located-at-91	0	0.2	
# ::edge	remark-01	ARG0	she	0.1.1.1.0	0.1.1.0.0	
# ::edge	thing	ARG1-of	remark-01	0.1.1.1	0.1.1.1.0	
# ::edge	thing	mod	hateful	0.1.1.1	0.1.1.1.1	
# ::edge	thing	mod	nasty	0.1.1.1	0.1.1.1.2	
(p / possible-01 :polarity -
      :ARG1 (c / cope-01
            :ARG0 (i / i)
            :ARG1 (a / and
                  :op1 (o / outburst
                        :poss (s / she))
                  :op2 (t / thing
                        :ARG1-of (r / remark-01
                              :ARG0 s)
                        :mod (h / hateful)
                        :mod (n / nasty))))
      :time (b / be-located-at-91
            :ARG1 i
            :ARG2 (h2 / home)))

# ::node	0	have-condition-91	
# ::node	0.0	say-01	11-12
# ::node	0.1	think-01	8-9
# ::node	0.1.0	you	6-7
# ::node	0.1.1	no	9-10
# ::node	0.1.2	mind-05	4-5
# ::root	0	have-condition-91
# ::edge	have-condition-91	ARG1	say-01	0	0.0	
# ::edge	have-condition-91	ARG2	think-01	0	0.1	
# ::edge	mind-05	ARG0	you	0.1.2	0.1.0	
# ::edge	say-01	ARG0	you	0.0	0.1.0	
# ::edge	say-01	ARG1	no	0.0	0.1.1	
# ::edge	think-01	ARG0	you	0.1	0.1.0	
# ::edge	think-01	ARG1	no	0.1	0.1.1	
# ::edge	think-01	ARG1-of	mind-05	0.1	0.1.2	
(h / have-condition-91
      :ARG1 (s / say-01
            :ARG0 y
            :ARG1 n)
      :ARG2 (t / think-01
            :ARG0 (y / you)
            :ARG1 (n / no)
            :ARG1-of (m / mind-05
                  :ARG0 y)))

# ::node	0	go-02	5-6
# ::node	0.0	-	
# ::node	0.1	you	12-13
# ::node	0.2	top	8-9
# ::node	0.2.0	over	6-7
# ::node	0.3	it	10-11
# ::node	0.4	of-course	
# ::node	0.5	go-02	13-14
# ::node	0.5.0	-	
# ::node	0.5.1	direction	18-19
# ::node	0.5.1.0	opposite-01	17-18
# ::node	0.5.1.0.0	complete-02	15-16
# ::root	0	go-02
# ::edge	direction	ARG1-of	opposite-01	0.5.1	0.5.1.0	
# ::edge	go-02	ARG0	you	0	0.1	
# ::edge	go-02	ARG0	you	0.5	0.1	
# ::edge	go-02	ARG4	top	0	0.2	
# ::edge	go-02	direction	direction	0.5	0.5.1	
# ::edge	go-02	mod	of-course	0	0.4	
# ::edge	go-02	polarity	-	0	0.0	
# ::edge	go-02	polarity	-	0.5	0.5.0	
# ::edge	go-02	prep-with	it	0	0.3	
# ::edge	go-02	purpose	go-02	0	0.5	
# ::edge	opposite-01	ARG1-of	complete-02	0.5.1.0	0.5.1.0.0	
# ::edge	top	mod	over	0.2	0.2.0	
(g / go-02 :polarity -
      :ARG0 (y / you)
      :ARG4 (t / top
            :mod (o / over))
      :prep-with (i / it)
      :mod (o3 / of-course)
      :purpose (g2 / go-02 :polarity -
            :ARG0 y
            :direction (d / direction
                  :ARG1-of (o2 / opposite-01
                        :ARG1-of (c / complete-02)))))

# ::node	0	multi-sentence	
# ::node	0.0	attitude	6-7
# ::node	0.0.0	bad-07	5-6
# ::node	0.0.0.0	such	3-4
# ::node	0.0.1	this	1-2
# ::node	0.0.2	really	7-8
# ::node	0.0.3	well	0-1
# ::node	0.1	possible-01	12-13
# ::node	0.1.0	respect-01	14-15
# ::node	0.1.0.0	you	11-12
# ::node	0.1.1	contrast-01	19-20
# ::node	0.1.1.0	nice-01	38-39
# ::node	0.1.1.1	nice-01	18-19
# ::node	0.1.1.1.0	-	21-21
# ::node	0.1.1.1.1	let-01	27-28
# ::node	0.1.1.1.1.0	do-02	29-30
# ::node	0.1.1.1.1.0.0	they	
# ::node	0.1.1.1.1.0.1	anything	30-31
# ::node	0.1.1.1.1.1	just	26-27
# ::node	0.1.2	of-course	
# ::node	0.2	contrast-01	
# ::node	0.2.0	nice-01	
# ::node	0.2.0.0	-	21-21
# ::node	0.2.0.1	that	34-35
# ::node	0.2.1	person	43-44
# ::node	0.2.1.0	fool-01	43-44
# ::root	0	multi-sentence
# ::edge	attitude	ARG1-of	bad-07	0.0	0.0.0	
# ::edge	attitude	domain	this	0.0	0.0.1	
# ::edge	attitude	mod	really	0.0	0.0.2	
# ::edge	attitude	mod	well	0.0	0.0.3	
# ::edge	bad-07	mod	such	0.0.0	0.0.0.0	
# ::edge	contrast-01	ARG1	nice-01	0.1.1	0.1.1.0	
# ::edge	contrast-01	ARG1	nice-01	0.2	0.2.0	
# ::edge	contrast-01	ARG2	nice-01	0.1.1	0.1.1.1	
# ::edge	contrast-01	ARG2	person	0.2	0.2.1	
# ::edge	do-02	ARG0	they	0.1.1.1.1.0	0.1.1.1.1.0.0	
# ::edge	do-02	ARG1	anything	0.1.1.1.1.0	0.1.1.1.1.0.1	
# ::edge	do-02	ARG2	you	0.1.1.1.1.0	0.1.0.0	
# ::edge	let-01	ARG0	you	0.1.1.1.1	0.1.0.0	
# ::edge	let-01	ARG1	do-02	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	let-01	mod	just	0.1.1.1.1	0.1.1.1.1.1	
# ::edge	multi-sentence	snt1	attitude	0	0.0	
# ::edge	multi-sentence	snt2	possible-01	0	0.1	
# ::edge	multi-sentence	snt3	contrast-01	0	0.2	
# ::edge	nice-01	ARG1	you	0.1.1.0	0.1.0.0	
# ::edge	nice-01	ARG1	you	0.1.1.1	0.1.0.0	
# ::edge	nice-01	domain	that	0.2.0	0.2.0.1	
# ::edge	nice-01	extent	let-01	0.1.1.1	0.1.1.1.1	
# ::edge	nice-01	polarity	-	0.1.1.1	0.1.1.1.0	
# ::edge	nice-01	polarity	-	0.2.0	0.2.0.0	
# ::edge	person	ARG1-of	fool-01	0.2.1	0.2.1.0	
# ::edge	person	domain	that	0.2.1	0.2.0.1	
# ::edge	possible-01	ARG1	respect-01	0.1	0.1.0	
# ::edge	possible-01	condition	contrast-01	0.1	0.1.1	
# ::edge	possible-01	mod	of-course	0.1	0.1.2	
# ::edge	respect-01	ARG1	you	0.1.0	0.1.0.0	
(m / multi-sentence
      :snt1 (a / attitude
            :ARG1-of (b / bad-07
                  :mod (s / such))
            :domain (t / this)
            :mod (r / really)
            :mod (w / well))
      :snt2 (p / possible-01
            :ARG1 (r2 / respect-01
                  :ARG1 (y / you))
            :condition (c / contrast-01
                  :ARG1 (n / nice-01
                        :ARG1 y)
                  :ARG2 (n2 / nice-01 :polarity -
                        :ARG1 y
                        :extent (l / let-01
                              :ARG0 y
                              :ARG1 (d / do-02
                                    :ARG0 (t2 / they)
                                    :ARG1 (a2 / anything)
                                    :ARG2 y)
                              :mod (j / just))))
            :mod (o / of-course))
      :snt3 (c2 / contrast-01
            :ARG1 (n3 / nice-01 :polarity -
                  :domain (t3 / that))
            :ARG2 (p2 / person
                  :ARG1-of (f / fool-01)
                  :domain t3)))

# ::node	0	start-01	2-3
# ::node	0.0	they	1-2
# ::node	0.1	respect-01	20-21
# ::node	0.1.0	you	6-7
# ::node	0.1.1	more	22-23
# ::node	0.2	start-01	19-20
# ::node	0.2.0	realize-01	4-5
# ::node	0.2.0.0	bend-01	11-12
# ::node	0.2.0.0.0	-	9-9
# ::node	0.2.0.0.1	over	12-13
# ::node	0.2.0.0.2	backwards	13-14
# ::root	0	start-01
# ::edge	bend-01	ARG1	you	0.2.0.0	0.1.0	
# ::edge	bend-01	beneficiary	they	0.2.0.0	0.0	
# ::edge	bend-01	direction	backwards	0.2.0.0	0.2.0.0.2	
# ::edge	bend-01	mod	over	0.2.0.0	0.2.0.0.1	
# ::edge	bend-01	polarity	-	0.2.0.0	0.2.0.0.0	
# ::edge	realize-01	ARG0	they	0.2.0	0.0	
# ::edge	realize-01	ARG1	bend-01	0.2.0	0.2.0.0	
# ::edge	respect-01	ARG0	they	0.1	0.0	
# ::edge	respect-01	ARG1	you	0.1	0.1.0	
# ::edge	respect-01	degree	more	0.1	0.1.1	
# ::edge	start-01	ARG0	they	0	0.0	
# ::edge	start-01	ARG0	they	0.2	0.0	
# ::edge	start-01	ARG1	realize-01	0.2	0.2.0	
# ::edge	start-01	ARG1	respect-01	0	0.1	
# ::edge	start-01	time	start-01	0	0.2	
(s / start-01
      :ARG0 (t / they)
      :ARG1 (r / respect-01
            :ARG0 t
            :ARG1 (y / you)
            :degree (m / more))
      :time (s2 / start-01
            :ARG0 t
            :ARG1 (r2 / realize-01
                  :ARG0 t
                  :ARG1 (b / bend-01 :polarity -
                        :ARG1 y
                        :mod (o / over)
                        :direction (b2 / backwards)
                        :beneficiary t))))

# ::node	0	multi-sentence	
# ::node	0.0	divorce-01	4-5
# ::node	0.0.0	person	21-22
# ::node	0.0.0.0	have-rel-role-91	21-22
# ::node	0.0.0.0.0	i	
# ::node	0.0.0.0.1	mum	1-2
# ::node	0.1	and	16-17
# ::node	0.1.0	have-03	7-8
# ::node	0.1.0.0	she	6-7
# ::node	0.1.0.1	time	10-11
# ::node	0.1.0.1.0	horrible	9-10
# ::node	0.1.0.2	person	
# ::node	0.1.0.2.0	have-rel-role-91	13-14
# ::node	0.1.0.2.0.0	i	
# ::node	0.1.0.2.0.1	stepfather	13-14
# ::node	0.1.1	send-02	22-23
# ::node	0.1.1.0	free-04	20-21
# ::node	0.1.1.0.0	find-01	19-20
# ::node	0.1.1.0.1	new	18-19
# ::node	0.1.1.1	round-03	24-25
# ::node	0.1.1.1.0	bend	26-27
# ::root	0	multi-sentence
# ::edge	and	op1	have-03	0.1	0.1.0	
# ::edge	and	op2	send-02	0.1	0.1.1	
# ::edge	divorce-01	ARG0	person	0.0	0.0.0	
# ::edge	find-01	ARG0	she	0.1.1.0.0	0.1.0.0	
# ::edge	free-04	ARG1	she	0.1.1.0	0.1.0.0	
# ::edge	free-04	ARG1-of	find-01	0.1.1.0	0.1.1.0.0	
# ::edge	free-04	mod	new	0.1.1.0	0.1.1.0.1	
# ::edge	have-03	ARG0	she	0.1.0	0.1.0.0	
# ::edge	have-03	ARG1	time	0.1.0	0.1.0.1	
# ::edge	have-03	accompanier	person	0.1.0	0.1.0.2	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0	0.0.0.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	have-rel-role-91	ARG2	mum	0.0.0.0	0.0.0.0.1	
# ::edge	have-rel-role-91	ARG2	stepfather	0.1.0.2.0	0.1.0.2.0.1	
# ::edge	multi-sentence	snt1	divorce-01	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.2	0.1.0.2.0	
# ::edge	round-03	ARG1	she	0.1.1.1	0.1.0.0	
# ::edge	round-03	ARG2	bend	0.1.1.1	0.1.1.1.0	
# ::edge	send-02	ARG0	free-04	0.1.1	0.1.1.0	
# ::edge	send-02	ARG1	she	0.1.1	0.1.0.0	
# ::edge	send-02	ARG2	round-03	0.1.1	0.1.1.1	
# ::edge	time	mod	horrible	0.1.0.1	0.1.0.1.0	
(m / multi-sentence
      :snt1 (d / divorce-01
            :ARG0 (p / person
                  :ARG0-of (h3 / have-rel-role-91
                        :ARG1 (i / i)
                        :ARG2 (m2 / mum))))
      :snt2 (a / and
            :op1 (h / have-03
                  :ARG0 (s / she)
                  :ARG1 (t / time
                        :mod (h2 / horrible))
                  :accompanier (p2 / person
                        :ARG0-of (h4 / have-rel-role-91
                              :ARG1 (i2 / i)
                              :ARG2 (s2 / stepfather))))
            :op2 (s3 / send-02
                  :ARG0 (f / free-04
                        :ARG1 s
                        :ARG1-of (f2 / find-01
                              :ARG0 s)
                        :mod (n / new))
                  :ARG1 s
                  :ARG2 (r / round-03
                        :ARG1 s
                        :ARG2 (b / bend)))))

# ::node	0	and	3-4
# ::node	0.0	epilepsy	2-3
# ::node	0.0.0	she	0-1
# ::node	0.1	depress-01	6-7
# ::node	0.1.0	manic	5-6
# ::node	0.1.1	problem	11-12
# ::node	0.1.1.0	anger	10-11
# ::node	0.1.1.1	huge	9-10
# ::root	0	and
# ::edge	and	op1	epilepsy	0	0.0	
# ::edge	and	op2	depress-01	0	0.1	
# ::edge	depress-01	ARG1	she	0.1	0.0.0	
# ::edge	depress-01	accompanier	problem	0.1	0.1.1	
# ::edge	depress-01	mod	manic	0.1	0.1.0	
# ::edge	epilepsy	domain	she	0.0	0.0.0	
# ::edge	problem	mod	huge	0.1.1	0.1.1.1	
# ::edge	problem	topic	anger	0.1.1	0.1.1.0	
(a / and
      :op1 (e / epilepsy
            :domain (s / she))
      :op2 (d / depress-01
            :ARG1 s
            :mod (m / manic)
            :accompanier (p / problem
                  :topic (a2 / anger)
                  :mod (h / huge))))

# ::node	0	contrast-01	0-1
# ::node	0.0	think-01	2-3
# ::node	0.0.0	he	1-2
# ::node	0.0.1	possible-01	10-11
# ::node	0.0.1.0	have-03	
# ::node	0.0.1.0.0	no-one	
# ::node	0.0.1.0.1	i	
# ::node	0.0.1.1	possible-01	
# ::node	0.0.1.1.0	-	8-9
# ::node	0.0.1.1.1	have-03	6-7
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	think-01	0	0.0	
# ::edge	have-03	ARG0	he	0.0.1.1.1	0.0.0	
# ::edge	have-03	ARG0	no-one	0.0.1.0	0.0.1.0.0	
# ::edge	have-03	ARG1	i	0.0.1.0	0.0.1.0.1	
# ::edge	have-03	ARG1	i	0.0.1.1.1	0.0.1.0.1	
# ::edge	possible-01	ARG1	have-03	0.0.1	0.0.1.0	
# ::edge	possible-01	ARG1	have-03	0.0.1.1	0.0.1.1.1	
# ::edge	possible-01	condition	possible-01	0.0.1	0.0.1.1	
# ::edge	possible-01	polarity	-	0.0.1.1	0.0.1.1.0	
# ::edge	think-01	ARG0	he	0.0	0.0.0	
# ::edge	think-01	ARG1	possible-01	0.0	0.0.1	
(c / contrast-01
      :ARG2 (t / think-01
            :ARG0 (h / he)
            :ARG1 (p / possible-01
                  :ARG1 (h2 / have-03
                        :ARG0 (n / no-one)
                        :ARG1 (i / i))
                  :condition (p2 / possible-01 :polarity -
                        :ARG1 (h3 / have-03
                              :ARG0 h
                              :ARG1 i)))))

# ::node	0	believe-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	need-01	5-6
# ::node	0.1.0	child	4-5
# ::node	0.1.0.0	every	3-4
# ::node	0.1.1	person	
# ::node	0.1.1.0	both	6-7
# ::node	0.1.1.1	have-rel-role-91	7-8
# ::node	0.1.1.1.0	parent	7-8
# ::node	0.1.2	or	12-13
# ::node	0.1.2.0	together	
# ::node	0.1.2.1	together	11-12
# ::node	0.1.2.1.0	-	14-14
# ::root	0	believe-01
# ::edge	believe-01	ARG0	i	0	0.0	
# ::edge	believe-01	ARG1	need-01	0	0.1	
# ::edge	child	mod	every	0.1.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG1	child	0.1.1.1	0.1.0	
# ::edge	have-rel-role-91	ARG2	parent	0.1.1.1	0.1.1.1.0	
# ::edge	need-01	ARG0	child	0.1	0.1.0	
# ::edge	need-01	ARG1	person	0.1	0.1.1	
# ::edge	need-01	concession	or	0.1	0.1.2	
# ::edge	or	op1	together	0.1.2	0.1.2.0	
# ::edge	or	op2	together	0.1.2	0.1.2.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1	0.1.1.1	
# ::edge	person	mod	both	0.1.1	0.1.1.0	
# ::edge	together	domain	person	0.1.2.0	0.1.1	
# ::edge	together	domain	person	0.1.2.1	0.1.1	
# ::edge	together	polarity	-	0.1.2.1	0.1.2.1.0	
(b / believe-01
      :ARG0 (i / i)
      :ARG1 (n / need-01
            :ARG0 (c / child
                  :mod (e / every))
            :ARG1 (p / person
                  :mod (b2 / both)
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 c
                        :ARG2 (p2 / parent)))
            :concession (o / or
                  :op1 (t / together
                        :domain p)
                  :op2 (t2 / together :polarity -
                        :domain p))))

# ::node	0	bad-07	9-10
# ::node	0.0	threaten-01	3-4
# ::node	0.0.0	person	
# ::node	0.0.0.0	have-rel-role-91	
# ::node	0.0.0.0.0	significant-other	
# ::node	0.0.0.0.1	ex	1-2
# ::node	0.0.1	you	4-5
# ::node	0.0.2	use-01	5-6
# ::node	0.0.2.0	person	
# ::node	0.0.2.0.0	have-rel-role-91	7-8
# ::node	0.0.2.0.0.0	son	7-8
# ::node	0.1	very	
# ::root	0	bad-07
# ::edge	bad-07	ARG1	threaten-01	0	0.0	
# ::edge	bad-07	degree	very	0	0.1	
# ::edge	have-rel-role-91	ARG1	you	0.0.0.0	0.0.1	
# ::edge	have-rel-role-91	ARG1	you	0.0.2.0.0	0.0.1	
# ::edge	have-rel-role-91	ARG2	significant-other	0.0.0.0	0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	son	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	have-rel-role-91	time	ex	0.0.0.0	0.0.0.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.2.0	0.0.2.0.0	
# ::edge	threaten-01	ARG0	person	0.0	0.0.0	
# ::edge	threaten-01	ARG2	you	0.0	0.0.1	
# ::edge	threaten-01	ARG2-of	use-01	0.0	0.0.2	
# ::edge	use-01	ARG0	person	0.0.2	0.0.0	
# ::edge	use-01	ARG1	person	0.0.2	0.0.2.0	
(b / bad-07
      :ARG1 (t / threaten-01
            :ARG0 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 y
                        :ARG2 (s2 / significant-other)
                        :time (e / ex)))
            :ARG2 (y / you)
            :ARG2-of (u / use-01
                  :ARG0 p
                  :ARG1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 y
                              :ARG2 (s / son)))))
      :degree (v / very))

# ::node	0	do-02	1-2
# ::node	0.0	i	2-3
# ::node	0.1	amr-unknown	
# ::node	0.2	move-01	5-6
# ::node	0.2.0	life	9-10
# ::root	0	do-02
# ::edge	do-02	ARG0	i	0	0.0	
# ::edge	do-02	ARG1	amr-unknown	0	0.1	
# ::edge	do-02	ARG2-of	move-01	0	0.2	
# ::edge	life	poss	i	0.2.0	0.0	
# ::edge	move-01	ARG0	i	0.2	0.0	
# ::edge	move-01	topic	life	0.2	0.2.0	
(d / do-02
      :ARG0 (i / i)
      :ARG1 (a / amr-unknown)
      :ARG2-of (m / move-01
            :ARG0 i
            :topic (l / life
                  :poss i)))

# ::node	0	right-05	3-4
# ::node	0.0	you	0-1
# ::node	0.1	and	9-10
# ::node	0.1.0	live-01	5-6
# ::node	0.1.0.0	life	8-9
# ::node	0.1.1	happy	11-12
# ::node	0.2	cause-01	
# ::node	0.2.0	cave-01	16-17
# ::node	0.2.0.0	-	
# ::node	0.2.0.1	cause-01	
# ::node	0.2.0.1.0	threaten-01	19-20
# ::node	0.2.0.1.0.0	he	
# ::root	0	right-05
# ::edge	and	op1	live-01	0.1	0.1.0	
# ::edge	and	op2	happy	0.1	0.1.1	
# ::edge	cause-01	ARG0	threaten-01	0.2.0.1	0.2.0.1.0	
# ::edge	cause-01	ARG1	cave-01	0.2	0.2.0	
# ::edge	cave-01	ARG1	you	0.2.0	0.0	
# ::edge	cave-01	ARG1-of	cause-01	0.2.0	0.2.0.1	
# ::edge	cave-01	polarity	-	0.2.0	0.2.0.0	
# ::edge	happy	domain	you	0.1.1	0.0	
# ::edge	life	poss	you	0.1.0.0	0.0	
# ::edge	live-01	ARG0	you	0.1.0	0.0	
# ::edge	live-01	ARG1	life	0.1.0	0.1.0.0	
# ::edge	right-05	ARG0-of	cause-01	0	0.2	
# ::edge	right-05	ARG1	you	0	0.0	
# ::edge	right-05	ARG2	and	0	0.1	
# ::edge	threaten-01	ARG0	he	0.2.0.1.0	0.2.0.1.0.0	
(r / right-05
  :ARG1 (y / you)
  :ARG2 (a / and
          :op1 (l / live-01
                 :ARG0 y
                 :ARG1 (l2 / life
                         :poss y))
          :op2 (h2 / happy
                 :domain y))
  :ARG0-of (c / cause-01
             :ARG1 (c2 / cave-01
                     :ARG1 y
                     :polarity -
                     :ARG1-of (c3 / cause-01
                                :ARG0 (t / threaten-01
                                        :ARG0 (h3 / he))))))

# ::node	0	obligate-01	
# ::node	0.0	give-in-09	3-4
# ::node	0.0.0	-	
# ::node	0.0.1	you	0-1
# ::node	0.0.2	that	6-7
# ::node	0.1	cause-01	
# ::node	0.1.0	escalate-01	11-12
# ::node	0.1.0.0	it	8-9
# ::node	0.1.0.1	just	10-11
# ::node	0.1.0.2	give-in-09	
# ::root	0	obligate-01
# ::edge	cause-01	ARG0	escalate-01	0.1	0.1.0	
# ::edge	escalate-01	ARG1	it	0.1.0	0.1.0.0	
# ::edge	escalate-01	condition	give-in-09	0.1.0	0.1.0.2	
# ::edge	escalate-01	mod	just	0.1.0	0.1.0.1	
# ::edge	give-in-09	ARG0	you	0.0	0.0.1	
# ::edge	give-in-09	ARG0	you	0.1.0.2	0.0.1	
# ::edge	give-in-09	ARG1	that	0.0	0.0.2	
# ::edge	give-in-09	ARG1	that	0.1.0.2	0.0.2	
# ::edge	give-in-09	polarity	-	0.0	0.0.0	
# ::edge	obligate-01	ARG1	give-in-09	0	0.0	
# ::edge	obligate-01	ARG1-of	cause-01	0	0.1	
(o3 / obligate-01
      :ARG1 (g2 / give-in-09 :polarity -
            :ARG0 (y / you)
            :ARG1 (t / that))
      :ARG1-of (c2 / cause-01
            :ARG0 (e / escalate-01
                  :ARG1 (i / it)
                  :mod (j / just)
                  :condition (g3 / give-in-09
                        :ARG0 y
                        :ARG1 t))))

# ::node	0	multi-sentence	
# ::node	0.0	say-01	1-2
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	other	0-1
# ::node	0.0.1	thing	2-3
# ::node	0.0.1.0	resemble-01	
# ::node	0.0.1.0.0	kill-01	10-11
# ::node	0.0.1.0.0.0	i	6-7
# ::node	0.0.1.0.0.1	leave-15	14-15
# ::node	0.0.1.0.0.1.0	you	13-14
# ::node	0.1	get-through-12	
# ::node	0.1.0	interrogative	
# ::node	0.1.1	it	19-20
# ::node	0.1.2	you	
# ::root	0	multi-sentence
# ::edge	get-through-12	ARG0	it	0.1	0.1.1	
# ::edge	get-through-12	ARG1	you	0.1	0.1.2	
# ::edge	get-through-12	mode	interrogative	0.1	0.1.0	
# ::edge	kill-01	ARG0	i	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	kill-01	ARG1	i	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	kill-01	condition	leave-15	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	leave-15	ARG0	you	0.0.1.0.0.1	0.0.1.0.0.1.0	
# ::edge	leave-15	ARG1	i	0.0.1.0.0.1	0.0.1.0.0.0	
# ::edge	multi-sentence	snt1	say-01	0	0.0	
# ::edge	multi-sentence	snt2	get-through-12	0	0.1	
# ::edge	person	mod	other	0.0.0	0.0.0.0	
# ::edge	resemble-01	ARG2	kill-01	0.0.1.0	0.0.1.0.0	
# ::edge	say-01	ARG0	person	0.0	0.0.0	
# ::edge	say-01	ARG1	thing	0.0	0.0.1	
# ::edge	thing	ARG1-of	resemble-01	0.0.1	0.0.1.0	
(m / multi-sentence
      :snt1 (s / say-01
            :ARG0 (p / person
                  :mod (o / other))
            :ARG1 (t / thing
                  :ARG1-of (r / resemble-01
                        :ARG2 (k / kill-01
                              :ARG0 (i2 / i)
                              :ARG1 i2
                              :condition (l / leave-15
                                    :ARG0 (y2 / you)
                                    :ARG1 i2)))))
      :snt2 (g / get-through-12 :mode interrogative
            :ARG0 (i / it)
            :ARG1 (y / you)))

# ::node	0	contrast-01	13-14
# ::node	0.0	see-01	9-10
# ::node	0.0.0	he	1-2
# ::node	0.0.1	regardless	11-12
# ::node	0.0.2	love-01	3-4
# ::node	0.0.2.0	person	
# ::node	0.0.2.0.0	have-rel-role-91	5-6
# ::node	0.0.2.0.0.0	son	5-6
# ::node	0.0.2.1	real	2-3
# ::node	0.1	method	20-21
# ::node	0.1.0	control-01	19-20
# ::node	0.1.1	typical-02	18-19
# ::node	0.1.2	just	16-17
# ::node	0.1.3	use-01	25-26
# ::node	0.1.3.0	person	
# ::node	0.1.4	this	14-15
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	see-01	0	0.0	
# ::edge	contrast-01	ARG2	method	0	0.1	
# ::edge	have-rel-role-91	ARG1	he	0.0.2.0.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	son	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	love-01	ARG0	he	0.0.2	0.0.0	
# ::edge	love-01	ARG1	person	0.0.2	0.0.2.0	
# ::edge	love-01	manner	real	0.0.2	0.0.2.1	
# ::edge	method	ARG1-of	typical-02	0.1	0.1.1	
# ::edge	method	ARG1-of	use-01	0.1	0.1.3	
# ::edge	method	domain	this	0.1	0.1.4	
# ::edge	method	mod	just	0.1	0.1.2	
# ::edge	method	purpose	control-01	0.1	0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.2.0	0.0.2.0.0	
# ::edge	person	example	he	0.1.3.0	0.0.0	
# ::edge	see-01	ARG0	he	0.0	0.0.0	
# ::edge	see-01	ARG1	person	0.0	0.0.2.0	
# ::edge	see-01	concession	regardless	0.0	0.0.1	
# ::edge	see-01	condition	love-01	0.0	0.0.2	
# ::edge	use-01	ARG0	person	0.1.3	0.1.3.0	
(c / contrast-01
      :ARG1 (s / see-01
            :ARG0 (h / he)
            :ARG1 p2
            :concession (r / regardless)
            :condition (l / love-01
                  :ARG0 h
                  :ARG1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 h
                              :ARG2 (s2 / son)))
                  :manner (r2 / real)))
      :ARG2 (m / method
            :purpose (c2 / control-01)
            :ARG1-of (t / typical-02)
            :mod (j / just)
            :ARG1-of (u / use-01
                  :ARG0 (p / person
                        :example h))
            :domain (t2 / this)))

# ::node	0	meet-03	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	kind	2-3
# ::node	0.2.0	person	
# ::node	0.2.1	all	1-2
# ::root	0	meet-03
# ::edge	kind	mod	all	0.2	0.2.1	
# ::edge	kind	mod	person	0.2	0.2.0	
# ::edge	meet-03	ARG0	you	0	0.1	
# ::edge	meet-03	ARG1	kind	0	0.2	
# ::edge	meet-03	mode	imperative	0	0.0	
(m / meet-03 :mode imperative
      :ARG0 (y / you)
      :ARG1 (k / kind
            :mod (p / person)
            :mod (a / all)))

# ::node	0	date-02	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::root	0	date-02
# ::edge	date-02	ARG0	you	0	0.1	
# ::edge	date-02	mode	imperative	0	0.0	
(d / date-02 :mode imperative
      :ARG0 (y / you))

# ::node	0	get-03	2-3
# ::node	0.0	and	7-8
# ::node	0.0.0	keep-02	8-9
# ::node	0.0.0.0	strong-02	6-7
# ::node	0.0.1	keep-02	5-6
# ::node	0.0.1.0	carry-on-02	9-10
# ::node	0.0.1.0.0	live-01	
# ::node	0.1	hard-02	3-4
# ::root	0	get-03
# ::edge	and	op1	keep-02	0.0	0.0.0	
# ::edge	and	op2	keep-02	0.0	0.0.1	
# ::edge	carry-on-02	ARG1	live-01	0.0.1.0	0.0.1.0.0	
# ::edge	get-03	ARG1	and	0	0.0	
# ::edge	get-03	ARG2	hard-02	0	0.1	
# ::edge	keep-02	ARG1	carry-on-02	0.0.1	0.0.1.0	
# ::edge	keep-02	ARG1	strong-02	0.0.0	0.0.0.0	
(g / get-03
      :ARG1 (a / and
            :op1 (k / keep-02
                  :ARG1 (s / strong-02))
            :op2 (k2 / keep-02
                  :ARG1 (c / carry-on-02
                        :ARG1 (l / live-01))))
      :ARG2 (h / hard-02))

# ::node	0	multi-sentence	
# ::node	0.0	think-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	contrast-01	14-15
# ::node	0.0.1.0	feel-01	6-7
# ::node	0.0.1.0.0	person	3-4
# ::node	0.0.1.0.0.0	lot	3-4
# ::node	0.0.1.0.0.0.0	more	4-5
# ::node	0.0.1.0.1	way	9-10
# ::node	0.0.1.0.1.0	same-01	8-9
# ::node	0.0.1.0.1.0.0	feel-01	58-59
# ::node	0.0.1.0.1.0.0.0	you	11-12
# ::node	0.0.1.1	medicate-01	15-16
# ::node	0.0.1.1.0	use-01	18-19
# ::node	0.0.1.1.0.0	person	
# ::node	0.0.1.1.0.0.0	have-rel-role-91	19-20
# ::node	0.0.1.1.0.0.0.0	friend	19-20
# ::node	0.1	contrast-01	
# ::node	0.1.0	solution	28-29
# ::node	0.1.0.0	-	
# ::node	0.1.0.1	as-such	
# ::node	0.1.0.2	probable	23-24
# ::node	0.1.1	good-02	41-42
# ::node	0.1.1.0	be-located-at-91	
# ::node	0.1.1.0.0	you	53-54
# ::node	0.1.1.0.1	around	34-35
# ::node	0.1.1.0.1.0	person	
# ::node	0.1.1.0.1.0.0	have-rel-role-91	35-36
# ::node	0.1.1.0.1.0.0.0	friend	35-36
# ::node	0.1.1.0.2	depress-01	38-39
# ::node	0.1.1.1	more	
# ::node	0.1.1.2	and	45-46
# ::node	0.1.1.2.0	alone	44-45
# ::node	0.1.1.3	definite	40-41
# ::node	0.2	have-condition-91	
# ::node	0.2.0	feel-01	
# ::node	0.2.0.0	you	
# ::node	0.2.0.1	free-04	59-60
# ::node	0.2.0.1.0	PM	61-62
# ::node	0.2.1	fancy-02	54-55
# ::node	0.2.1.0	chat-01	56-57
# ::node	0.2.2	way	50-51
# ::node	0.2.2.0	either	49-50
# ::root	0	multi-sentence
# ::edge	alone	domain	you	0.1.1.2.0	0.1.1.0.0	
# ::edge	and	op1	alone	0.1.1.2	0.1.1.2.0	
# ::edge	and	op2	depress-01	0.1.1.2	0.1.1.0.2	
# ::edge	around	op1	person	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	be-located-at-91	ARG1	you	0.1.1.0	0.1.1.0.0	
# ::edge	be-located-at-91	ARG2	around	0.1.1.0	0.1.1.0.1	
# ::edge	be-located-at-91	time	depress-01	0.1.1.0	0.1.1.0.2	
# ::edge	chat-01	ARG0	you	0.2.1.0	0.2.0.0	
# ::edge	contrast-01	ARG1	feel-01	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG1	solution	0.1	0.1.0	
# ::edge	contrast-01	ARG2	good-02	0.1	0.1.1	
# ::edge	contrast-01	ARG2	medicate-01	0.0.1	0.0.1.1	
# ::edge	depress-01	ARG1	you	0.1.1.0.2	0.1.1.0.0	
# ::edge	fancy-02	ARG0	you	0.2.1	0.2.0.0	
# ::edge	fancy-02	ARG1	chat-01	0.2.1	0.2.1.0	
# ::edge	feel-01	ARG0	person	0.0.1.0	0.0.1.0.0	
# ::edge	feel-01	ARG0	you	0.0.1.0.1.0.0	0.0.1.0.1.0.0.0	
# ::edge	feel-01	ARG0	you	0.2.0	0.2.0.0	
# ::edge	feel-01	ARG1	free-04	0.2.0	0.2.0.1	
# ::edge	feel-01	ARG1	way	0.0.1.0	0.0.1.0.1	
# ::edge	free-04	ARG1	you	0.2.0.1	0.2.0.0	
# ::edge	free-04	ARG3	PM	0.2.0.1	0.2.0.1.0	
# ::edge	good-02	ARG1	be-located-at-91	0.1.1	0.1.1.0	
# ::edge	good-02	compared-to	and	0.1.1	0.1.1.2	
# ::edge	good-02	degree	more	0.1.1	0.1.1.1	
# ::edge	good-02	mod	definite	0.1.1	0.1.1.3	
# ::edge	have-condition-91	ARG1	feel-01	0.2	0.2.0	
# ::edge	have-condition-91	ARG2	fancy-02	0.2	0.2.1	
# ::edge	have-condition-91	mod	way	0.2	0.2.2	
# ::edge	have-rel-role-91	ARG1	person	0.0.1.1.0.0.0	0.0.1.0.0	
# ::edge	have-rel-role-91	ARG1	you	0.1.1.0.1.0.0	0.1.1.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.1.1.0.0.0	0.0.1.1.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.1.1.0.1.0.0	0.1.1.0.1.0.0.0	
# ::edge	lot	degree	more	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	medicate-01	ARG0	person	0.0.1.1	0.0.1.0.0	
# ::edge	medicate-01	ARG1	person	0.0.1.1	0.0.1.0.0	
# ::edge	medicate-01	manner	use-01	0.0.1.1	0.0.1.1.0	
# ::edge	multi-sentence	snt1	think-01	0	0.0	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	multi-sentence	snt3	have-condition-91	0	0.2	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.1.1.0.0	0.0.1.1.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	person	quant	lot	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	same-01	ARG2	feel-01	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	solution	domain	be-located-at-91	0.1.0	0.1.1.0	
# ::edge	solution	mod	as-such	0.1.0	0.1.0.1	
# ::edge	solution	mod	probable	0.1.0	0.1.0.2	
# ::edge	solution	polarity	-	0.1.0	0.1.0.0	
# ::edge	think-01	ARG0	i	0.0	0.0.0	
# ::edge	think-01	ARG1	contrast-01	0.0	0.0.1	
# ::edge	use-01	ARG0	person	0.0.1.1.0	0.0.1.0.0	
# ::edge	use-01	ARG1	person	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	way	ARG1-of	same-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	way	mod	either	0.2.2	0.2.2.0	
(m / multi-sentence
      :snt1 (t / think-01
            :ARG0 (i / i)
            :ARG1 (c / contrast-01
                  :ARG1 (f / feel-01
                        :ARG0 (p / person
                              :quant (l / lot
                                    :degree (m2 / more)))
                        :ARG1 (w / way
                              :ARG1-of (s / same-01
                                    :ARG2 (f2 / feel-01
                                          :ARG0 (y / you)))))
                  :ARG2 (m3 / medicate-01
                        :ARG0 p
                        :ARG1 p
                        :manner (u / use-01
                              :ARG0 p
                              :ARG1 (p4 / person
                                    :ARG0-of (h2 / have-rel-role-91
                                          :ARG1 p
                                          :ARG2 (f3 / friend)))))))
      :snt2 (c2 / contrast-01
            :ARG1 (s2 / solution :polarity -
                  :mod (a / as-such)
                  :domain b
                  :mod (p3 / probable))
            :ARG2 (g / good-02
                  :ARG1 (b / be-located-at-91
                        :ARG1 (y2 / you)
                        :ARG2 (a2 / around
                              :op1 (p5 / person
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG1 y2
                                          :ARG2 (f4 / friend))))
                        :time (d / depress-01
                              :ARG1 y2))
                  :degree (m4 / more)
                  :compared-to (a3 / and
                        :op1 (a4 / alone
                              :domain y2)
                        :op2 d)
                  :mod (d2 / definite)))
      :snt3 (h / have-condition-91
            :ARG1 (f5 / feel-01
                  :ARG0 (y3 / you)
                  :ARG1 (f6 / free-04
                        :ARG1 y3
                        :ARG3 (p2 / PM)))
            :ARG2 (f7 / fancy-02
                  :ARG0 y3
                  :ARG1 (c3 / chat-01
                        :ARG0 y3))
            :mod (w2 / way
                  :mod (e / either))))

# ::node	0	like-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	near-01	6-7
# ::node	0.1.0	most	
# ::node	0.1.1	possible-01	8-9
# ::node	0.2	cause-01	
# ::node	0.2.0	like-01	13-14
# ::node	0.2.0.0	-	
# ::node	0.2.0.1	count-01	
# ::node	0.2.0.1.0	copper	17-18
# ::node	0.2.0.1.1	day	19-20
# ::node	0.2.0.1.1.0	all	18-19
# ::root	0	like-01
# ::edge	cause-01	ARG0	like-01	0.2	0.2.0	
# ::edge	count-01	ARG0	i	0.2.0.1	0.0	
# ::edge	count-01	ARG1	copper	0.2.0.1	0.2.0.1.0	
# ::edge	count-01	duration	day	0.2.0.1	0.2.0.1.1	
# ::edge	day	mod	all	0.2.0.1.1	0.2.0.1.1.0	
# ::edge	like-01	ARG0	i	0	0.0	
# ::edge	like-01	ARG0	i	0.2.0	0.0	
# ::edge	like-01	ARG1	count-01	0.2.0	0.2.0.1	
# ::edge	like-01	ARG1	near-01	0	0.1	
# ::edge	like-01	ARG1-of	cause-01	0	0.2	
# ::edge	like-01	polarity	-	0.2.0	0.2.0.0	
# ::edge	near-01	ARG1	i	0.1	0.0	
# ::edge	near-01	compared-to	possible-01	0.1	0.1.1	
# ::edge	near-01	degree	most	0.1	0.1.0	
# ::edge	possible-01	ARG1	near-01	0.1.1	0.1	
(l / like-01
      :ARG0 (i / i)
      :ARG1 (n2 / near-01
            :ARG1 i
            :degree (m / most)
            :compared-to (p / possible-01
                  :ARG1 n2))
      :ARG1-of (c / cause-01
            :ARG0 (l2 / like-01 :polarity -
                  :ARG0 i
                  :ARG1 (c2 / count-01
                        :ARG0 i
                        :ARG1 (c3 / copper)
                        :duration (d2 / day
                              :mod (a / all))))))

# ::node	0	get-03	2-3
# ::node	0.0	person	
# ::node	0.1	lazy	3-4
# ::root	0	get-03
# ::edge	get-03	ARG1	person	0	0.0	
# ::edge	get-03	ARG2	lazy	0	0.1	
(g / get-03
      :ARG1 (p / person)
      :ARG2 (l / lazy))

# ::node	0	law	1-2
# ::node	0.0	-	1-2
# ::node	0.1	pay-01	3-4
# ::node	0.1.0	amount	5-6
# ::node	0.1.0.0	certain	4-5
# ::node	0.1.1	coin	9-10
# ::node	0.1.1.0	load	7-8
# ::node	0.1.2	possible-01	14-15
# ::node	0.1.2.0	pay-01	16-17
# ::node	0.1.2.0.0	you	13-14
# ::node	0.1.2.0.1	something	17-18
# ::node	0.1.2.0.1.0	monetary-quantity	
# ::node	0.1.2.0.1.0.0	30	
# ::node	0.1.2.0.1.0.1	pence	
# ::node	0.1.2.0.2	monetary-quantity	
# ::node	0.1.2.0.2.0	1	
# ::node	0.1.2.0.2.1	pence	
# ::node	0.1.2.0.3	only	15-16
# ::root	0	law
# ::edge	amount	quant	certain	0.1.0	0.1.0.0	
# ::edge	coin	quant	load	0.1.1	0.1.1.0	
# ::edge	law	domain	pay-01	0	0.1	
# ::edge	law	polarity	-	0	0.0	
# ::edge	monetary-quantity	quant	1	0.1.2.0.2	0.1.2.0.2.0	
# ::edge	monetary-quantity	quant	30	0.1.2.0.1.0	0.1.2.0.1.0.0	
# ::edge	monetary-quantity	unit	pence	0.1.2.0.1.0	0.1.2.0.1.0.1	
# ::edge	monetary-quantity	unit	pence	0.1.2.0.2	0.1.2.0.2.1	
# ::edge	pay-01	ARG0	you	0.1.2.0	0.1.2.0.0	
# ::edge	pay-01	ARG1	amount	0.1	0.1.0	
# ::edge	pay-01	ARG1	something	0.1.2.0	0.1.2.0.1	
# ::edge	pay-01	example	possible-01	0.1	0.1.2	
# ::edge	pay-01	manner	coin	0.1	0.1.1	
# ::edge	pay-01	manner	monetary-quantity	0.1.2.0	0.1.2.0.2	
# ::edge	pay-01	mod	only	0.1.2.0	0.1.2.0.3	
# ::edge	possible-01	ARG1	pay-01	0.1.2	0.1.2.0	
# ::edge	something	example	monetary-quantity	0.1.2.0.1	0.1.2.0.1.0	
(l3 / law :polarity -
      :domain (p / pay-01
            :ARG1 (a / amount
                  :quant (c / certain))
            :manner (c2 / coin
                  :quant (l / load))
            :example (p2 / possible-01
                  :ARG1 (p3 / pay-01
                        :ARG0 (y / you)
                        :ARG1 (s / something
                              :example (m / monetary-quantity :quant 30
                                    :unit (p4 / pence)))
                        :manner (m2 / monetary-quantity :quant 1
                              :unit (p5 / pence))
                        :mod (o / only)))))

# ::node	0	tell-01	11-12
# ::node	0.0	they	9-10
# ::node	0.1	get-05	14-15
# ::node	0.1.0	on	5-6
# ::node	0.2	you	
# ::node	0.3	just	10-11
# ::node	0.4	cause-01	
# ::node	0.4.0	lazy	18-19
# ::node	0.4.0.0	hell	20-21
# ::node	0.5	take-01	0-1
# ::node	0.5.0	imperative	
# ::node	0.5.1	you	12-13
# ::node	0.5.2	note	4-5
# ::node	0.5.2.0	monetary-quantity	
# ::node	0.5.2.0.0	20	3-4
# ::node	0.5.2.0.1	pound	
# ::node	0.5.3	bus	7-8
# ::root	0	tell-01
# ::edge	cause-01	ARG0	lazy	0.4	0.4.0	
# ::edge	get-05	ARG1	you	0.1	0.2	
# ::edge	get-05	ARG2	on	0.1	0.1.0	
# ::edge	lazy	degree	hell	0.4.0	0.4.0.0	
# ::edge	lazy	domain	they	0.4.0	0.0	
# ::edge	monetary-quantity	quant	20	0.5.2.0	0.5.2.0.0	
# ::edge	monetary-quantity	unit	pound	0.5.2.0	0.5.2.0.1	
# ::edge	note	quant	monetary-quantity	0.5.2	0.5.2.0	
# ::edge	take-01	ARG0	you	0.5	0.5.1	
# ::edge	take-01	ARG1	note	0.5	0.5.2	
# ::edge	take-01	location	bus	0.5	0.5.3	
# ::edge	take-01	mode	imperative	0.5	0.5.0	
# ::edge	tell-01	ARG0	they	0	0.0	
# ::edge	tell-01	ARG1	get-05	0	0.1	
# ::edge	tell-01	ARG1-of	cause-01	0	0.4	
# ::edge	tell-01	ARG2	you	0	0.2	
# ::edge	tell-01	condition	take-01	0	0.5	
# ::edge	tell-01	mod	just	0	0.3	
(t4 / tell-01
      :ARG0 (t3 / they)
      :ARG1 (g / get-05
            :ARG1 y2
            :ARG2 (o / on))
      :ARG2 (y2 / you)
      :mod (j / just)
      :ARG1-of (c / cause-01
            :ARG0 (l / lazy
                  :domain t3
                  :degree (h / hell)))
      :condition (t / take-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / note
                  :quant (m2 / monetary-quantity :quant 20
                        :unit (p / pound)))
            :location (b / bus)))

# ::node	0	want-01	3-4
# ::node	0.0	and	
# ::node	0.0.0	person	2-3
# ::node	0.0.0.0	drive-01	2-3
# ::node	0.0.0.0.0	bus	1-2
# ::node	0.0.1	person	8-9
# ::node	0.0.1.0	till	8-9
# ::node	0.0.2	person	17-18
# ::node	0.0.2.0	deliver-01	17-18
# ::node	0.0.2.0.0	food	19-20
# ::node	0.0.2.0.0.0	you	
# ::node	0.1	change	5-6
# ::node	0.1.0	exact	4-5
# ::root	0	want-01
# ::edge	and	op1	person	0.0	0.0.0	
# ::edge	and	op2	person	0.0	0.0.1	
# ::edge	and	op3	person	0.0	0.0.2	
# ::edge	change	mod	exact	0.1	0.1.0	
# ::edge	deliver-01	ARG1	food	0.0.2.0	0.0.2.0.0	
# ::edge	drive-01	ARG1	bus	0.0.0.0	0.0.0.0.0	
# ::edge	food	poss	you	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	person	ARG0-of	deliver-01	0.0.2	0.0.2.0	
# ::edge	person	ARG0-of	drive-01	0.0.0	0.0.0.0	
# ::edge	person	location	till	0.0.1	0.0.1.0	
# ::edge	want-01	ARG0	and	0	0.0	
# ::edge	want-01	ARG1	change	0	0.1	
(w / want-01
      :ARG0 (a / and
            :op1 (p / person
                  :ARG0-of (d / drive-01
                        :ARG1 (b / bus)))
            :op2 (p2 / person
                  :location (t / till))
            :op3 (p3 / person
                  :ARG0-of (d2 / deliver-01
                        :ARG1 (f / food
                              :poss (y / you)))))
      :ARG1 (c / change
            :mod (e / exact)))

# ::node	0	and	6-7
# ::node	0.0	professional	25-26
# ::node	0.0.0	-	3-3
# ::node	0.0.1	health	24-25
# ::node	0.0.2	i	0-1
# ::node	0.1	possible-01	8-9
# ::node	0.1.0	speak-01	10-11
# ::node	0.1.0.0	experience-01	13-14
# ::node	0.1.0.0.0	personal-02	12-13
# ::node	0.1.0.1	only	9-10
# ::node	0.1.1	cause-01	
# ::node	0.1.1.0	suggest-01	19-20
# ::node	0.1.1.0.0	see-01	21-22
# ::node	0.1.1.0.0.0	you	20-21
# ::node	0.1.1.0.0.1	professional	5-6
# ::node	0.1.1.0.0.1.0	health	4-5
# ::node	0.1.1.0.0.1.1	qualify-02	23-24
# ::node	0.1.1.0.0.2	and	29-30
# ::node	0.1.1.0.0.2.0	thing	28-29
# ::node	0.1.1.0.0.2.0.0	feel-01	28-29
# ::node	0.1.1.0.0.2.0.0.0	depression	32-33
# ::node	0.1.1.0.0.2.1	worry-02	30-31
# ::node	0.1.1.0.1	strong-02	18-19
# ::root	0	and
# ::edge	and	op1	professional	0	0.0	
# ::edge	and	op1	thing	0.1.1.0.0.2	0.1.1.0.0.2.0	
# ::edge	and	op2	possible-01	0	0.1	
# ::edge	and	op2	worry-02	0.1.1.0.0.2	0.1.1.0.0.2.1	
# ::edge	cause-01	ARG1	suggest-01	0.1.1	0.1.1.0	
# ::edge	experience-01	ARG0	i	0.1.0.0	0.0.2	
# ::edge	experience-01	ARG1-of	personal-02	0.1.0.0	0.1.0.0.0	
# ::edge	feel-01	ARG0	you	0.1.1.0.0.2.0.0	0.1.1.0.0.0	
# ::edge	feel-01	ARG2	depression	0.1.1.0.0.2.0.0	0.1.1.0.0.2.0.0.0	
# ::edge	personal-02	ARG2	i	0.1.0.0.0	0.0.2	
# ::edge	possible-01	ARG0-of	cause-01	0.1	0.1.1	
# ::edge	possible-01	ARG1	speak-01	0.1	0.1.0	
# ::edge	professional	ARG1-of	qualify-02	0.1.1.0.0.1	0.1.1.0.0.1.1	
# ::edge	professional	domain	i	0.0	0.0.2	
# ::edge	professional	mod	health	0.0	0.0.1	
# ::edge	professional	mod	health	0.1.1.0.0.1	0.1.1.0.0.1.0	
# ::edge	professional	polarity	-	0.0	0.0.0	
# ::edge	see-01	ARG0	you	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	see-01	ARG1	professional	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	see-01	topic	and	0.1.1.0.0	0.1.1.0.0.2	
# ::edge	speak-01	ARG0	i	0.1.0	0.0.2	
# ::edge	speak-01	mod	only	0.1.0	0.1.0.1	
# ::edge	speak-01	source	experience-01	0.1.0	0.1.0.0	
# ::edge	suggest-01	ARG0	i	0.1.1.0	0.0.2	
# ::edge	suggest-01	ARG1	see-01	0.1.1.0	0.1.1.0.0	
# ::edge	suggest-01	ARG1-of	strong-02	0.1.1.0	0.1.1.0.1	
# ::edge	suggest-01	ARG2	you	0.1.1.0	0.1.1.0.0.0	
# ::edge	thing	ARG1-of	feel-01	0.1.1.0.0.2.0	0.1.1.0.0.2.0.0	
# ::edge	worry-02	ARG0	you	0.1.1.0.0.2.1	0.1.1.0.0.0	
# ::edge	worry-02	ARG1	depression	0.1.1.0.0.2.1	0.1.1.0.0.2.0.0.0	
(a / and
      :op1 (p / professional :polarity -
            :mod (h / health)
            :domain (i / i))
      :op2 (p2 / possible-01
            :ARG1 (s / speak-01
                  :ARG0 i
                  :source (e / experience-01
                        :ARG0 i
                        :ARG1-of (p4 / personal-02
                              :ARG2 i))
                  :mod (o / only))
            :ARG0-of (c / cause-01
                  :ARG1 (s2 / suggest-01
                        :ARG0 i
                        :ARG1 (s3 / see-01
                              :ARG0 (y / you)
                              :ARG1 (p3 / professional
                                    :mod (h2 / health)
                                    :ARG1-of (q / qualify-02))
                              :topic (a2 / and
                                    :op1 (t / thing
                                          :ARG1-of (f / feel-01
                                                :ARG0 y
                                                :ARG2 (d / depression)))
                                    :op2 (w / worry-02
                                          :ARG0 y
                                          :ARG1 d)))
                        :ARG2 y
                        :ARG1-of (s4 / strong-02)))))

# ::node	0	obligate-01	
# ::node	0.0	interrogative	
# ::node	0.1	take-01	7-8
# ::node	0.1.0	someone	0-1
# ::node	0.1.1	note	9-10
# ::node	0.1.2	somewhere	1-2
# ::root	0	obligate-01
# ::edge	obligate-01	ARG1	someone	0	0.1.0	
# ::edge	obligate-01	ARG2	take-01	0	0.1	
# ::edge	obligate-01	mode	interrogative	0	0.0	
# ::edge	take-01	ARG0	someone	0.1	0.1.0	
# ::edge	take-01	ARG1	note	0.1	0.1.1	
# ::edge	take-01	location	somewhere	0.1	0.1.2	
(o / obligate-01 :mode interrogative
      :ARG1 s
      :ARG2 (t / take-01
            :ARG0 (s / someone)
            :ARG1 (n / note)
            :location (s2 / somewhere)))

# ::node	0	realize-01	3-4
# ::node	0.0	-	3-3
# ::node	0.1	interrogative	
# ::node	0.2	they	1-2
# ::node	0.3	get-01	8-9
# ::node	0.3.0	-	3-3
# ::node	0.3.1	you	5-6
# ::node	0.3.2	pile	9-10
# ::node	0.3.2.0	change	11-12
# ::node	0.3.3	bank	14-15
# ::root	0	realize-01
# ::edge	get-01	ARG0	you	0.3	0.3.1	
# ::edge	get-01	ARG1	pile	0.3	0.3.2	
# ::edge	get-01	ARG2	bank	0.3	0.3.3	
# ::edge	get-01	polarity	-	0.3	0.3.0	
# ::edge	pile	mod	change	0.3.2	0.3.2.0	
# ::edge	realize-01	ARG0	they	0	0.2	
# ::edge	realize-01	ARG1	get-01	0	0.3	
# ::edge	realize-01	mode	interrogative	0	0.1	
# ::edge	realize-01	polarity	-	0	0.0	
(r / realize-01 :polarity - :mode interrogative
      :ARG0 (t / they)
      :ARG1 (g / get-01 :polarity -
            :ARG0 (y / you)
            :ARG1 (p / pile
                  :mod (c / change))
            :ARG2 (b / bank)))

# ::node	0	multi-sentence	
# ::node	0.0	feel-01	2-3
# ::node	0.0.0	person	0-1
# ::node	0.0.0.0	most	0-1
# ::node	0.0.1	and	4-5
# ::node	0.0.1.0	intelligent-01	3-4
# ::node	0.0.1.0.0	-	17-17
# ::node	0.0.1.1	awkward	5-6
# ::node	0.0.2	get-05	9-10
# ::node	0.0.2.0	university	
# ::node	0.0.2.1	ordinal-entity	
# ::node	0.0.2.1.0	1	
# ::node	0.0.3	cause-01	
# ::node	0.0.3.0	alone	17-18
# ::node	0.0.3.0.0	-	17-17
# ::node	0.0.3.0.1	you	13-14
# ::node	0.0.3.0.2	definite	15-16
# ::node	0.1	contrast-01	20-21
# ::node	0.1.0	recommend-01	24-25
# ::node	0.1.0.0	i	11-12
# ::node	0.1.0.1	get-01	27-28
# ::node	0.1.0.1.0	you	26-27
# ::node	0.1.0.1.1	appointment-02	29-30
# ::node	0.1.0.1.1.0	service	34-35
# ::node	0.1.0.1.1.0.0	counsel-01	33-34
# ::node	0.1.0.1.1.0.1	university	
# ::node	0.1.0.2	really	23-24
# ::node	0.2	matter-01	40-41
# ::node	0.2.0	-	17-17
# ::node	0.2.1	tell-01	44-45
# ::node	0.2.1.0	anyone	42-43
# ::node	0.2.1.1	or	50-51
# ::node	0.2.1.1.0	depress-01	
# ::node	0.2.1.1.1	depress-01	49-50
# ::node	0.2.1.1.1.0	-	17-17
# ::node	0.2.1.2	you	45-46
# ::node	0.2.2	really	39-40
# ::node	0.3	and	62-63
# ::node	0.3.0	have-03	43-44
# ::node	0.3.0.0	you	47-48
# ::node	0.3.0.1	problem	58-59
# ::node	0.3.0.1.0	some	65-66
# ::node	0.3.0.2	obvious-01	55-56
# ::node	0.3.0.3	minute	61-62
# ::node	0.3.1	possible-01	63-64
# ::node	0.3.1.0	use-01	64-65
# ::node	0.3.1.0.0	support-01	66-67
# ::node	0.3.1.0.0.0	some	57-58
# ::node	0.4	important	72-73
# ::node	0.4.0	equal	
# ::node	0.4.0.0	-	17-17
# ::node	0.4.1	thing	75-76
# ::node	0.4.1.0	experience-01	75-76
# ::node	0.4.1.0.0	you	53-54
# ::node	0.4.2	thing	68-69
# ::node	0.4.2.0	label-01	68-69
# ::node	0.5	helpful-04	82-83
# ::node	0.5.0	and	78-79
# ::node	0.5.0.0	meditate-01	77-78
# ::node	0.5.0.1	exercise-02	79-80
# ::node	0.5.1	really	81-82
# ::node	0.5.2	cause-01	
# ::node	0.5.2.0	try-01	86-87
# ::node	0.5.2.0.0	you	94-95
# ::node	0.5.2.0.1	do-02	37-38
# ::node	0.6	contrast-01	91-92
# ::node	0.6.0	contrast-01	109-110
# ::node	0.6.0.0	obligate-01	
# ::node	0.6.0.0.0	engage-01	98-99
# ::node	0.6.0.0.0.0	you	137-138
# ::node	0.6.0.0.0.1	and	101-102
# ::node	0.6.0.0.0.1.0	help	100-101
# ::node	0.6.0.0.0.1.1	life	102-103
# ::node	0.6.0.0.0.1.1.0	general-02	104-105
# ::node	0.6.0.0.0.2	get-05	106-107
# ::node	0.6.0.0.0.2.0	somewhere	107-108
# ::node	0.6.0.1	beat-00	112-113
# ::node	0.6.0.1.0	-	17-17
# ::node	0.6.0.1.1	cause-01	
# ::node	0.6.0.1.1.0	feel-01	116-117
# ::node	0.6.0.1.1.0.0	motivate-01	117-118
# ::node	0.6.0.1.1.0.0.0	-	17-17
# ::node	0.6.0.1.1.0.0.1	do-02	88-89
# ::node	0.6.0.1.1.0.0.1.0	anything	120-121
# ::node	0.6.0.1.1.0.0.1.1	minute	123-124
# ::node	0.7	and	131-132
# ::node	0.7.0	feel-01	140-141
# ::node	0.7.0.0	person	125-126
# ::node	0.7.0.0.0	lot	125-126
# ::node	0.7.0.1	thing	
# ::node	0.7.0.1.0	resemble-01	
# ::node	0.7.0.1.0.0	this	130-131
# ::node	0.7.1	pass-03	135-136
# ::node	0.7.1.0	hope-01	132-133
# ::node	0.7.1.1	begin-01	138-139
# ::node	0.7.1.1.0	feel-01	128-129
# ::node	0.7.1.1.0.0	you	150-151
# ::node	0.7.1.1.0.1	good	141-142
# ::node	0.7.1.1.0.1.0	more	
# ::node	0.8	kind-01	144-145
# ::node	0.8.0	-	17-17
# ::node	0.8.1	you	
# ::node	0.8.2	worsen-01	152-153
# ::node	0.8.2.0	feel-01	151-152
# ::node	0.8.2.1	only	148-149
# ::node	0.9	and	158-159
# ::node	0.9.0	kind-01	155-156
# ::node	0.9.0.0	imperative	
# ::node	0.9.0.1	you	
# ::node	0.9.1	get-01	159-160
# ::node	0.9.1.0	imperative	
# ::node	0.9.1.1	help-01	161-162
# ::node	0.9.1.1.0	some	160-161
# ::root	0	multi-sentence
# ::edge	alone	domain	you	0.0.3.0	0.0.3.0.1	
# ::edge	alone	location	university	0.0.3.0	0.0.2.0	
# ::edge	alone	mod	definite	0.0.3.0	0.0.3.0.2	
# ::edge	alone	polarity	-	0.0.3.0	0.0.3.0.0	
# ::edge	and	op1	feel-01	0.7	0.7.0	
# ::edge	and	op1	have-03	0.3	0.3.0	
# ::edge	and	op1	help	0.6.0.0.0.1	0.6.0.0.0.1.0	
# ::edge	and	op1	intelligent-01	0.0.1	0.0.1.0	
# ::edge	and	op1	kind-01	0.9	0.9.0	
# ::edge	and	op1	meditate-01	0.5.0	0.5.0.0	
# ::edge	and	op2	awkward	0.0.1	0.0.1.1	
# ::edge	and	op2	exercise-02	0.5.0	0.5.0.1	
# ::edge	and	op2	get-01	0.9	0.9.1	
# ::edge	and	op2	life	0.6.0.0.0.1	0.6.0.0.0.1.1	
# ::edge	and	op2	pass-03	0.7	0.7.1	
# ::edge	and	op2	possible-01	0.3	0.3.1	
# ::edge	appointment-02	ARG0	you	0.1.0.1.1	0.1.0.1.0	
# ::edge	appointment-02	ARG1	service	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	beat-00	ARG1	you	0.6.0.1	0.6.0.0.0.0	
# ::edge	beat-00	ARG1-of	cause-01	0.6.0.1	0.6.0.1.1	
# ::edge	beat-00	polarity	-	0.6.0.1	0.6.0.1.0	
# ::edge	begin-01	ARG0	you	0.7.1.1	0.7.1.1.0.0	
# ::edge	begin-01	ARG1	feel-01	0.7.1.1	0.7.1.1.0	
# ::edge	cause-01	ARG0	feel-01	0.6.0.1.1	0.6.0.1.1.0	
# ::edge	cause-01	ARG1	alone	0.0.3	0.0.3.0	
# ::edge	cause-01	ARG1	try-01	0.5.2	0.5.2.0	
# ::edge	contrast-01	ARG1	obligate-01	0.6.0	0.6.0.0	
# ::edge	contrast-01	ARG2	beat-00	0.6.0	0.6.0.1	
# ::edge	contrast-01	ARG2	contrast-01	0.6	0.6.0	
# ::edge	contrast-01	ARG2	recommend-01	0.1	0.1.0	
# ::edge	counsel-01	ARG1	you	0.1.0.1.1.0.0	0.0.3.0.1	
# ::edge	depress-01	ARG1	you	0.2.1.1.0	0.2.1.2	
# ::edge	depress-01	ARG1	you	0.2.1.1.1	0.2.1.2	
# ::edge	depress-01	polarity	-	0.2.1.1.1	0.2.1.1.1.0	
# ::edge	do-02	ARG0	you	0.5.2.0.1	0.5.2.0.0	
# ::edge	do-02	ARG0	you	0.6.0.1.1.0.0.1	0.6.0.0.0.0	
# ::edge	do-02	ARG1	and	0.5.2.0.1	0.5.0	
# ::edge	do-02	ARG1	anything	0.6.0.1.1.0.0.1	0.6.0.1.1.0.0.1.0	
# ::edge	do-02	time	minute	0.6.0.1.1.0.0.1	0.6.0.1.1.0.0.1.1	
# ::edge	engage-01	ARG1	you	0.6.0.0.0	0.6.0.0.0.0	
# ::edge	engage-01	ARG2	and	0.6.0.0.0	0.6.0.0.0.1	
# ::edge	engage-01	purpose	get-05	0.6.0.0.0	0.6.0.0.0.2	
# ::edge	equal	polarity	-	0.4.0	0.4.0.0	
# ::edge	experience-01	ARG0	you	0.4.1.0	0.4.1.0.0	
# ::edge	feel-01	ARG0	person	0.0	0.0.0	
# ::edge	feel-01	ARG0	person	0.7.0	0.7.0.0	
# ::edge	feel-01	ARG0	you	0.6.0.1.1.0	0.6.0.0.0.0	
# ::edge	feel-01	ARG0	you	0.7.1.1.0	0.7.1.1.0.0	
# ::edge	feel-01	ARG0	you	0.8.2.0	0.8.1	
# ::edge	feel-01	ARG0-of	cause-01	0.0	0.0.3	
# ::edge	feel-01	ARG1	and	0.0	0.0.1	
# ::edge	feel-01	ARG1	good	0.7.1.1.0	0.7.1.1.0.1	
# ::edge	feel-01	ARG1	motivate-01	0.6.0.1.1.0	0.6.0.1.1.0.0	
# ::edge	feel-01	ARG1	thing	0.7.0	0.7.0.1	
# ::edge	feel-01	time	get-05	0.0	0.0.2	
# ::edge	get-01	ARG0	you	0.1.0.1	0.1.0.1.0	
# ::edge	get-01	ARG0	you	0.9.1	0.9.0.1	
# ::edge	get-01	ARG1	appointment-02	0.1.0.1	0.1.0.1.1	
# ::edge	get-01	ARG1	help-01	0.9.1	0.9.1.1	
# ::edge	get-01	mode	imperative	0.9.1	0.9.1.0	
# ::edge	get-05	ARG1	person	0.0.2	0.0.0	
# ::edge	get-05	ARG1	you	0.6.0.0.0.2	0.6.0.0.0.0	
# ::edge	get-05	ARG2	somewhere	0.6.0.0.0.2	0.6.0.0.0.2.0	
# ::edge	get-05	ARG2	university	0.0.2	0.0.2.0	
# ::edge	get-05	ord	ordinal-entity	0.0.2	0.0.2.1	
# ::edge	good	degree	more	0.7.1.1.0.1	0.7.1.1.0.1.0	
# ::edge	have-03	ARG0	you	0.3.0	0.3.0.0	
# ::edge	have-03	ARG1	problem	0.3.0	0.3.0.1	
# ::edge	have-03	ARG1-of	obvious-01	0.3.0	0.3.0.2	
# ::edge	have-03	time	minute	0.3.0	0.3.0.3	
# ::edge	help-01	ARG2	you	0.9.1.1	0.9.0.1	
# ::edge	help-01	mod	some	0.9.1.1	0.9.1.1.0	
# ::edge	helpful-04	ARG0	and	0.5	0.5.0	
# ::edge	helpful-04	ARG0-of	cause-01	0.5	0.5.2	
# ::edge	helpful-04	mod	really	0.5	0.5.1	
# ::edge	important	compared-to	thing	0.4	0.4.1	
# ::edge	important	degree	equal	0.4	0.4.0	
# ::edge	important	domain	thing	0.4	0.4.2	
# ::edge	intelligent-01	ARG1	person	0.0.1.0	0.0.0	
# ::edge	intelligent-01	polarity	-	0.0.1.0	0.0.1.0.0	
# ::edge	kind-01	ARG0	you	0.8	0.8.1	
# ::edge	kind-01	ARG0	you	0.9.0	0.9.0.1	
# ::edge	kind-01	ARG0-of	worsen-01	0.8	0.8.2	
# ::edge	kind-01	ARG2	you	0.8	0.8.1	
# ::edge	kind-01	ARG2	you	0.9.0	0.9.0.1	
# ::edge	kind-01	mode	imperative	0.9.0	0.9.0.0	
# ::edge	kind-01	polarity	-	0.8	0.8.0	
# ::edge	life	mod	general-02	0.6.0.0.0.1.1	0.6.0.0.0.1.1.0	
# ::edge	matter-01	ARG1	tell-01	0.2	0.2.1	
# ::edge	matter-01	mod	really	0.2	0.2.2	
# ::edge	matter-01	polarity	-	0.2	0.2.0	
# ::edge	motivate-01	ARG1	you	0.6.0.1.1.0.0	0.6.0.0.0.0	
# ::edge	motivate-01	ARG2	do-02	0.6.0.1.1.0.0	0.6.0.1.1.0.0.1	
# ::edge	motivate-01	polarity	-	0.6.0.1.1.0.0	0.6.0.1.1.0.0.0	
# ::edge	multi-sentence	snt1	feel-01	0	0.0	
# ::edge	multi-sentence	snt10	and	0	0.9	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	multi-sentence	snt3	matter-01	0	0.2	
# ::edge	multi-sentence	snt4	and	0	0.3	
# ::edge	multi-sentence	snt5	important	0	0.4	
# ::edge	multi-sentence	snt6	helpful-04	0	0.5	
# ::edge	multi-sentence	snt7	contrast-01	0	0.6	
# ::edge	multi-sentence	snt8	and	0	0.7	
# ::edge	multi-sentence	snt9	kind-01	0	0.8	
# ::edge	obligate-01	ARG2	engage-01	0.6.0.0	0.6.0.0.0	
# ::edge	or	op1	depress-01	0.2.1.1	0.2.1.1.0	
# ::edge	or	op2	depress-01	0.2.1.1	0.2.1.1.1	
# ::edge	ordinal-entity	value	1	0.0.2.1	0.0.2.1.0	
# ::edge	pass-03	ARG1	thing	0.7.1	0.7.0.1	
# ::edge	pass-03	ARG1-of	hope-01	0.7.1	0.7.1.0	
# ::edge	pass-03	time	begin-01	0.7.1	0.7.1.1	
# ::edge	person	quant	lot	0.7.0.0	0.7.0.0.0	
# ::edge	person	quant	most	0.0.0	0.0.0.0	
# ::edge	possible-01	ARG1	use-01	0.3.1	0.3.1.0	
# ::edge	problem	quant	some	0.3.0.1	0.3.0.1.0	
# ::edge	recommend-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	recommend-01	ARG1	get-01	0.1.0	0.1.0.1	
# ::edge	recommend-01	ARG2	you	0.1.0	0.1.0.1.0	
# ::edge	recommend-01	mod	really	0.1.0	0.1.0.2	
# ::edge	resemble-01	ARG2	this	0.7.0.1.0	0.7.0.1.0.0	
# ::edge	service	ARG0-of	counsel-01	0.1.0.1.1.0	0.1.0.1.1.0.0	
# ::edge	service	location	university	0.1.0.1.1.0	0.1.0.1.1.0.1	
# ::edge	support-01	ARG1	you	0.3.1.0.0	0.3.0.0	
# ::edge	support-01	mod	some	0.3.1.0.0	0.3.1.0.0.0	
# ::edge	tell-01	ARG0	anyone	0.2.1	0.2.1.0	
# ::edge	tell-01	ARG1	or	0.2.1	0.2.1.1	
# ::edge	tell-01	ARG2	you	0.2.1	0.2.1.2	
# ::edge	thing	ARG1-of	experience-01	0.4.1	0.4.1.0	
# ::edge	thing	ARG1-of	resemble-01	0.7.0.1	0.7.0.1.0	
# ::edge	thing	ARG2-of	label-01	0.4.2	0.4.2.0	
# ::edge	try-01	ARG0	you	0.5.2.0	0.5.2.0.0	
# ::edge	try-01	ARG1	do-02	0.5.2.0	0.5.2.0.1	
# ::edge	university	poss	you	0.1.0.1.1.0.1	0.0.3.0.1	
# ::edge	use-01	ARG0	you	0.3.1.0	0.3.0.0	
# ::edge	use-01	ARG1	support-01	0.3.1.0	0.3.1.0.0	
# ::edge	worsen-01	ARG1	feel-01	0.8.2	0.8.2.0	
# ::edge	worsen-01	mod	only	0.8.2	0.8.2.1	
(m / multi-sentence
      :snt1 (f / feel-01
            :ARG0 (p / person
                  :quant (m2 / most))
            :ARG1 (a / and
                  :op1 (i / intelligent-01 :polarity -
                        :ARG1 p)
                  :op2 (a2 / awkward))
            :time (g / get-05
                  :ARG1 p
                  :ARG2 (u / university)
                  :ord (o5 / ordinal-entity :value 1))
            :ARG0-of (c3 / cause-01
                  :ARG1 (a4 / alone :polarity -
                        :domain (y / you)
                        :location u
                        :mod (d / definite))))
      :snt2 (c / contrast-01
            :ARG2 (r / recommend-01
                  :ARG0 (i2 / i)
                  :ARG1 (g2 / get-01
                        :ARG0 (y2 / you)
                        :ARG1 (a5 / appointment-02
                              :ARG0 y2
                              :ARG1 (s / service
                                    :ARG0-of (c2 / counsel-01
                                          :ARG1 y)
                                    :location (u2 / university
                                          :poss y))))
                  :ARG2 y2
                  :mod (r2 / really)))
      :snt3 (m3 / matter-01 :polarity -
            :ARG1 (t / tell-01
                  :ARG0 (a3 / anyone)
                  :ARG1 (o / or
                        :op1 (d2 / depress-01
                              :ARG1 y3)
                        :op2 (d3 / depress-01 :polarity -
                              :ARG1 y3))
                  :ARG2 (y3 / you))
            :mod (r3 / really))
      :snt4 (a6 / and
            :op1 (h / have-03
                  :ARG0 (y4 / you)
                  :ARG1 (p2 / problem
                        :quant (s2 / some))
                  :ARG1-of (o2 / obvious-01)
                  :time (m10 / minute))
            :op2 (p3 / possible-01
                  :ARG1 (u3 / use-01
                        :ARG0 y4
                        :ARG1 (s3 / support-01
                              :ARG1 y4
                              :mod (s4 / some)))))
      :snt5 (i3 / important
            :degree (e5 / equal :polarity -)
            :compared-to (t3 / thing
                  :ARG1-of (e2 / experience-01
                        :ARG0 (y5 / you)))
            :domain (t2 / thing
                  :ARG2-of (l / label-01)))
      :snt6 (h2 / helpful-04
            :ARG0 (a7 / and
                  :op1 (m4 / meditate-01)
                  :op2 (e / exercise-02))
            :mod (r4 / really)
            :ARG0-of (c4 / cause-01
                  :ARG1 (t4 / try-01
                        :ARG0 (y6 / you)
                        :ARG1 (d4 / do-02
                              :ARG0 y6
                              :ARG1 a7))))
      :snt7 (c5 / contrast-01
            :ARG2 (c6 / contrast-01
                  :ARG1 (o3 / obligate-01
                        :ARG2 (e4 / engage-01
                              :ARG1 (y7 / you)
                              :ARG2 (a8 / and
                                    :op1 (h3 / help)
                                    :op2 (l2 / life
                                          :mod (g3 / general-02)))
                              :purpose (g4 / get-05
                                    :ARG1 y7
                                    :ARG2 (s5 / somewhere))))
                  :ARG2 (b / beat-00 :polarity -
                        :ARG1 y7
                        :ARG1-of (c7 / cause-01
                              :ARG0 (f3 / feel-01
                                    :ARG0 y7
                                    :ARG1 (m5 / motivate-01 :polarity -
                                          :ARG1 y7
                                          :ARG2 (d5 / do-02
                                                :ARG0 y7
                                                :ARG1 (a9 / anything)
                                                :time (m6 / minute))))))))
      :snt8 (a10 / and
            :op1 (f4 / feel-01
                  :ARG0 (p4 / person
                        :quant (l3 / lot))
                  :ARG1 (t5 / thing
                        :ARG1-of (r5 / resemble-01
                              :ARG2 (t6 / this))))
            :op2 (p5 / pass-03
                  :ARG1 t5
                  :ARG1-of (h5 / hope-01)
                  :time (b3 / begin-01
                        :ARG0 y8
                        :ARG1 (f5 / feel-01
                              :ARG0 (y8 / you)
                              :ARG1 (g5 / good
                                    :degree (m7 / more))))))
      :snt9 (k / kind-01 :polarity -
            :ARG0 (y9 / you)
            :ARG2 y9
            :ARG0-of (w / worsen-01
                  :ARG1 (f6 / feel-01
                        :ARG0 y9)
                  :mod (o4 / only)))
      :snt10 (a11 / and
            :op1 (k2 / kind-01 :mode imperative
                  :ARG0 (y10 / you)
                  :ARG2 y10)
            :op2 (g6 / get-01 :mode imperative
                  :ARG0 y10
                  :ARG1 (h4 / help-01
                        :ARG2 y10
                        :mod (s6 / some)))))

# ::node	0	and	9-10
# ::node	0.0	sorry-01	0-1
# ::node	0.0.0	i	10-11
# ::node	0.0.1	anyone	2-3
# ::node	0.0.1.0	read-01	4-5
# ::node	0.0.1.0.0	mess	7-8
# ::node	0.0.1.0.0.0	jumble-01	6-7
# ::node	0.0.1.0.0.1	this	5-6
# ::node	0.1	contrast-01	21-22
# ::node	0.1.0	feel-01	25-26
# ::node	0.1.0.0	resemble-01	
# ::node	0.1.0.0.0	person	19-20
# ::node	0.1.0.0.0.0	moan-01	19-20
# ::node	0.1.0.0.0.1	seek-01	18-19
# ::node	0.1.0.0.0.1.0	self	16-17
# ::node	0.1.0.1	bit	13-14
# ::node	0.1.1	feel-01	11-12
# ::node	0.1.1.0	desperate	26-27
# ::node	0.1.1.1	true	
# ::root	0	and
# ::edge	and	op1	sorry-01	0	0.0	
# ::edge	and	op2	contrast-01	0	0.1	
# ::edge	anyone	ARG0-of	read-01	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG1	feel-01	0.1	0.1.0	
# ::edge	contrast-01	ARG2	feel-01	0.1	0.1.1	
# ::edge	feel-01	ARG0	i	0.1.0	0.0.0	
# ::edge	feel-01	ARG0	i	0.1.1	0.0.0	
# ::edge	feel-01	ARG1	desperate	0.1.1	0.1.1.0	
# ::edge	feel-01	ARG1	resemble-01	0.1.0	0.1.0.0	
# ::edge	feel-01	degree	bit	0.1.0	0.1.0.1	
# ::edge	feel-01	mod	true	0.1.1	0.1.1.1	
# ::edge	mess	ARG1-of	jumble-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	mess	mod	this	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	person	ARG0-of	moan-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	person	ARG0-of	seek-01	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	read-01	ARG1	mess	0.0.1.0	0.0.1.0.0	
# ::edge	resemble-01	ARG1	i	0.1.0.0	0.0.0	
# ::edge	resemble-01	ARG2	person	0.1.0.0	0.1.0.0.0	
# ::edge	seek-01	mod	self	0.1.0.0.0.1	0.1.0.0.0.1.0	
# ::edge	sorry-01	ARG1	i	0.0	0.0.0	
# ::edge	sorry-01	beneficiary	anyone	0.0	0.0.1	
(a / and
      :op1 (s / sorry-01
            :ARG1 (i / i)
            :beneficiary (a2 / anyone
                  :ARG0-of (r / read-01
                        :ARG1 (m / mess
                              :ARG1-of (j / jumble-01)
                              :mod (t / this)))))
      :op2 (c / contrast-01
            :ARG1 (f / feel-01
                  :ARG0 i
                  :ARG1 (r2 / resemble-01
                        :ARG1 i
                        :ARG2 (p / person
                              :ARG0-of (m2 / moan-01)
                              :ARG0-of (s2 / seek-01
                                    :mod (s3 / self))))
                  :degree (b / bit))
            :ARG2 (f2 / feel-01
                  :ARG0 i
                  :ARG1 (d / desperate)
                  :mod (t2 / true))))

# ::node	0	common	2-3
# ::node	0.0	become-01	11-12
# ::node	0.0.0	thing	7-8
# ::node	0.0.0.0	feel-01	7-8
# ::node	0.0.0.0.0	person	
# ::node	0.0.0.1	exist-01	6-7
# ::node	0.0.1	intense-02	13-14
# ::node	0.0.1.0	more	12-13
# ::node	0.0.2	and	20-21
# ::node	0.0.2.0	be-located-at-91	
# ::node	0.0.2.0.0	situation	19-20
# ::node	0.0.2.0.0.0	new	18-19
# ::node	0.0.2.1	feel-01	21-22
# ::node	0.0.2.1.0	pressure-01	23-24
# ::node	0.0.2.1.0.0	and	28-29
# ::node	0.0.2.1.0.0.0	socialize-01	25-26
# ::node	0.0.2.1.0.0.0.0	stranger	27-28
# ::node	0.0.2.1.0.0.1	fit-06	29-30
# ::node	0.0.2.1.0.0.1.0	role	32-33
# ::node	0.0.2.1.0.0.1.0.0	person	38-39
# ::node	0.0.2.1.0.0.1.0.0.0	study-01	38-39
# ::node	0.0.2.1.0.0.1.0.0.0.0	university	37-38
# ::root	0	common
# ::edge	and	op1	be-located-at-91	0.0.2	0.0.2.0	
# ::edge	and	op1	socialize-01	0.0.2.1.0.0	0.0.2.1.0.0.0	
# ::edge	and	op2	feel-01	0.0.2	0.0.2.1	
# ::edge	and	op2	fit-06	0.0.2.1.0.0	0.0.2.1.0.0.1	
# ::edge	be-located-at-91	ARG1	person	0.0.2.0	0.0.0.0.0	
# ::edge	be-located-at-91	ARG2	situation	0.0.2.0	0.0.2.0.0	
# ::edge	become-01	ARG1	thing	0.0	0.0.0	
# ::edge	become-01	ARG2	intense-02	0.0	0.0.1	
# ::edge	become-01	time	and	0.0	0.0.2	
# ::edge	common	domain	become-01	0	0.0	
# ::edge	feel-01	ARG0	person	0.0.0.0	0.0.0.0.0	
# ::edge	feel-01	ARG0	person	0.0.2.1	0.0.0.0.0	
# ::edge	feel-01	ARG1	pressure-01	0.0.2.1	0.0.2.1.0	
# ::edge	feel-01	ARG2	person	0.0.0.0	0.0.0.0.0	
# ::edge	fit-06	ARG1	person	0.0.2.1.0.0.1	0.0.0.0.0	
# ::edge	fit-06	ARG2	role	0.0.2.1.0.0.1	0.0.2.1.0.0.1.0	
# ::edge	intense-02	ARG1	thing	0.0.1	0.0.0	
# ::edge	intense-02	degree	more	0.0.1	0.0.1.0	
# ::edge	person	ARG0-of	study-01	0.0.2.1.0.0.1.0.0	0.0.2.1.0.0.1.0.0.0	
# ::edge	pressure-01	ARG1	person	0.0.2.1.0	0.0.0.0.0	
# ::edge	pressure-01	ARG2	and	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	role	example	person	0.0.2.1.0.0.1.0	0.0.2.1.0.0.1.0.0	
# ::edge	role	mod	new	0.0.2.1.0.0.1.0	0.0.2.0.0.0	
# ::edge	situation	mod	new	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	socialize-01	ARG0	person	0.0.2.1.0.0.0	0.0.0.0.0	
# ::edge	socialize-01	prep-with	stranger	0.0.2.1.0.0.0	0.0.2.1.0.0.0.0	
# ::edge	study-01	location	university	0.0.2.1.0.0.1.0.0.0	0.0.2.1.0.0.1.0.0.0.0	
# ::edge	thing	ARG1-of	exist-01	0.0.0	0.0.0.1	
# ::edge	thing	ARG1-of	feel-01	0.0.0	0.0.0.0	
(c / common
      :domain (b / become-01
            :ARG1 (t / thing
                  :ARG1-of (f / feel-01
                        :ARG0 (p / person)
                        :ARG2 p)
                  :ARG1-of (e / exist-01))
            :ARG2 (i / intense-02
                  :ARG1 t
                  :degree (m / more))
            :time (a / and
                  :op1 (b2 / be-located-at-91
                        :ARG1 p
                        :ARG2 (s / situation
                              :mod (n / new)))
                  :op2 (f2 / feel-01
                        :ARG0 p
                        :ARG1 (p2 / pressure-01
                              :ARG1 p
                              :ARG2 (a2 / and
                                    :op1 (s2 / socialize-01
                                          :ARG0 p
                                          :prep-with (s3 / stranger))
                                    :op2 (f3 / fit-06
                                          :ARG1 p
                                          :ARG2 (r / role
                                                :mod n
                                                :example (p3 / person
                                                      :ARG0-of (s4 / study-01
                                                            :location (u / university)))))))))))

# ::node	0	multi-sentence	
# ::node	0.0	feel-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	thing	
# ::node	0.0.1.0	resemble-01	
# ::node	0.0.1.0.0	and	15-16
# ::node	0.0.1.0.0.0	overwhelm-01	13-14
# ::node	0.0.1.0.0.0.0	problem	7-8
# ::node	0.0.1.0.0.0.0.0	live-01	
# ::node	0.0.1.0.0.0.1	credible	12-13
# ::node	0.0.1.0.0.0.1.0	-	32-33
# ::node	0.0.1.0.0.1	make-02	17-18
# ::node	0.0.1.0.0.1.0	doubt-01	50-51
# ::node	0.0.1.0.0.1.0.0	esteem	28-29
# ::node	0.0.1.0.0.1.0.0.0	self	26-27
# ::node	0.0.1.0.0.1.0.0.1	low-04	25-26
# ::node	0.0.1.0.0.1.0.0.1.0	always	24-25
# ::node	0.0.1.0.0.1.0.1	more	20-21
# ::node	0.0.1.0.0.1.0.1.0	ever	19-20
# ::node	0.0.2	moment	4-5
# ::node	0.1	and	49-50
# ::node	0.1.0	capable-01	
# ::node	0.1.0.0	-	
# ::node	0.1.0.1	i	30-31
# ::node	0.1.0.2	concentrate-01	35-36
# ::node	0.1.0.2.0	work-01	37-38
# ::node	0.1.1	find-01	40-41
# ::node	0.1.1.0	become-01	42-43
# ::node	0.1.1.0.0	quiet-03	44-45
# ::node	0.1.1.0.0.0	very	43-44
# ::node	0.1.1.0.0.1	occasion-02	47-48
# ::node	0.1.1.0.0.1.0	society	46-47
# ::node	0.1.1.1	often	39-40
# ::node	0.1.2	doubt-01	21-22
# ::node	0.1.2.0	and	54-55
# ::node	0.1.2.0.0	anything	53-54
# ::node	0.1.2.0.1	everything	55-56
# ::root	0	multi-sentence
# ::edge	and	op1	anything	0.1.2.0	0.1.2.0.0	
# ::edge	and	op1	capable-01	0.1	0.1.0	
# ::edge	and	op1	overwhelm-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	and	op2	everything	0.1.2.0	0.1.2.0.1	
# ::edge	and	op2	find-01	0.1	0.1.1	
# ::edge	and	op2	make-02	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	and	op3	doubt-01	0.1	0.1.2	
# ::edge	become-01	ARG1	i	0.1.1.0	0.1.0.1	
# ::edge	become-01	ARG2	quiet-03	0.1.1.0	0.1.1.0.0	
# ::edge	capable-01	ARG1	i	0.1.0	0.1.0.1	
# ::edge	capable-01	ARG2	concentrate-01	0.1.0	0.1.0.2	
# ::edge	capable-01	polarity	-	0.1.0	0.1.0.0	
# ::edge	concentrate-01	ARG0	i	0.1.0.2	0.1.0.1	
# ::edge	concentrate-01	ARG1	work-01	0.1.0.2	0.1.0.2.0	
# ::edge	credible	polarity	-	0.0.1.0.0.0.1	0.0.1.0.0.0.1.0	
# ::edge	doubt-01	ARG0	i	0.0.1.0.0.1.0	0.0.0	
# ::edge	doubt-01	ARG0	i	0.1.2	0.1.0.1	
# ::edge	doubt-01	ARG1	esteem	0.0.1.0.0.1.0	0.0.1.0.0.1.0.0	
# ::edge	doubt-01	ARG1	i	0.1.2	0.1.0.1	
# ::edge	doubt-01	degree	more	0.0.1.0.0.1.0	0.0.1.0.0.1.0.1	
# ::edge	doubt-01	topic	and	0.1.2	0.1.2.0	
# ::edge	esteem	ARG1-of	low-04	0.0.1.0.0.1.0.0	0.0.1.0.0.1.0.0.1	
# ::edge	esteem	mod	self	0.0.1.0.0.1.0.0	0.0.1.0.0.1.0.0.0	
# ::edge	esteem	poss	i	0.0.1.0.0.1.0.0	0.0.0	
# ::edge	feel-01	ARG0	i	0.0	0.0.0	
# ::edge	feel-01	ARG1	thing	0.0	0.0.1	
# ::edge	feel-01	time	moment	0.0	0.0.2	
# ::edge	find-01	ARG0	i	0.1.1	0.1.0.1	
# ::edge	find-01	ARG1	become-01	0.1.1	0.1.1.0	
# ::edge	find-01	frequency	often	0.1.1	0.1.1.1	
# ::edge	live-01	ARG0	i	0.0.1.0.0.0.0.0	0.0.0	
# ::edge	low-04	time	always	0.0.1.0.0.1.0.0.1	0.0.1.0.0.1.0.0.1.0	
# ::edge	make-02	ARG0	i	0.0.1.0.0.1	0.0.0	
# ::edge	make-02	ARG1	doubt-01	0.0.1.0.0.1	0.0.1.0.0.1.0	
# ::edge	more	mod	ever	0.0.1.0.0.1.0.1	0.0.1.0.0.1.0.1.0	
# ::edge	multi-sentence	snt1	feel-01	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	occasion-02	mod	society	0.1.1.0.0.1	0.1.1.0.0.1.0	
# ::edge	overwhelm-01	ARG0	problem	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	overwhelm-01	degree	credible	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	problem	part-of	live-01	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
# ::edge	quiet-03	ARG1	i	0.1.1.0.0	0.1.0.1	
# ::edge	quiet-03	degree	very	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	quiet-03	time	occasion-02	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	resemble-01	ARG2	and	0.0.1.0	0.0.1.0.0	
# ::edge	thing	ARG1-of	resemble-01	0.0.1	0.0.1.0	
(m / multi-sentence
      :snt1 (f / feel-01
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG1-of (r / resemble-01
                        :ARG2 (a / and
                              :op1 (o / overwhelm-01
                                    :ARG0 (p / problem
                                          :part-of (l / live-01
                                                :ARG0 i))
                                    :degree (c3 / credible :polarity -))
                              :op2 (m2 / make-02
                                    :ARG0 i
                                    :ARG1 (d / doubt-01
                                          :ARG0 i
                                          :ARG1 (e / esteem
                                                :mod (s / self)
                                                :ARG1-of (l2 / low-04
                                                      :time (a2 / always))
                                                :poss i)
                                          :degree (m3 / more
                                                :mod (e2 / ever)))))))
            :time (m4 / moment))
      :snt2 (a3 / and
            :op1 (c / capable-01 :polarity -
                  :ARG1 (i3 / i)
                  :ARG2 (c2 / concentrate-01
                        :ARG0 i3
                        :ARG1 (w / work-01)))
            :op2 (f2 / find-01
                  :ARG0 i3
                  :ARG1 (b / become-01
                        :ARG1 i3
                        :ARG2 (q / quiet-03
                              :ARG1 i3
                              :degree (v / very)
                              :time (o2 / occasion-02
                                    :mod (s2 / society))))
                  :frequency (o3 / often))
            :op3 (d2 / doubt-01
                  :ARG0 i3
                  :ARG1 i3
                  :topic (a4 / and
                        :op1 (a5 / anything)
                        :op2 (e3 / everything)))))

# ::node	0	contrast-01	21-22
# ::node	0.0	and	10-11
# ::node	0.0.0	diagnose-01	5-6
# ::node	0.0.0.0	-	17-17
# ::node	0.0.0.1	person	3-4
# ::node	0.0.0.1.0	2	
# ::node	0.0.0.1.1	counsel-01	3-4
# ::node	0.0.0.2	i	14-15
# ::node	0.0.0.3	depression	31-32
# ::node	0.0.1	suggest-01	13-14
# ::node	0.0.1.0	suffer-01	17-18
# ::node	0.0.1.0.0	-	17-17
# ::node	0.1	worry-01	26-27
# ::node	0.1.0	huge	25-26
# ::node	0.1.1	cause-01	34-35
# ::node	0.1.1.0	depression	8-9
# ::node	0.1.1.0.0	cause-01	
# ::node	0.1.1.0.0.0	die-01	39-40
# ::node	0.1.1.0.0.0.0	person	4-5
# ::node	0.1.1.0.0.0.0.0	have-rel-role-91	4-5
# ::node	0.1.1.0.0.0.0.0.0	dad	37-38
# ::node	0.1.1.0.1	cause-01	
# ::node	0.1.1.0.1.0	suicide	41-42
# ::root	0	contrast-01
# ::edge	and	op1	diagnose-01	0.0	0.0.0	
# ::edge	and	op2	suggest-01	0.0	0.0.1	
# ::edge	cause-01	ARG0	depression	0.1.1	0.1.1.0	
# ::edge	cause-01	ARG1	die-01	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	cause-01	ARG1	suicide	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	contrast-01	ARG1	and	0	0.0	
# ::edge	contrast-01	ARG2	worry-01	0	0.1	
# ::edge	counsel-01	ARG1	i	0.0.0.1.1	0.0.0.2	
# ::edge	depression	ARG0-of	cause-01	0.1.1.0	0.1.1.0.0	
# ::edge	depression	ARG0-of	cause-01	0.1.1.0	0.1.1.0.1	
# ::edge	diagnose-01	ARG0	person	0.0.0	0.0.0.1	
# ::edge	diagnose-01	ARG1	i	0.0.0	0.0.0.2	
# ::edge	diagnose-01	ARG2	depression	0.0.0	0.0.0.3	
# ::edge	diagnose-01	polarity	-	0.0.0	0.0.0.0	
# ::edge	die-01	ARG1	person	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.1.1.0.0.0.0.0	0.0.0.2	
# ::edge	have-rel-role-91	ARG2	dad	0.1.1.0.0.0.0.0	0.1.1.0.0.0.0.0.0	
# ::edge	person	ARG0-of	counsel-01	0.0.0.1	0.0.0.1.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1.0.0.0.0	0.1.1.0.0.0.0.0	
# ::edge	person	quant	2	0.0.0.1	0.0.0.1.0	
# ::edge	suffer-01	ARG0	i	0.0.1.0	0.0.0.2	
# ::edge	suffer-01	ARG1	depression	0.0.1.0	0.0.0.3	
# ::edge	suffer-01	polarity	-	0.0.1.0	0.0.1.0.0	
# ::edge	suggest-01	ARG0	person	0.0.1	0.0.0.1	
# ::edge	suggest-01	ARG1	suffer-01	0.0.1	0.0.1.0	
# ::edge	suggest-01	ARG2	i	0.0.1	0.0.0.2	
# ::edge	suicide	poss	person	0.1.1.0.1.0	0.1.1.0.0.0.0	
# ::edge	worry-01	ARG0	depression	0.1	0.0.0.3	
# ::edge	worry-01	ARG1	i	0.1	0.0.0.2	
# ::edge	worry-01	ARG1-of	cause-01	0.1	0.1.1	
# ::edge	worry-01	mod	huge	0.1	0.1.0	
(c / contrast-01
      :ARG1 (a / and
            :op1 (d / diagnose-01 :polarity -
                  :ARG0 (p / person :quant 2
                        :ARG0-of (c2 / counsel-01
                              :ARG1 i))
                  :ARG1 (i / i)
                  :ARG2 (d2 / depression))
            :op2 (s / suggest-01
                  :ARG0 p
                  :ARG1 (s2 / suffer-01 :polarity -
                        :ARG0 i
                        :ARG1 d2)
                  :ARG2 i))
      :ARG2 (w / worry-01
            :ARG0 d2
            :ARG1 i
            :mod (h / huge)
            :ARG1-of (c4 / cause-01
                  :ARG0 (d3 / depression
                        :ARG0-of (c5 / cause-01
                              :ARG1 (d4 / die-01
                                    :ARG1 (p2 / person
                                          :ARG0-of (h2 / have-rel-role-91
                                                :ARG1 i
                                                :ARG2 (d5 / dad)))))
                        :ARG0-of (c6 / cause-01
                              :ARG1 (s3 / suicide
                                    :poss p2))))))

# ::node	0	multi-sentence	
# ::node	0.0	and	9-10
# ::node	0.0.0	try-01	21-22
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	solve-01	4-5
# ::node	0.0.0.1.0	problem	6-7
# ::node	0.0.0.2	before	7-8
# ::node	0.0.1	find-02	11-12
# ::node	0.0.1.0	useful-05	16-17
# ::node	0.0.1.0.0	and	18-19
# ::node	0.0.1.0.0.0	exercise	12-13
# ::node	0.0.1.0.0.1	meditation	14-15
# ::node	0.0.1.0.1	particular	15-16
# ::node	0.0.2	try-01	2-3
# ::node	0.0.2.0	thing	22-23
# ::node	0.0.2.0.0	and	13-14
# ::node	0.0.2.0.0.0	book	27-28
# ::node	0.0.2.0.0.0.0	help-01	26-27
# ::node	0.0.2.0.0.0.0.0	self	24-25
# ::node	0.0.2.0.0.1	tape	29-30
# ::node	0.0.2.1	also	20-21
# ::node	0.1	contrast-01	31-32
# ::node	0.1.0	feel-01	34-35
# ::node	0.1.0.0	i	62-63
# ::node	0.1.0.1	thing	
# ::node	0.1.0.1.0	interrogative	
# ::node	0.1.0.1.1	live-01	
# ::node	0.1.0.1.2	this	40-41
# ::node	0.1.0.2	general-02	33-34
# ::node	0.2	waste-01	64-65
# ::node	0.2.0	expressive	
# ::node	0.2.1	i	
# ::node	0.2.2	and	28-29
# ::node	0.2.2.0	chance-02	55-56
# ::node	0.2.2.0.0	exist-01	51-52
# ::node	0.2.2.0.1	one	48-49
# ::node	0.2.2.1	chance-02	49-50
# ::node	0.2.2.1.0	man	60-61
# ::node	0.2.2.1.0.0	young	59-60
# ::node	0.3	beat-02	72-73
# ::node	0.3.0	thing	70-71
# ::node	0.3.0.0	feel-01	70-71
# ::node	0.3.0.0.0	i	
# ::node	0.3.0.1	this	
# ::node	0.3.1	away	73-74
# ::root	0	multi-sentence
# ::edge	and	op1	book	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	and	op1	chance-02	0.2.2	0.2.2.0	
# ::edge	and	op1	exercise	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	and	op1	try-01	0.0	0.0.0	
# ::edge	and	op2	chance-02	0.2.2	0.2.2.1	
# ::edge	and	op2	find-02	0.0	0.0.1	
# ::edge	and	op2	meditation	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	and	op2	tape	0.0.2.0.0	0.0.2.0.0.1	
# ::edge	and	op3	try-01	0.0	0.0.2	
# ::edge	beat-02	ARG1	thing	0.3	0.3.0	
# ::edge	beat-02	ARG2	away	0.3	0.3.1	
# ::edge	beat-02	prep-at	i	0.3	0.3.0.0.0	
# ::edge	book	ARG0-of	help-01	0.0.2.0.0.0	0.0.2.0.0.0.0	
# ::edge	chance-02	ARG0	i	0.2.2.0	0.2.1	
# ::edge	chance-02	ARG0	i	0.2.2.1	0.2.1	
# ::edge	chance-02	ARG1	exist-01	0.2.2.0	0.2.2.0.0	
# ::edge	chance-02	ARG1	man	0.2.2.1	0.2.2.1.0	
# ::edge	chance-02	mod	one	0.2.2.0	0.2.2.0.1	
# ::edge	chance-02	mod	one	0.2.2.1	0.2.2.0.1	
# ::edge	contrast-01	ARG2	feel-01	0.1	0.1.0	
# ::edge	exist-01	ARG1	i	0.2.2.0.0	0.2.1	
# ::edge	feel-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	feel-01	ARG0	i	0.3.0.0	0.3.0.0.0	
# ::edge	feel-01	ARG1	thing	0.1.0	0.1.0.1	
# ::edge	feel-01	ARG1-of	general-02	0.1.0	0.1.0.2	
# ::edge	find-02	ARG0	i	0.0.1	0.0.0.0	
# ::edge	find-02	ARG1	useful-05	0.0.1	0.0.1.0	
# ::edge	general-02	ARG2	i	0.1.0.2	0.1.0.0	
# ::edge	help-01	mod	self	0.0.2.0.0.0.0	0.0.2.0.0.0.0.0	
# ::edge	live-01	ARG0	i	0.1.0.1.1	0.1.0.0	
# ::edge	man	domain	i	0.2.2.1.0	0.2.1	
# ::edge	man	mod	young	0.2.2.1.0	0.2.2.1.0.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	multi-sentence	snt3	waste-01	0	0.2	
# ::edge	multi-sentence	snt4	beat-02	0	0.3	
# ::edge	problem	poss	i	0.0.0.1.0	0.0.0.0	
# ::edge	solve-01	ARG0	i	0.0.0.1	0.0.0.0	
# ::edge	solve-01	ARG1	problem	0.0.0.1	0.0.0.1.0	
# ::edge	tape	ARG0-of	help-01	0.0.2.0.0.1	0.0.2.0.0.0.0	
# ::edge	thing	ARG1-of	feel-01	0.3.0	0.3.0.0	
# ::edge	thing	ARG1-of	live-01	0.1.0.1	0.1.0.1.1	
# ::edge	thing	domain	this	0.1.0.1	0.1.0.1.2	
# ::edge	thing	example	and	0.0.2.0	0.0.2.0.0	
# ::edge	thing	mod	this	0.3.0	0.3.0.1	
# ::edge	thing	mode	interrogative	0.1.0.1	0.1.0.1.0	
# ::edge	try-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	try-01	ARG0	i	0.0.2	0.0.0.0	
# ::edge	try-01	ARG1	solve-01	0.0.0	0.0.0.1	
# ::edge	try-01	ARG1	thing	0.0.2	0.0.2.0	
# ::edge	try-01	mod	also	0.0.2	0.0.2.1	
# ::edge	try-01	time	before	0.0.0	0.0.0.2	
# ::edge	useful-05	ARG1	and	0.0.1.0	0.0.1.0.0	
# ::edge	useful-05	mod	particular	0.0.1.0	0.0.1.0.1	
# ::edge	waste-01	ARG0	i	0.2	0.2.1	
# ::edge	waste-01	ARG1	and	0.2	0.2.2	
# ::edge	waste-01	mode	expressive	0.2	0.2.0	
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / try-01
                  :ARG0 (i / i)
                  :ARG1 (s / solve-01
                        :ARG0 i
                        :ARG1 (p / problem
                              :poss i))
                  :time (b / before))
            :op2 (f / find-02
                  :ARG0 i
                  :ARG1 (u / useful-05
                        :ARG1 (a2 / and
                              :op1 (e / exercise)
                              :op2 (m2 / meditation))
                        :mod (p2 / particular)))
            :op3 (t2 / try-01
                  :ARG0 i
                  :ARG1 (t3 / thing
                        :example (a3 / and
                              :op1 (b2 / book
                                    :ARG0-of (h / help-01
                                          :mod (s2 / self)))
                              :op2 (t4 / tape
                                    :ARG0-of h)))
                  :mod (a4 / also)))
      :snt2 (c / contrast-01
            :ARG2 (f2 / feel-01
                  :ARG0 (i2 / i)
                  :ARG1 (t5 / thing :mode interrogative
                        :ARG1-of (l / live-01
                              :ARG0 i2)
                        :domain (t6 / this))
                  :ARG1-of (g / general-02
                        :ARG2 i2)))
      :snt3 (w / waste-01 :mode expressive
            :ARG0 (i3 / i)
            :ARG1 (a5 / and
                  :op1 (c2 / chance-02
                        :ARG0 i3
                        :ARG1 (e2 / exist-01
                              :ARG1 i3)
                        :mod (o / one))
                  :op2 (c3 / chance-02
                        :ARG0 i3
                        :ARG1 (m3 / man
                              :mod (y / young)
                              :domain i3)
                        :mod o)))
      :snt4 (b3 / beat-02
            :ARG1 (t7 / thing
                  :ARG1-of (f3 / feel-01
                        :ARG0 (i4 / i))
                  :mod (t8 / this))
            :ARG2 (a6 / away)
            :prep-at i4))

# ::node	0	multi-sentence	
# ::node	0.0	and	9-10
# ::node	0.0.0	know-01	4-5
# ::node	0.0.0.0	-	
# ::node	0.0.0.1	i	0-1
# ::node	0.0.0.2	thing	7-8
# ::node	0.0.0.2.0	do-02	7-8
# ::node	0.0.0.3	simple	1-2
# ::node	0.0.1	follow-through-07	20-21
# ::node	0.0.1.0	-	
# ::node	0.0.1.1	think-01	12-13
# ::node	0.0.1.1.0	thing	14-15
# ::node	0.0.1.1.0.0	do-02	2-3
# ::node	0.0.1.2	ever	
# ::node	0.1	and	32-33
# ::node	0.1.0	say-01	27-28
# ::node	0.1.0.0	person	54-55
# ::node	0.1.0.0.0	have-rel-role-91	54-55
# ::node	0.1.0.0.0.0	friend	25-26
# ::node	0.1.0.1	lazy	30-31
# ::node	0.1.0.1.0	i	11-12
# ::node	0.1.0.2	often	26-27
# ::node	0.1.1	possible-01	48-49
# ::node	0.1.1.0	-	
# ::node	0.1.1.1	disagree-01	36-37
# ::node	0.1.1.1.0	time	41-42
# ::node	0.1.1.1.0.0	lot	38-39
# ::node	0.2	and	57-58
# ::node	0.2.0	feel-01	44-45
# ::node	0.2.0.0	i	18-19
# ::node	0.2.0.1	thing	
# ::node	0.2.0.1.0	resemble-01	
# ::node	0.2.0.1.0.0	try-01	55-56
# ::node	0.2.0.1.0.0.0	person	
# ::node	0.2.0.1.0.0.1	everything	46-47
# ::node	0.2.0.1.0.0.1.0	do-02	16-17
# ::node	0.2.0.1.0.0.1.0.0	anyone	47-48
# ::node	0.2.0.1.0.0.1.0.1	help-01	51-52
# ::node	0.2.0.1.0.0.1.0.2	possible-01	
# ::node	0.2.1	fail-01	63-64
# ::node	0.2.1.0	again	61-62
# ::node	0.2.1.0.0	time	60-61
# ::node	0.2.1.0.1	time	58-59
# ::root	0	multi-sentence
# ::edge	again	op1	time	0.2.1.0	0.2.1.0.0	
# ::edge	again	op2	time	0.2.1.0	0.2.1.0.1	
# ::edge	and	op1	feel-01	0.2	0.2.0	
# ::edge	and	op1	know-01	0.0	0.0.0	
# ::edge	and	op1	say-01	0.1	0.1.0	
# ::edge	and	op2	fail-01	0.2	0.2.1	
# ::edge	and	op2	follow-through-07	0.0	0.0.1	
# ::edge	and	op2	possible-01	0.1	0.1.1	
# ::edge	disagree-01	ARG0	i	0.1.1.1	0.1.0.1.0	
# ::edge	disagree-01	time	time	0.1.1.1	0.1.1.1.0	
# ::edge	do-02	ARG0	anyone	0.2.0.1.0.0.1.0	0.2.0.1.0.0.1.0.0	
# ::edge	do-02	ARG0	i	0.0.0.2.0	0.0.0.1	
# ::edge	do-02	ARG0	i	0.0.1.1.0.0	0.0.0.1	
# ::edge	do-02	ARG1-of	possible-01	0.2.0.1.0.0.1.0	0.2.0.1.0.0.1.0.2	
# ::edge	do-02	ARG2	help-01	0.2.0.1.0.0.1.0	0.2.0.1.0.0.1.0.1	
# ::edge	everything	ARG1-of	do-02	0.2.0.1.0.0.1	0.2.0.1.0.0.1.0	
# ::edge	fail-01	ARG1	i	0.2.1	0.2.0.0	
# ::edge	fail-01	mod	again	0.2.1	0.2.1.0	
# ::edge	feel-01	ARG0	i	0.2.0	0.2.0.0	
# ::edge	feel-01	ARG1	thing	0.2.0	0.2.0.1	
# ::edge	follow-through-07	ARG0	i	0.0.1	0.0.0.1	
# ::edge	follow-through-07	ARG1	thing	0.0.1	0.0.1.1.0	
# ::edge	follow-through-07	polarity	-	0.0.1	0.0.1.0	
# ::edge	follow-through-07	time	ever	0.0.1	0.0.1.2	
# ::edge	follow-through-07	time	think-01	0.0.1	0.0.1.1	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.0.0	0.1.0.1.0	
# ::edge	have-rel-role-91	ARG2	friend	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	help-01	ARG0	anyone	0.2.0.1.0.0.1.0.1	0.2.0.1.0.0.1.0.0	
# ::edge	know-01	ARG0	i	0.0.0	0.0.0.1	
# ::edge	know-01	ARG1	thing	0.0.0	0.0.0.2	
# ::edge	know-01	mod	simple	0.0.0	0.0.0.3	
# ::edge	know-01	polarity	-	0.0.0	0.0.0.0	
# ::edge	lazy	domain	i	0.1.0.1	0.1.0.1.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	multi-sentence	snt3	and	0	0.2	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.0	0.1.0.0.0	
# ::edge	possible-01	ARG1	disagree-01	0.1.1	0.1.1.1	
# ::edge	possible-01	polarity	-	0.1.1	0.1.1.0	
# ::edge	resemble-01	ARG2	try-01	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	say-01	ARG0	person	0.1.0	0.1.0.0	
# ::edge	say-01	ARG1	lazy	0.1.0	0.1.0.1	
# ::edge	say-01	frequency	often	0.1.0	0.1.0.2	
# ::edge	thing	ARG1-of	do-02	0.0.0.2	0.0.0.2.0	
# ::edge	thing	ARG1-of	do-02	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	thing	ARG1-of	resemble-01	0.2.0.1	0.2.0.1.0	
# ::edge	think-01	ARG0	i	0.0.1.1	0.0.0.1	
# ::edge	think-01	ARG1	thing	0.0.1.1	0.0.1.1.0	
# ::edge	time	quant	lot	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	try-01	ARG0	person	0.2.0.1.0.0	0.2.0.1.0.0.0	
# ::edge	try-01	ARG1	everything	0.2.0.1.0.0	0.2.0.1.0.0.1	
(m / multi-sentence
      :snt1 (a / and
            :op1 (k / know-01 :polarity -
                  :ARG0 (i / i)
                  :ARG1 (t / thing
                        :ARG1-of (d / do-02
                              :ARG0 i))
                  :mod (s / simple))
            :op2 (f / follow-through-07 :polarity -
                  :ARG0 i
                  :ARG1 t3
                  :time (t2 / think-01
                        :ARG0 i
                        :ARG1 (t3 / thing
                              :ARG1-of (d2 / do-02
                                    :ARG0 i)))
                  :time (e / ever)))
      :snt2 (a2 / and
            :op1 (s2 / say-01
                  :ARG0 (p4 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 i2
                              :ARG2 (f2 / friend)))
                  :ARG1 (l / lazy
                        :domain (i2 / i))
                  :frequency (o / often))
            :op2 (p / possible-01 :polarity -
                  :ARG1 (d4 / disagree-01
                        :ARG0 i2
                        :time (t4 / time
                              :quant (l2 / lot)))))
      :snt3 (a4 / and
            :op1 (f3 / feel-01
                  :ARG0 (i3 / i)
                  :ARG1 (t5 / thing
                        :ARG1-of (r / resemble-01
                              :ARG2 (t6 / try-01
                                    :ARG0 (p2 / person)
                                    :ARG1 (e2 / everything
                                          :ARG1-of (d3 / do-02
                                                :ARG0 (a5 / anyone)
                                                :ARG2 (h / help-01
                                                      :ARG0 a5)
                                                :ARG1-of (p3 / possible-01)))))))
            :op2 (f4 / fail-01
                  :ARG1 i3
                  :mod (a6 / again
                        :op1 (t7 / time)
                        :op2 (t8 / time)))))

# ::node	0	contrast-01	10-11
# ::node	0.0	know-01	3-4
# ::node	0.0.0	-	
# ::node	0.0.1	i	0-1
# ::node	0.0.2	read-01	7-8
# ::node	0.0.2.0	interrogative	
# ::node	0.0.2.1	anyone	5-6
# ::node	0.0.2.2	this	8-9
# ::node	0.1	and	15-16
# ::node	0.1.0	feel-01	16-17
# ::node	0.1.0.0	desperate	14-15
# ::node	0.1.0.1	just	12-13
# ::node	0.1.1	feel-01	13-14
# ::node	0.1.1.0	need-01	18-19
# ::node	0.1.1.0.0	tell-01	20-21
# ::node	0.1.1.0.0.0	someone	21-22
# ::root	0	contrast-01
# ::edge	and	op1	feel-01	0.1	0.1.0	
# ::edge	and	op2	feel-01	0.1	0.1.1	
# ::edge	contrast-01	ARG1	know-01	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	feel-01	ARG0	i	0.1.0	0.0.1	
# ::edge	feel-01	ARG0	i	0.1.1	0.0.1	
# ::edge	feel-01	ARG1	desperate	0.1.0	0.1.0.0	
# ::edge	feel-01	ARG1	need-01	0.1.1	0.1.1.0	
# ::edge	feel-01	mod	just	0.1.0	0.1.0.1	
# ::edge	know-01	ARG0	i	0.0	0.0.1	
# ::edge	know-01	ARG1	read-01	0.0	0.0.2	
# ::edge	know-01	polarity	-	0.0	0.0.0	
# ::edge	need-01	ARG0	i	0.1.1.0	0.0.1	
# ::edge	need-01	ARG1	tell-01	0.1.1.0	0.1.1.0.0	
# ::edge	read-01	ARG0	anyone	0.0.2	0.0.2.1	
# ::edge	read-01	ARG1	this	0.0.2	0.0.2.2	
# ::edge	read-01	mode	interrogative	0.0.2	0.0.2.0	
# ::edge	tell-01	ARG0	i	0.1.1.0.0	0.0.1	
# ::edge	tell-01	ARG2	someone	0.1.1.0.0	0.1.1.0.0.0	
(c / contrast-01
      :ARG1 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (r / read-01 :mode interrogative
                  :ARG0 (a / anyone)
                  :ARG1 (t / this)))
      :ARG2 (a2 / and
            :op1 (f / feel-01
                  :ARG0 i
                  :ARG1 (d / desperate)
                  :mod (j / just))
            :op2 (f2 / feel-01
                  :ARG0 i
                  :ARG1 (n / need-01
                        :ARG0 i
                        :ARG1 (t2 / tell-01
                              :ARG0 i
                              :ARG2 (s / someone))))))

# ::node	0	multi-sentence	
# ::node	0.0	and	6-7
# ::node	0.0.0	leave-11	3-4
# ::node	0.0.0.0	i	2-3
# ::node	0.0.0.1	home	4-5
# ::node	0.0.0.2	date-entity	1-2
# ::node	0.0.0.2.0	9	1-2
# ::node	0.0.1	start-01	7-8
# ::node	0.0.1.0	university	9-10
# ::node	0.1	contrast-01	19-20
# ::node	0.1.0	anxious	14-15
# ::node	0.1.0.0	i	11-12
# ::node	0.1.0.1	do-02	16-17
# ::node	0.1.0.1.0	this	0-1
# ::node	0.1.0.2	incredible	13-14
# ::node	0.1.1	delay-01	21-22
# ::node	0.1.1.0	think-01	22-23
# ::node	0.1.1.1	until	25-26
# ::node	0.1.1.1.0	get-05	27-28
# ::node	0.1.1.1.0.0	here	28-29
# ::node	0.2	and	35-36
# ::node	0.2.0	be-located-at-91	
# ::node	0.2.0.0	i	26-27
# ::node	0.2.0.1	here	33-34
# ::node	0.2.0.2	now	30-31
# ::node	0.2.1	be-located-at-91	
# ::node	0.2.1.0	over	39-40
# ::node	0.2.1.0.0	temporal-quantity	41-42
# ::node	0.2.1.0.0.0	2	40-41
# ::node	0.2.1.0.0.1	week	41-42
# ::node	0.3	and	50-51
# ::node	0.3.0	feel-01	51-52
# ::node	0.3.0.0	i	31-32
# ::node	0.3.0.1	overwhelm-01	46-47
# ::node	0.3.0.1.0	it	24-25
# ::node	0.3.0.1.0.0	all	49-50
# ::node	0.3.0.1.1	terrible	45-46
# ::node	0.3.1	feel-01	44-45
# ::node	0.3.1.0	and	53-54
# ::node	0.3.1.0.0	intelligent-01	52-53
# ::node	0.3.1.0.0.0	-	52-53
# ::node	0.3.1.0.1	awkward	55-56
# ::node	0.3.1.0.1.0	social	54-55
# ::root	0	multi-sentence
# ::edge	and	op1	be-located-at-91	0.2	0.2.0	
# ::edge	and	op1	feel-01	0.3	0.3.0	
# ::edge	and	op1	intelligent-01	0.3.1.0	0.3.1.0.0	
# ::edge	and	op1	leave-11	0.0	0.0.0	
# ::edge	and	op2	awkward	0.3.1.0	0.3.1.0.1	
# ::edge	and	op2	be-located-at-91	0.2	0.2.1	
# ::edge	and	op2	feel-01	0.3	0.3.1	
# ::edge	and	op2	start-01	0.0	0.0.1	
# ::edge	anxious	degree	incredible	0.1.0	0.1.0.2	
# ::edge	anxious	domain	i	0.1.0	0.1.0.0	
# ::edge	anxious	topic	do-02	0.1.0	0.1.0.1	
# ::edge	awkward	mod	social	0.3.1.0.1	0.3.1.0.1.0	
# ::edge	be-located-at-91	ARG1	i	0.2.0	0.2.0.0	
# ::edge	be-located-at-91	ARG1	i	0.2.1	0.2.0.0	
# ::edge	be-located-at-91	ARG2	here	0.2.0	0.2.0.1	
# ::edge	be-located-at-91	ARG2	here	0.2.1	0.2.0.1	
# ::edge	be-located-at-91	time	now	0.2.0	0.2.0.2	
# ::edge	be-located-at-91	time	over	0.2.1	0.2.1.0	
# ::edge	contrast-01	ARG1	anxious	0.1	0.1.0	
# ::edge	contrast-01	ARG2	delay-01	0.1	0.1.1	
# ::edge	date-entity	month	9	0.0.0.2	0.0.0.2.0	
# ::edge	delay-01	ARG0	i	0.1.1	0.1.0.0	
# ::edge	delay-01	ARG1	think-01	0.1.1	0.1.1.0	
# ::edge	delay-01	ARG2	until	0.1.1	0.1.1.1	
# ::edge	do-02	ARG0	i	0.1.0.1	0.1.0.0	
# ::edge	do-02	ARG1	this	0.1.0.1	0.1.0.1.0	
# ::edge	feel-01	ARG0	i	0.3.0	0.3.0.0	
# ::edge	feel-01	ARG0	i	0.3.1	0.3.0.0	
# ::edge	feel-01	ARG1	and	0.3.1	0.3.1.0	
# ::edge	feel-01	ARG1	overwhelm-01	0.3.0	0.3.0.1	
# ::edge	get-05	ARG1	i	0.1.1.1.0	0.1.0.0	
# ::edge	get-05	ARG2	here	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	intelligent-01	ARG1	i	0.3.1.0.0	0.3.0.0	
# ::edge	intelligent-01	polarity	-	0.3.1.0.0	0.3.1.0.0.0	
# ::edge	it	mod	all	0.3.0.1.0	0.3.0.1.0.0	
# ::edge	leave-11	ARG0	i	0.0.0	0.0.0.0	
# ::edge	leave-11	ARG1	home	0.0.0	0.0.0.1	
# ::edge	leave-11	time	date-entity	0.0.0	0.0.0.2	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	multi-sentence	snt3	and	0	0.2	
# ::edge	multi-sentence	snt4	and	0	0.3	
# ::edge	over	op1	temporal-quantity	0.2.1.0	0.2.1.0.0	
# ::edge	overwhelm-01	ARG0	it	0.3.0.1	0.3.0.1.0	
# ::edge	overwhelm-01	ARG1	i	0.3.0.1	0.3.0.0	
# ::edge	overwhelm-01	degree	terrible	0.3.0.1	0.3.0.1.1	
# ::edge	start-01	ARG0	i	0.0.1	0.0.0.0	
# ::edge	start-01	ARG2	university	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	quant	2	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	temporal-quantity	unit	week	0.2.1.0.0	0.2.1.0.0.1	
# ::edge	think-01	ARG0	i	0.1.1.0	0.1.0.0	
# ::edge	think-01	ARG1	this	0.1.1.0	0.1.0.1.0	
# ::edge	until	op1	get-05	0.1.1.1	0.1.1.1.0	
(m / multi-sentence
      :snt1 (a / and
            :op1 (l / leave-11
                  :ARG0 (i / i)
                  :ARG1 (h / home)
                  :time (d / date-entity :month 9))
            :op2 (s / start-01
                  :ARG0 i
                  :ARG2 (u / university)))
      :snt2 (c / contrast-01
            :ARG1 (a7 / anxious
                  :domain (i2 / i)
                  :topic (d2 / do-02
                        :ARG0 i2
                        :ARG1 (t3 / this))
                  :degree (i4 / incredible))
            :ARG2 (d3 / delay-01
                  :ARG0 i2
                  :ARG1 (t2 / think-01
                        :ARG0 i2
                        :ARG1 t3)
                  :ARG2 (u2 / until
                        :op1 (g / get-05
                              :ARG1 i2
                              :ARG2 (h2 / here)))))
      :snt3 (a2 / and
            :op1 (b / be-located-at-91
                  :ARG1 (i3 / i)
                  :ARG2 (h3 / here)
                  :time (n / now))
            :op2 (b2 / be-located-at-91
                  :ARG1 i3
                  :ARG2 h3
                  :time (o / over
                        :op1 (t / temporal-quantity :quant 2
                              :unit (w / week)))))
      :snt4 (a3 / and
            :op1 (f / feel-01
                  :ARG0 (i5 / i)
                  :ARG1 (o2 / overwhelm-01
                        :ARG0 (i6 / it
                              :mod (a4 / all))
                        :ARG1 i5
                        :degree (t4 / terrible)))
            :op2 (f2 / feel-01
                  :ARG0 i5
                  :ARG1 (a5 / and
                        :op1 (i7 / intelligent-01 :polarity -
                              :ARG1 i5)
                        :op2 (a6 / awkward
                              :mod (s2 / social))))))

# ::node	0	multi-sentence	
# ::node	0.0	struggle-01	3-4
# ::node	0.0.0	i	0-1
# ::node	0.0.1	emotional	4-5
# ::node	0.0.2	live-01	
# ::node	0.0.2.0	majority	7-8
# ::node	0.0.3	and	29-30
# ::node	0.0.3.0	lose-02	20-21
# ::node	0.0.3.0.0	person	40-41
# ::node	0.0.3.0.0.0	have-rel-role-91	40-41
# ::node	0.0.3.0.0.0.0	dad	22-23
# ::node	0.0.3.0.1	around	24-25
# ::node	0.0.3.0.1.0	age-01	26-27
# ::node	0.0.3.0.1.0.0	temporal-quantity	61-62
# ::node	0.0.3.0.1.0.0.0	9	28-29
# ::node	0.0.3.0.1.0.0.1	year	61-62
# ::node	0.0.3.1	blame-01	33-34
# ::node	0.0.3.1.0	thing	37-38
# ::node	0.0.3.1.0.0	feel-01	37-38
# ::node	0.0.3.1.1	always	30-31
# ::node	0.0.4	since	11-12
# ::node	0.0.4.0	move-01	12-13
# ::node	0.0.4.0.0	school	15-16
# ::node	0.0.4.0.0.0	secondary	14-15
# ::node	0.1	have-03	1-2
# ::node	0.1.0	i	18-19
# ::node	0.1.1	period	43-44
# ::node	0.1.1.0	2	42-43
# ::node	0.1.1.1	counsel-01	45-46
# ::node	0.1.1.2	live-01	
# ::node	0.1.2	date-interval	
# ::node	0.1.2.0	date-entity	55-57
# ::node	0.1.2.0.0	2009	55-57
# ::node	0.1.2.0.1	12	55-57
# ::node	0.1.2.1	year	
# ::node	0.1.2.1.0	this	60-61
# ::node	0.1.2.1.1	around	58-59
# ::node	0.1.2.1.1.0	date-entity	59-60
# ::node	0.1.2.1.1.0.0	3	59-60
# ::node	0.1.3	roughly	51-52
# ::node	0.1.3.0	temporal-quantity	53-54
# ::node	0.1.3.0.0	15	52-53
# ::node	0.1.3.0.1	month	53-54
# ::root	0	multi-sentence
# ::edge	age-01	ARG1	i	0.0.3.0.1.0	0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0.3.0.1.0	0.0.3.0.1.0.0	
# ::edge	and	op1	lose-02	0.0.3	0.0.3.0	
# ::edge	and	op2	blame-01	0.0.3	0.0.3.1	
# ::edge	around	op1	age-01	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	around	op1	date-entity	0.1.2.1.1	0.1.2.1.1.0	
# ::edge	blame-01	ARG0	i	0.0.3.1	0.0.0	
# ::edge	blame-01	ARG1	lose-02	0.0.3.1	0.0.3.0	
# ::edge	blame-01	ARG2	thing	0.0.3.1	0.0.3.1.0	
# ::edge	blame-01	time	always	0.0.3.1	0.0.3.1.1	
# ::edge	counsel-01	ARG1	i	0.1.1.1	0.1.0	
# ::edge	date-entity	month	12	0.1.2.0	0.1.2.0.1	
# ::edge	date-entity	month	3	0.1.2.1.1.0	0.1.2.1.1.0.0	
# ::edge	date-entity	year	2009	0.1.2.0	0.1.2.0.0	
# ::edge	date-interval	op1	date-entity	0.1.2	0.1.2.0	
# ::edge	date-interval	op2	year	0.1.2	0.1.2.1	
# ::edge	feel-01	ARG0	i	0.0.3.1.0.0	0.0.0	
# ::edge	have-03	ARG0	i	0.1	0.1.0	
# ::edge	have-03	ARG1	period	0.1	0.1.1	
# ::edge	have-03	duration	roughly	0.1	0.1.3	
# ::edge	have-03	time	date-interval	0.1	0.1.2	
# ::edge	have-rel-role-91	ARG1	i	0.0.3.0.0.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	dad	0.0.3.0.0.0	0.0.3.0.0.0.0	
# ::edge	live-01	ARG0	i	0.0.2	0.0.0	
# ::edge	live-01	ARG0	i	0.1.1.2	0.1.0	
# ::edge	live-01	quant	majority	0.0.2	0.0.2.0	
# ::edge	lose-02	ARG0	i	0.0.3.0	0.0.0	
# ::edge	lose-02	ARG1	person	0.0.3.0	0.0.3.0.0	
# ::edge	lose-02	time	around	0.0.3.0	0.0.3.0.1	
# ::edge	move-01	ARG1	i	0.0.4.0	0.0.0	
# ::edge	move-01	ARG2	school	0.0.4.0	0.0.4.0.0	
# ::edge	multi-sentence	snt1	struggle-01	0	0.0	
# ::edge	multi-sentence	snt2	have-03	0	0.1	
# ::edge	period	consist-of	counsel-01	0.1.1	0.1.1.1	
# ::edge	period	quant	2	0.1.1	0.1.1.0	
# ::edge	period	time	live-01	0.1.1	0.1.1.2	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.3.0.0	0.0.3.0.0.0	
# ::edge	roughly	op1	temporal-quantity	0.1.3	0.1.3.0	
# ::edge	school	mod	secondary	0.0.4.0.0	0.0.4.0.0.0	
# ::edge	since	op1	move-01	0.0.4	0.0.4.0	
# ::edge	struggle-01	ARG0	i	0.0	0.0.0	
# ::edge	struggle-01	concession	and	0.0	0.0.3	
# ::edge	struggle-01	duration	live-01	0.0	0.0.2	
# ::edge	struggle-01	manner	emotional	0.0	0.0.1	
# ::edge	struggle-01	time	since	0.0	0.0.4	
# ::edge	temporal-quantity	quant	15	0.1.3.0	0.1.3.0.0	
# ::edge	temporal-quantity	quant	9	0.0.3.0.1.0.0	0.0.3.0.1.0.0.0	
# ::edge	temporal-quantity	unit	month	0.1.3.0	0.1.3.0.1	
# ::edge	temporal-quantity	unit	year	0.0.3.0.1.0.0	0.0.3.0.1.0.0.1	
# ::edge	thing	ARG1-of	feel-01	0.0.3.1.0	0.0.3.1.0.0	
# ::edge	year	mod	around	0.1.2.1	0.1.2.1.1	
# ::edge	year	mod	this	0.1.2.1	0.1.2.1.0	
(m2 / multi-sentence
      :snt1 (s / struggle-01
            :ARG0 (i / i)
            :manner (e / emotional)
            :duration (l / live-01
                  :ARG0 i
                  :quant (m3 / majority))
            :concession (a / and
                  :op1 (l2 / lose-02
                        :ARG0 i
                        :ARG1 (p2 / person
                              :ARG0-of (h2 / have-rel-role-91
                                    :ARG1 i
                                    :ARG2 (d3 / dad)))
                        :time (a2 / around
                              :op1 (a3 / age-01
                                    :ARG1 i
                                    :ARG2 (t2 / temporal-quantity :quant 9
                                          :unit (y / year)))))
                  :op2 (b / blame-01
                        :ARG0 i
                        :ARG1 l2
                        :ARG2 (t3 / thing
                              :ARG1-of (f / feel-01
                                    :ARG0 i))
                        :time (a5 / always)))
            :time (s4 / since
                  :op1 (m4 / move-01
                        :ARG1 i
                        :ARG2 (s2 / school
                              :mod (s3 / secondary)))))
      :snt2 (h / have-03
            :ARG0 (i2 / i)
            :ARG1 (p / period :quant 2
                  :consist-of (c / counsel-01
                        :ARG1 i2)
                  :time (l3 / live-01
                        :ARG0 i2))
            :time (d4 / date-interval
                  :op1 (d / date-entity :year 2009 :month 12)
                  :op2 (y2 / year
                        :mod (t4 / this)
                        :mod (a4 / around
                              :op1 (d2 / date-entity :month 3))))
            :duration (r2 / roughly
                  :op1 (t / temporal-quantity :quant 15
                        :unit (m / month)))))

# ::node	0	possible-01	
# ::node	0.0	so	0-1
# ::node	0.1	or	5-6
# ::node	0.1.0	dyspraxic	4-5
# ::node	0.1.1	have-03	6-7
# ::node	0.1.1.0	you	2-3
# ::node	0.1.1.1	tendon	8-9
# ::node	0.1.1.1.0	short	7-8
# ::root	0	possible-01
# ::edge	dyspraxic	domain	you	0.1.0	0.1.1.0	
# ::edge	have-03	ARG0	you	0.1.1	0.1.1.0	
# ::edge	have-03	ARG1	tendon	0.1.1	0.1.1.1	
# ::edge	or	op1	dyspraxic	0.1	0.1.0	
# ::edge	or	op2	have-03	0.1	0.1.1	
# ::edge	possible-01	ARG1	or	0	0.1	
# ::edge	possible-01	mod	so	0	0.0	
# ::edge	tendon	mod	short	0.1.1.1	0.1.1.1.0	
(p / possible-01
      :mod (s / so)
      :ARG1 (o / or
            :op1 (d / dyspraxic
                  :domain y)
            :op2 (h / have-03
                  :ARG0 (y / you)
                  :ARG1 (t / tendon
                        :mod (s2 / short)))))

# ::node	0	multi-sentence	
# ::node	0.0	or	0-1
# ::node	0.0.0	get-04	14-15
# ::node	0.0.0.0	you	8-9
# ::node	0.0.0.1	make-02	20-21
# ::node	0.0.0.1.0	person	16-17
# ::node	0.0.0.1.0.0	include-91	16-17
# ::node	0.0.0.1.0.0.0	person	
# ::node	0.0.0.1.0.0.0.0	have-rel-role-91	18-19
# ::node	0.0.0.1.0.0.0.0.0	friend	18-19
# ::node	0.0.0.1.1	laugh-01	22-23
# ::node	0.0.0.2	start-01	9-10
# ::node	0.0.0.2.0	feel-01	11-12
# ::node	0.0.0.2.0.0	panic-01	33-34
# ::node	0.0.1	possible-01	
# ::node	0.0.1.0	-	
# ::node	0.0.1.1	do-02	4-5
# ::node	0.0.1.1.0	that	5-6
# ::node	0.1	and	28-29
# ::node	0.1.0	work-09	25-26
# ::node	0.1.0.0	it	24-25
# ::node	0.1.0.1	i	
# ::node	0.1.1	suffer-01	30-31
# ::node	0.1.1.0	i	29-30
# ::node	0.1.1.1	attack	34-35
# ::node	0.1.1.1.0	panic-01	12-13
# ::node	0.1.1.1.1	random	32-33
# ::node	0.1.2	lol	35-36
# ::node	0.1.2.0	expressive	
# ::root	0	multi-sentence
# ::edge	and	mod	lol	0.1	0.1.2	
# ::edge	and	op1	work-09	0.1	0.1.0	
# ::edge	and	op2	suffer-01	0.1	0.1.1	
# ::edge	attack	mod	panic-01	0.1.1.1	0.1.1.1.0	
# ::edge	attack	mod	random	0.1.1.1	0.1.1.1.1	
# ::edge	do-02	ARG0	you	0.0.1.1	0.0.0.0	
# ::edge	do-02	ARG1	that	0.0.1.1	0.0.1.1.0	
# ::edge	feel-01	ARG0	you	0.0.0.2.0	0.0.0.0	
# ::edge	feel-01	ARG1	panic-01	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	get-04	ARG0	you	0.0.0	0.0.0.0	
# ::edge	get-04	ARG1	make-02	0.0.0	0.0.0.1	
# ::edge	get-04	time	start-01	0.0.0	0.0.0.2	
# ::edge	have-rel-role-91	ARG1	you	0.0.0.1.0.0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.0.1.0.0.0.0	0.0.0.1.0.0.0.0.0	
# ::edge	include-91	ARG2	person	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	laugh-01	ARG0	you	0.0.0.1.1	0.0.0.0	
# ::edge	lol	mode	expressive	0.1.2	0.1.2.0	
# ::edge	make-02	ARG0	person	0.0.0.1	0.0.0.1.0	
# ::edge	make-02	ARG1	laugh-01	0.0.0.1	0.0.0.1.1	
# ::edge	multi-sentence	snt1	or	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	or	condition	possible-01	0.0	0.0.1	
# ::edge	or	op2	get-04	0.0	0.0.0	
# ::edge	panic-01	ARG1	you	0.0.0.2.0.0	0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	person	ARG1-of	include-91	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	possible-01	ARG1	do-02	0.0.1	0.0.1.1	
# ::edge	possible-01	polarity	-	0.0.1	0.0.1.0	
# ::edge	start-01	ARG0	you	0.0.0.2	0.0.0.0	
# ::edge	start-01	ARG1	feel-01	0.0.0.2	0.0.0.2.0	
# ::edge	suffer-01	ARG0	i	0.1.1	0.1.1.0	
# ::edge	suffer-01	ARG1	attack	0.1.1	0.1.1.1	
# ::edge	work-09	ARG1	it	0.1.0	0.1.0.0	
# ::edge	work-09	ARG2	i	0.1.0	0.1.0.1	
(m / multi-sentence
      :snt1 (o / or
            :op2 (g / get-04
                  :ARG0 (y / you)
                  :ARG1 (m2 / make-02
                        :ARG0 (p3 / person
                              :ARG1-of (i3 / include-91
                                    :ARG2 (p4 / person
                                          :ARG0-of (h / have-rel-role-91
                                                :ARG1 y
                                                :ARG2 (f / friend)))))
                        :ARG1 (l / laugh-01
                              :ARG0 y))
                  :time (s / start-01
                        :ARG0 y
                        :ARG1 (f3 / feel-01
                              :ARG0 y
                              :ARG1 (p / panic-01
                                    :ARG1 y))))
            :condition (p5 / possible-01 :polarity -
                  :ARG1 (d / do-02
                        :ARG0 y
                        :ARG1 (t / that))))
      :snt2 (a / and
            :op1 (w / work-09
                  :ARG1 (i4 / it)
                  :ARG2 (i2 / i))
            :op2 (s2 / suffer-01
                  :ARG0 (i / i)
                  :ARG1 (a2 / attack
                        :mod (p2 / panic-01)
                        :mod (r / random)))
            :mod (l2 / lol :mode expressive)))

# ::node	0	start-01	1-2
# ::node	0.0	start-01	10-11
# ::node	0.0.0	worry-01	
# ::node	0.0.0.0	thing	23-24
# ::node	0.0.0.0.0	tiny	15-16
# ::node	0.0.0.1	i	7-8
# ::node	0.0.0.2	really	12-13
# ::node	0.0.1	severe	27-28
# ::node	0.0.1.0	-	26-26
# ::node	0.0.1.1	equal	
# ::node	0.0.1.2	you	29-30
# ::node	0.0.1.3	sound-01	21-22
# ::node	0.0.1.3.0	thing	16-17
# ::node	0.0.2	just	9-10
# ::root	0	start-01
# ::edge	severe	compared-to	you	0.0.1	0.0.1.2	
# ::edge	severe	degree	equal	0.0.1	0.0.1.1	
# ::edge	severe	polarity	-	0.0.1	0.0.1.0	
# ::edge	severe	source	sound-01	0.0.1	0.0.1.3	
# ::edge	sound-01	ARG1	thing	0.0.1.3	0.0.1.3.0	
# ::edge	start-01	ARG1	start-01	0	0.0	
# ::edge	start-01	ARG1	worry-01	0.0	0.0.0	
# ::edge	start-01	concession	severe	0.0	0.0.1	
# ::edge	start-01	mod	just	0.0	0.0.2	
# ::edge	thing	mod	tiny	0.0.0.0	0.0.0.0.0	
# ::edge	worry-01	ARG0	thing	0.0.0	0.0.0.0	
# ::edge	worry-01	ARG1	i	0.0.0	0.0.0.1	
# ::edge	worry-01	mod	really	0.0.0	0.0.0.2	
(s / start-01
      :ARG1 (s2 / start-01
            :ARG1 (w / worry-01
                  :ARG0 (t / thing
                        :mod (t2 / tiny))
                  :ARG1 (i / i)
                  :mod (r / really))
            :concession (s3 / severe :polarity -
                  :degree (e / equal)
                  :compared-to (y / you)
                  :source (s4 / sound-01
                        :ARG1 (t4 / thing)))
            :mod (j / just)))

# ::node	0	multi-sentence	
# ::node	0.0	recommend-01	
# ::node	0.0.0	start-01	13-14
# ::node	0.0.0.0	-	
# ::node	0.0.0.1	try-01	3-4
# ::node	0.0.0.1.0	i	1-2
# ::node	0.0.0.1.1	eye-01	7-8
# ::node	0.0.0.1.1.0	anxiety	10-11
# ::node	0.0.0.1.1.0.0	you	
# ::node	0.0.1	cause-01	14-15
# ::node	0.0.1.0	make-01	17-18
# ::node	0.0.1.0.0	and	20-21
# ::node	0.0.1.0.0.0	tense-01	19-20
# ::node	0.0.1.0.0.1	likely-01	22-23
# ::node	0.0.1.0.0.1.0	more	25-26
# ::node	0.0.1.0.0.1.1	panic-01	26-27
# ::node	0.0.1.0.0.1.1.0	more	21-22
# ::node	0.0.2	well	0-1
# ::node	0.1	circle	28-29
# ::node	0.1.0	demise	30-31
# ::node	0.1.1	there	31-32
# ::root	0	multi-sentence
# ::edge	and	op1	tense-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	and	op2	likely-01	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	anxiety	poss	you	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	cause-01	ARG0	make-01	0.0.1	0.0.1.0	
# ::edge	circle	location	there	0.1	0.1.1	
# ::edge	circle	mod	demise	0.1	0.1.0	
# ::edge	eye-01	ARG0	i	0.0.0.1.1	0.0.0.1.0	
# ::edge	eye-01	ARG1	anxiety	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	likely-01	ARG1	panic-01	0.0.1.0.0.1	0.0.1.0.0.1.1	
# ::edge	likely-01	degree	more	0.0.1.0.0.1	0.0.1.0.0.1.0	
# ::edge	make-01	ARG0	eye-01	0.0.1.0	0.0.0.1.1	
# ::edge	make-01	ARG1	and	0.0.1.0	0.0.1.0.0	
# ::edge	multi-sentence	snt1	recommend-01	0	0.0	
# ::edge	multi-sentence	snt2	circle	0	0.1	
# ::edge	panic-01	ARG1	you	0.0.1.0.0.1.1	0.0.0.1.1.0.0	
# ::edge	panic-01	degree	more	0.0.1.0.0.1.1	0.0.1.0.0.1.1.0	
# ::edge	recommend-01	ARG1	start-01	0.0	0.0.0	
# ::edge	recommend-01	ARG1-of	cause-01	0.0	0.0.1	
# ::edge	recommend-01	mod	well	0.0	0.0.2	
# ::edge	start-01	ARG2	try-01	0.0.0	0.0.0.1	
# ::edge	start-01	polarity	-	0.0.0	0.0.0.0	
# ::edge	tense-01	ARG1	i	0.0.1.0.0.0	0.0.0.1.0	
# ::edge	try-01	ARG0	i	0.0.0.1	0.0.0.1.0	
# ::edge	try-01	ARG1	eye-01	0.0.0.1	0.0.0.1.1	
(m / multi-sentence
      :snt1 (r / recommend-01
            :ARG1 (s / start-01 :polarity -
                  :ARG2 (t / try-01
                        :ARG0 (i / i)
                        :ARG1 (e / eye-01
                              :ARG0 i
                              :ARG1 (a / anxiety
                                    :poss (y / you)))))
            :ARG1-of (c / cause-01
                  :ARG0 (m2 / make-01
                        :ARG0 e
                        :ARG1 (a2 / and
                              :op1 (t2 / tense-01
                                    :ARG1 i)
                              :op2 (l / likely-01
                                    :degree (m3 / more)
                                    :ARG1 (p2 / panic-01
                                          :ARG1 y
                                          :degree (m4 / more))))))
            :mod (w / well))
      :snt2 (c2 / circle
            :mod (d / demise)
            :location (t3 / there)))

# ::node	0	recommend-01	
# ::node	0.0	i	1-2
# ::node	0.1	try-01	3-4
# ::node	0.1.0	focus-01	7-8
# ::node	0.1.0.0	something	9-10
# ::node	0.1.0.0.0	guarantee-01	
# ::node	0.1.0.0.0.0	make-02	14-15
# ::node	0.1.0.0.0.0.0	or	17-18
# ::node	0.1.0.0.0.0.0.0	smile-01	16-17
# ::node	0.1.0.0.0.0.0.0.0	you	15-16
# ::node	0.1.0.0.0.0.0.1	feel-01	26-27
# ::node	0.1.0.0.0.0.0.1.0	happy	19-20
# ::node	0.1.0.0.0.0.0.1.0.0	more	
# ::node	0.1.0.1	as-soon-as	
# ::node	0.1.0.1.0	start-01	24-25
# ::node	0.1.0.1.0.0	feel-01	18-19
# ::node	0.1.0.1.0.0.0	panic-01	29-30
# ::node	0.1.0.1.0.0.0.0	anything	31-32
# ::node	0.1.0.1.0.0.0.1	bit	28-29
# ::root	0	recommend-01
# ::edge	as-soon-as	op1	start-01	0.1.0.1	0.1.0.1.0	
# ::edge	feel-01	ARG0	you	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0.0.0	
# ::edge	feel-01	ARG0	you	0.1.0.1.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	feel-01	ARG1	happy	0.1.0.0.0.0.0.1	0.1.0.0.0.0.0.1.0	
# ::edge	feel-01	ARG1	panic-01	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	focus-01	ARG0	you	0.1.0	0.1.0.0.0.0.0.0.0	
# ::edge	focus-01	ARG2	something	0.1.0	0.1.0.0	
# ::edge	focus-01	time	as-soon-as	0.1.0	0.1.0.1	
# ::edge	guarantee-01	ARG0-of	make-02	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	happy	degree	more	0.1.0.0.0.0.0.1.0	0.1.0.0.0.0.0.1.0.0	
# ::edge	make-02	ARG1	or	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	or	op1	smile-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	or	op2	feel-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.1	
# ::edge	panic-01	ARG0	anything	0.1.0.1.0.0.0	0.1.0.1.0.0.0.0	
# ::edge	panic-01	ARG1	you	0.1.0.1.0.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	panic-01	quant	bit	0.1.0.1.0.0.0	0.1.0.1.0.0.0.1	
# ::edge	recommend-01	ARG0	i	0	0.0	
# ::edge	recommend-01	ARG1	try-01	0	0.1	
# ::edge	smile-01	ARG0	you	0.1.0.0.0.0.0.0	0.1.0.0.0.0.0.0.0	
# ::edge	something	ARG0-of	guarantee-01	0.1.0.0	0.1.0.0.0	
# ::edge	start-01	ARG0	you	0.1.0.1.0	0.1.0.0.0.0.0.0.0	
# ::edge	start-01	ARG1	feel-01	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	try-01	ARG0	you	0.1	0.1.0.0.0.0.0.0.0	
# ::edge	try-01	ARG1	focus-01	0.1	0.1.0	
(r / recommend-01
      :ARG0 (i / i)
      :ARG1 (t / try-01
            :ARG0 y
            :ARG1 (f / focus-01
                  :ARG0 y
                  :ARG2 (s / something
                        :ARG0-of (g / guarantee-01
                              :ARG0-of (m / make-02
                                    :ARG1 (o / or
                                          :op1 (s2 / smile-01
                                                :ARG0 (y / you))
                                          :op2 (f2 / feel-01
                                                :ARG0 y
                                                :ARG1 (h / happy
                                                      :degree (m2 / more)))))))
                  :time (a / as-soon-as
                        :op1 (s3 / start-01
                              :ARG0 y
                              :ARG1 (f3 / feel-01
                                    :ARG0 y
                                    :ARG1 (p / panic-01
                                          :ARG0 (a2 / anything)
                                          :ARG1 y
                                          :quant (b / bit))))))))

# ::node	0	contrast-01	
# ::node	0.0	go-02	10-11
# ::node	0.0.0	imperative	
# ::node	0.0.1	you	
# ::node	0.0.2	doctor	13-14
# ::node	0.0.3	worsen-01	5-6
# ::node	0.0.3.0	it	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	go-02	0	0.0	
# ::edge	go-02	ARG0	you	0.0	0.0.1	
# ::edge	go-02	ARG4	doctor	0.0	0.0.2	
# ::edge	go-02	condition	worsen-01	0.0	0.0.3	
# ::edge	go-02	mode	imperative	0.0	0.0.0	
# ::edge	worsen-01	ARG1	it	0.0.3	0.0.3.0	
(c / contrast-01
      :ARG2 (g / go-02 :mode imperative
            :ARG0 (y / you)
            :ARG4 (d / doctor)
            :condition (w / worsen-01
                  :ARG1 (i / it))))

# ::node	0	have-03	1-2
# ::node	0.0	i	0-1
# ::node	0.1	person	5-6
# ::node	0.1.0	suffer-01	5-6
# ::node	0.1.0.0	anxiety	8-9
# ::node	0.1.0.0.0	severe	7-8
# ::node	0.1.0.0.1	prevent-01	11-12
# ::node	0.1.0.0.1.0	and	17-18
# ::node	0.1.0.0.1.0.0	leave-11	14-15
# ::node	0.1.0.0.1.0.0.0	house	16-17
# ::node	0.1.0.0.1.0.1	do-02	18-19
# ::node	0.1.0.0.1.0.1.0	thing	
# ::node	0.1.0.0.1.1	possible-01	27-28
# ::node	0.1.0.0.1.2	cause-01	20-21
# ::node	0.1.0.0.1.2.0	worry-02	24-25
# ::node	0.1.0.0.1.2.0.0	thing	19-20
# ::node	0.1.0.0.1.2.0.0.0	go-08	28-29
# ::node	0.1.0.0.1.2.0.0.0.0	wrong	29-30
# ::node	0.1.0.0.1.2.0.0.0.1	possible-01	10-11
# ::node	0.1.0.0.1.2.0.1	so	23-24
# ::node	0.1.1	have-rel-role-91	3-4
# ::node	0.1.1.0	friend	3-4
# ::root	0	have-03
# ::edge	and	op1	leave-11	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	and	op2	do-02	0.1.0.0.1.0	0.1.0.0.1.0.1	
# ::edge	anxiety	ARG3-of	prevent-01	0.1.0.0	0.1.0.0.1	
# ::edge	anxiety	mod	severe	0.1.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG0	worry-02	0.1.0.0.1.2	0.1.0.0.1.2.0	
# ::edge	do-02	ARG0	person	0.1.0.0.1.0.1	0.1	
# ::edge	do-02	ARG1	thing	0.1.0.0.1.0.1	0.1.0.0.1.0.1.0	
# ::edge	go-08	ARG1-of	possible-01	0.1.0.0.1.2.0.0.0	0.1.0.0.1.2.0.0.0.1	
# ::edge	go-08	ARG2	wrong	0.1.0.0.1.2.0.0.0	0.1.0.0.1.2.0.0.0.0	
# ::edge	have-03	ARG0	i	0	0.0	
# ::edge	have-03	ARG1	person	0	0.1	
# ::edge	have-rel-role-91	ARG1	i	0.1.1	0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.1.1	0.1.1.0	
# ::edge	leave-11	ARG0	person	0.1.0.0.1.0.0	0.1	
# ::edge	leave-11	ARG1	house	0.1.0.0.1.0.0	0.1.0.0.1.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1	0.1.1	
# ::edge	person	ARG0-of	suffer-01	0.1	0.1.0	
# ::edge	prevent-01	ARG0	person	0.1.0.0.1	0.1	
# ::edge	prevent-01	ARG1	and	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	prevent-01	ARG1-of	cause-01	0.1.0.0.1	0.1.0.0.1.2	
# ::edge	prevent-01	ARG1-of	possible-01	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	suffer-01	ARG1	anxiety	0.1.0	0.1.0.0	
# ::edge	thing	ARG1-of	go-08	0.1.0.0.1.2.0.0	0.1.0.0.1.2.0.0.0	
# ::edge	worry-02	ARG0	person	0.1.0.0.1.2.0	0.1	
# ::edge	worry-02	ARG1	thing	0.1.0.0.1.2.0	0.1.0.0.1.2.0.0	
# ::edge	worry-02	degree	so	0.1.0.0.1.2.0	0.1.0.0.1.2.0.1	
(h / have-03
      :ARG0 (i / i)
      :ARG1 (p4 / person
            :ARG0-of (s / suffer-01
                  :ARG1 (a / anxiety
                        :mod (s2 / severe)
                        :ARG3-of (p / prevent-01
                              :ARG0 p4
                              :ARG1 (a2 / and
                                    :op1 (l / leave-11
                                          :ARG0 p4
                                          :ARG1 (h2 / house))
                                    :op2 (d / do-02
                                          :ARG0 p4
                                          :ARG1 (t / thing)))
                              :ARG1-of (p2 / possible-01)
                              :ARG1-of (c / cause-01
                                    :ARG0 (w / worry-02
                                          :ARG0 p4
                                          :ARG1 (t2 / thing
                                                :ARG1-of (g / go-08
                                                      :ARG2 (w2 / wrong)
                                                      :ARG1-of (p3 / possible-01)))
                                          :degree (s3 / so))))))
            :ARG0-of (h3 / have-rel-role-91
                  :ARG1 i
                  :ARG2 (f / friend))))

# ::node	0	find-01	2-3
# ::node	0.0	i	1-2
# ::node	0.1	help-01	3-4
# ::node	0.1.0	talk-01	6-7
# ::node	0.1.0.0	thing	10-11
# ::node	0.1.0.0.0	make-02	10-11
# ::node	0.1.0.0.0.0	anxious	12-13
# ::node	0.1.0.0.0.0.0	you	11-12
# ::node	0.1.0.1	someone	14-15
# ::node	0.1.0.1.0	else	15-16
# ::node	0.1.0.2	just	5-6
# ::root	0	find-01
# ::edge	anxious	domain	you	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	find-01	ARG0	i	0	0.0	
# ::edge	find-01	ARG1	help-01	0	0.1	
# ::edge	help-01	ARG0	talk-01	0.1	0.1.0	
# ::edge	make-02	ARG1	anxious	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	someone	mod	else	0.1.0.1	0.1.0.1.0	
# ::edge	talk-01	ARG1	thing	0.1.0	0.1.0.0	
# ::edge	talk-01	ARG2	someone	0.1.0	0.1.0.1	
# ::edge	talk-01	mod	just	0.1.0	0.1.0.2	
# ::edge	thing	ARG0-of	make-02	0.1.0.0	0.1.0.0.0	
(f / find-01
      :ARG0 (i / i)
      :ARG1 (h / help-01
            :ARG0 (t / talk-01
                  :ARG1 (t2 / thing
                        :ARG0-of (m / make-02
                              :ARG1 (a / anxious
                                    :domain (y / you))))
                  :ARG2 (s / someone
                        :mod (e / else))
                  :mod (j / just))))

# ::node	0	contrast-01	6-7
# ::node	0.0	find-01	8-9
# ::node	0.0.0	i	7-8
# ::node	0.0.1	and	21-22
# ::node	0.0.1.0	mention-01	10-11
# ::node	0.0.1.0.0	thing	12-13
# ::node	0.0.1.0.0.0	worry-02	16-17
# ::node	0.0.1.0.1	person	36-37
# ::node	0.0.1.0.1.0	have-rel-role-91	36-37
# ::node	0.0.1.0.1.0.0	mum	20-21
# ::node	0.0.1.1	see-01	22-23
# ::node	0.0.1.1.0	react-01	24-25
# ::node	0.0.1.1.0.0	situation	27-28
# ::node	0.0.1.1.0.1	way	31-32
# ::node	0.0.1.1.0.1.0	calm-03	30-31
# ::node	0.0.1.1.0.1.0.0	react-01	38-39
# ::node	0.0.1.1.0.1.0.0.0	recommend-01	35-36
# ::node	0.0.1.2	make-02	40-41
# ::node	0.0.1.2.0	feel-01	42-43
# ::node	0.0.1.2.0.0	good	43-44
# ::node	0.0.1.2.0.0.0	more	
# ::node	0.0.1.2.1	cause-01	46-47
# ::node	0.0.1.2.1.0	know-01	48-49
# ::node	0.0.1.2.1.0.0	and	55-56
# ::node	0.0.1.2.1.0.0.0	deal-03	54-55
# ::node	0.0.1.2.1.0.0.0.0	big	53-54
# ::node	0.0.1.2.1.0.0.0.0.0	-	2-2
# ::node	0.0.1.2.1.0.0.1	need-01	59-60
# ::node	0.0.1.2.1.0.0.1.0	-	2-2
# ::node	0.0.1.2.1.0.0.1.1	anxious	62-63
# ::node	0.1	way	5-6
# ::node	0.1.0	perhaps	0-1
# ::node	0.1.1	moan-01	4-5
# ::node	0.1.1.0	-	2-2
# ::root	0	contrast-01
# ::edge	and	ARG0-of	make-02	0.0.1	0.0.1.2	
# ::edge	and	op1	deal-03	0.0.1.2.1.0.0	0.0.1.2.1.0.0.0	
# ::edge	and	op1	mention-01	0.0.1	0.0.1.0	
# ::edge	and	op2	need-01	0.0.1.2.1.0.0	0.0.1.2.1.0.0.1	
# ::edge	and	op2	see-01	0.0.1	0.0.1.1	
# ::edge	anxious	domain	i	0.0.1.2.1.0.0.1.1	0.0.0	
# ::edge	anxious	topic	thing	0.0.1.2.1.0.0.1.1	0.0.1.0.0	
# ::edge	big	polarity	-	0.0.1.2.1.0.0.0.0	0.0.1.2.1.0.0.0.0.0	
# ::edge	calm-03	ARG1-of	react-01	0.0.1.1.0.1.0	0.0.1.1.0.1.0.0	
# ::edge	cause-01	ARG1	know-01	0.0.1.2.1	0.0.1.2.1.0	
# ::edge	contrast-01	ARG1	find-01	0	0.0	
# ::edge	contrast-01	ARG2	way	0	0.1	
# ::edge	deal-03	ARG1	thing	0.0.1.2.1.0.0.0	0.0.1.0.0	
# ::edge	deal-03	mod	big	0.0.1.2.1.0.0.0	0.0.1.2.1.0.0.0.0	
# ::edge	feel-01	ARG0	i	0.0.1.2.0	0.0.0	
# ::edge	feel-01	ARG1	good	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	feel-01	ARG2	thing	0.0.1.2.0	0.0.1.0.0	
# ::edge	find-01	ARG0	i	0.0	0.0.0	
# ::edge	find-01	ARG1	and	0.0	0.0.1	
# ::edge	good	degree	more	0.0.1.2.0.0	0.0.1.2.0.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.1.0.1.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	mum	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	know-01	ARG0	i	0.0.1.2.1.0	0.0.0	
# ::edge	know-01	ARG1	and	0.0.1.2.1.0	0.0.1.2.1.0.0	
# ::edge	make-02	ARG0-of	cause-01	0.0.1.2	0.0.1.2.1	
# ::edge	make-02	ARG1	feel-01	0.0.1.2	0.0.1.2.0	
# ::edge	mention-01	ARG0	i	0.0.1.0	0.0.0	
# ::edge	mention-01	ARG1	thing	0.0.1.0	0.0.1.0.0	
# ::edge	mention-01	ARG2	person	0.0.1.0	0.0.1.0.1	
# ::edge	moan-01	polarity	-	0.1.1	0.1.1.0	
# ::edge	need-01	ARG0	i	0.0.1.2.1.0.0.1	0.0.0	
# ::edge	need-01	ARG1	anxious	0.0.1.2.1.0.0.1	0.0.1.2.1.0.0.1.1	
# ::edge	need-01	polarity	-	0.0.1.2.1.0.0.1	0.0.1.2.1.0.0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	react-01	ARG0	i	0.0.1.1.0.1.0.0	0.0.0	
# ::edge	react-01	ARG0	person	0.0.1.1.0	0.0.1.0.1	
# ::edge	react-01	ARG1	situation	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	react-01	ARG1-of	recommend-01	0.0.1.1.0.1.0.0	0.0.1.1.0.1.0.0.0	
# ::edge	react-01	ARG2	way	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	recommend-01	ARG2	i	0.0.1.1.0.1.0.0.0	0.0.0	
# ::edge	see-01	ARG0	i	0.0.1.1	0.0.0	
# ::edge	see-01	ARG1	react-01	0.0.1.1	0.0.1.1.0	
# ::edge	thing	ARG1-of	worry-02	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	way	mod	calm-03	0.0.1.1.0.1	0.0.1.1.0.1.0	
# ::edge	way	mod	moan-01	0.1	0.1.1	
# ::edge	way	mod	perhaps	0.1	0.1.0	
# ::edge	worry-02	ARG0	i	0.0.1.0.0.0	0.0.0	
(c / contrast-01
      :ARG1 (f / find-01
            :ARG0 (i / i)
            :ARG1 (a / and
                  :op1 (m / mention-01
                        :ARG0 i
                        :ARG1 (t / thing
                              :ARG1-of (w / worry-02
                                    :ARG0 i))
                        :ARG2 (p2 / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG1 i
                                    :ARG2 (m2 / mum))))
                  :op2 (s / see-01
                        :ARG0 i
                        :ARG1 (r / react-01
                              :ARG0 p2
                              :ARG1 (s2 / situation)
                              :ARG2 (w2 / way
                                    :mod (c2 / calm-03
                                          :ARG1-of (r3 / react-01
                                                :ARG0 i
                                                :ARG1-of (r2 / recommend-01
                                                      :ARG2 i))))))
                  :ARG0-of (m3 / make-02
                        :ARG1 (f2 / feel-01
                              :ARG0 i
                              :ARG1 (g / good
                                    :degree (m4 / more))
                              :ARG2 t)
                        :ARG0-of (c3 / cause-01
                              :ARG1 (k / know-01
                                    :ARG0 i
                                    :ARG1 (a2 / and
                                          :op1 (d / deal-03
                                                :ARG1 t
                                                :mod (b / big :polarity -))
                                          :op2 (n / need-01 :polarity -
                                                :ARG0 i
                                                :ARG1 (a3 / anxious
                                                      :topic t
                                                      :domain i))))))))
      :ARG2 (w4 / way
            :mod (p / perhaps)
            :mod (m5 / moan-01 :polarity -)))

# ::node	0	and	5-6
# ::node	0.0	give-01	2-3
# ::node	0.0.0	doctor	1-2
# ::node	0.0.1	medication	4-5
# ::node	0.0.2	she	
# ::node	0.1	make-02	8-9
# ::node	0.1.0	good	11-12
# ::node	0.1.0.0	more	
# ::node	0.1.0.0.0	much	10-11
# ::root	0	and
# ::edge	and	op1	give-01	0	0.0	
# ::edge	and	op2	make-02	0	0.1	
# ::edge	give-01	ARG0	doctor	0.0	0.0.0	
# ::edge	give-01	ARG1	medication	0.0	0.0.1	
# ::edge	give-01	ARG2	she	0.0	0.0.2	
# ::edge	good	degree	more	0.1.0	0.1.0.0	
# ::edge	good	domain	she	0.1.0	0.0.2	
# ::edge	make-02	ARG0	medication	0.1	0.0.1	
# ::edge	make-02	ARG1	good	0.1	0.1.0	
# ::edge	more	quant	much	0.1.0.0	0.1.0.0.0	
(a / and
      :op1 (g / give-01
            :ARG0 (d / doctor)
            :ARG1 (m2 / medication)
            :ARG2 (s / she))
      :op2 (m / make-02
            :ARG0 m2
            :ARG1 (g2 / good
                  :degree (m3 / more
                        :quant (m4 / much))
                  :domain s)))

# ::node	0	and	8-9
# ::node	0.0	know-01	3-4
# ::node	0.0.0	-	
# ::node	0.0.1	i	0-1
# ::node	0.0.2	thing	6-7
# ::node	0.0.2.0	do-02	6-7
# ::node	0.0.3	really	1-2
# ::node	0.1	fear-01	
# ::node	0.1.0	go-02	12-13
# ::node	0.1.0.0	practitioner	
# ::node	0.1.0.0.0	general	
# ::root	0	and
# ::edge	and	op1	know-01	0	0.0	
# ::edge	and	op2	fear-01	0	0.1	
# ::edge	do-02	ARG0	i	0.0.2.0	0.0.1	
# ::edge	fear-01	ARG0	i	0.1	0.0.1	
# ::edge	fear-01	ARG1	go-02	0.1	0.1.0	
# ::edge	go-02	ARG0	i	0.1.0	0.0.1	
# ::edge	go-02	ARG4	practitioner	0.1.0	0.1.0.0	
# ::edge	know-01	ARG0	i	0.0	0.0.1	
# ::edge	know-01	ARG1	thing	0.0	0.0.2	
# ::edge	know-01	mod	really	0.0	0.0.3	
# ::edge	know-01	polarity	-	0.0	0.0.0	
# ::edge	practitioner	mod	general	0.1.0.0	0.1.0.0.0	
# ::edge	thing	ARG1-of	do-02	0.0.2	0.0.2.0	
(a / and
      :op1 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG1-of (d / do-02
                        :ARG0 i))
            :mod (r / really))
      :op2 (f / fear-01
            :ARG0 i
            :ARG1 (g / go-02
                  :ARG0 i
                  :ARG4 (p2 / practitioner
                        :mod (g2 / general)))))

# ::node	0	possible-01	
# ::node	0.0	-	
# ::node	0.1	work-01	4-5
# ::node	0.1.0	i	0-1
# ::node	0.1.1	home	6-7
# ::node	0.2	cause-01	8-9
# ::node	0.2.0	shout-01	10-11
# ::node	0.2.0.0	she	9-10
# ::root	0	possible-01
# ::edge	cause-01	ARG0	shout-01	0.2	0.2.0	
# ::edge	possible-01	ARG1	work-01	0	0.1	
# ::edge	possible-01	ARG1-of	cause-01	0	0.2	
# ::edge	possible-01	polarity	-	0	0.0	
# ::edge	shout-01	ARG0	she	0.2.0	0.2.0.0	
# ::edge	shout-01	ARG2	i	0.2.0	0.1.0	
# ::edge	work-01	ARG0	i	0.1	0.1.0	
# ::edge	work-01	location	home	0.1	0.1.1	
(p / possible-01 :polarity -
      :ARG1 (w / work-01
            :ARG0 (i / i)
            :location (h / home))
      :ARG1-of (c / cause-01
            :ARG0 (s / shout-01
                  :ARG0 (s2 / she)
                  :ARG2 i)))

# ::node	0	heart	
# ::node	0.0	half-half	1-2
# ::node	0.1	only	0-1
# ::root	0	heart
# ::edge	heart	degree	half-half	0	0.0	
# ::edge	heart	mod	only	0	0.1	
(h / heart
      :degree (h2 / half-half)
      :mod (o / only))

# ::node	0	and	
# ::node	0.0	load-01	5-6
# ::node	0.0.0	thing	3-4
# ::node	0.0.0.0	work-01	3-4
# ::node	0.0.1	now	1-2
# ::node	0.0.2	neck	10-11
# ::node	0.0.2.0	i	12-13
# ::node	0.1	obligate-01	
# ::node	0.1.0	hit-02	17-18
# ::node	0.1.0.0	deadline	15-16
# ::node	0.1.0.0.0	major-02	14-15
# ::node	0.2	depress-01	21-22
# ::node	0.3	result-01	26-27
# ::node	0.3.0	anxiety	24-25
# ::node	0.3.1	feel-01	29-30
# ::node	0.3.1.0	miserable	30-31
# ::node	0.3.1.1	time	33-34
# ::node	0.3.1.1.0	all	31-32
# ::root	0	and
# ::edge	and	op1	load-01	0	0.0	
# ::edge	and	op2	obligate-01	0	0.1	
# ::edge	and	op3	depress-01	0	0.2	
# ::edge	and	op4	result-01	0	0.3	
# ::edge	deadline	ARG1-of	major-02	0.1.0.0	0.1.0.0.0	
# ::edge	depress-01	ARG1	i	0.2	0.0.2.0	
# ::edge	feel-01	ARG0	i	0.3.1	0.0.2.0	
# ::edge	feel-01	ARG1	miserable	0.3.1	0.3.1.0	
# ::edge	feel-01	frequency	time	0.3.1	0.3.1.1	
# ::edge	hit-02	ARG0	i	0.1.0	0.0.2.0	
# ::edge	hit-02	ARG1	deadline	0.1.0	0.1.0.0	
# ::edge	load-01	ARG1	i	0.0	0.0.2.0	
# ::edge	load-01	ARG2	thing	0.0	0.0.0	
# ::edge	load-01	extent	neck	0.0	0.0.2	
# ::edge	load-01	time	now	0.0	0.0.1	
# ::edge	neck	part-of	i	0.0.2	0.0.2.0	
# ::edge	obligate-01	ARG2	hit-02	0.1	0.1.0	
# ::edge	result-01	ARG1	anxiety	0.3	0.3.0	
# ::edge	result-01	ARG2	feel-01	0.3	0.3.1	
# ::edge	thing	ARG1-of	work-01	0.0.0	0.0.0.0	
# ::edge	time	mod	all	0.3.1.1	0.3.1.1.0	
(a / and
      :op1 (l / load-01
            :ARG1 i
            :ARG2 (t2 / thing
                  :ARG1-of (w / work-01))
            :time (n / now)
            :extent (n2 / neck
                  :part-of (i / i)))
      :op2 (o / obligate-01
            :ARG2 (h / hit-02
                  :ARG0 i
                  :ARG1 (d2 / deadline
                        :ARG1-of (m / major-02))))
      :op3 (d / depress-01
            :ARG1 i)
      :op4 (r / result-01
            :ARG1 (a2 / anxiety)
            :ARG2 (f / feel-01
                  :ARG0 i
                  :ARG1 (m2 / miserable)
                  :frequency (t / time
                        :mod (a3 / all)))))

# ::node	0	and	20-21
# ::node	0.0	have-03	3-4
# ::node	0.0.0	i	21-22
# ::node	0.0.1	person	5-6
# ::node	0.0.1.0	counsel-01	5-6
# ::node	0.0.2	no-longer	
# ::node	0.0.3	cause-01	6-7
# ::node	0.0.3.0	possible-01	8-9
# ::node	0.0.3.0.0	have-03	10-11
# ::node	0.0.3.0.0.0	you	7-8
# ::node	0.0.3.0.0.1	session	15-16
# ::node	0.0.3.0.0.1.0	so-many	
# ::node	0.0.3.0.0.1.0.0	time	28-29
# ::node	0.0.3.0.0.2	only	9-10
# ::node	0.1	doubt-01	22-23
# ::node	0.1.0	help-01	25-26
# ::node	0.1.0.0	much	26-27
# ::node	0.1.0.1	time	18-19
# ::node	0.1.0.1.0	this	27-28
# ::node	0.1.0.2	help-01	
# ::node	0.1.0.2.0	-	1-2
# ::node	0.1.0.2.1	already	34-35
# ::root	0	and
# ::edge	and	op1	have-03	0	0.0	
# ::edge	and	op2	doubt-01	0	0.1	
# ::edge	cause-01	ARG0	possible-01	0.0.3	0.0.3.0	
# ::edge	doubt-01	ARG0	i	0.1	0.0.0	
# ::edge	doubt-01	ARG1	help-01	0.1	0.1.0	
# ::edge	have-03	ARG0	i	0.0	0.0.0	
# ::edge	have-03	ARG0	you	0.0.3.0.0	0.0.3.0.0.0	
# ::edge	have-03	ARG1	person	0.0	0.0.1	
# ::edge	have-03	ARG1	person	0.0.3.0.0	0.0.1	
# ::edge	have-03	ARG1-of	cause-01	0.0	0.0.3	
# ::edge	have-03	mod	only	0.0.3.0.0	0.0.3.0.0.2	
# ::edge	have-03	time	no-longer	0.0	0.0.2	
# ::edge	have-03	time	session	0.0.3.0.0	0.0.3.0.0.1	
# ::edge	help-01	ARG0	have-03	0.1.0	0.0	
# ::edge	help-01	ARG0	have-03	0.1.0.2	0.0	
# ::edge	help-01	ARG1	i	0.1.0.2	0.0.0	
# ::edge	help-01	ARG2	i	0.1.0	0.0.0	
# ::edge	help-01	condition	help-01	0.1.0	0.1.0.2	
# ::edge	help-01	degree	much	0.1.0	0.1.0.0	
# ::edge	help-01	polarity	-	0.1.0.2	0.1.0.2.0	
# ::edge	help-01	time	already	0.1.0.2	0.1.0.2.1	
# ::edge	help-01	time	time	0.1.0	0.1.0.1	
# ::edge	person	ARG0-of	counsel-01	0.0.1	0.0.1.0	
# ::edge	possible-01	ARG1	have-03	0.0.3.0	0.0.3.0.0	
# ::edge	session	quant	so-many	0.0.3.0.0.1	0.0.3.0.0.1.0	
# ::edge	so-many	frequency	time	0.0.3.0.0.1.0	0.0.3.0.0.1.0.0	
# ::edge	time	mod	this	0.1.0.1	0.1.0.1.0	
(a / and
      :op1 (h / have-03
            :ARG0 (i / i)
            :ARG1 (p / person
                  :ARG0-of (c / counsel-01))
            :time (n / no-longer)
            :ARG1-of (c2 / cause-01
                  :ARG0 (p2 / possible-01
                        :ARG1 (h2 / have-03
                              :ARG0 (y / you)
                              :ARG1 p
                              :time (s / session
                                    :quant (s2 / so-many
                                          :frequency (t / time)))
                              :mod (o / only)))))
      :op2 (d / doubt-01
            :ARG0 i
            :ARG1 (h3 / help-01
                  :ARG0 h
                  :ARG2 i
                  :degree (m2 / much)
                  :time (t2 / time
                        :mod (t3 / this))
                  :condition (h4 / help-01 :polarity -
                        :ARG0 h
                        :ARG1 i
                        :time (a2 / already)))))

# ::node	0	and	42-43
# ::node	0.0	lack-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	motivation	3-4
# ::node	0.1	feel-01	15-16
# ::node	0.1.0	-	
# ::node	0.1.1	comfortable-02	8-9
# ::node	0.1.2	person	13-14
# ::node	0.1.2.0	lecture-01	13-14
# ::node	0.2	contrast-01	23-24
# ::node	0.2.0	feel-06	7-8
# ::node	0.2.0.0	want-01	18-19
# ::node	0.2.0.0.0	give-in-09	
# ::node	0.2.1	possible-01	
# ::node	0.2.1.0	-	
# ::node	0.2.1.1	bring-about-05	26-27
# ::node	0.2.1.1.0	give-in-09	20-21
# ::node	0.2.1.2	cause-01	31-32
# ::node	0.2.1.2.0	and	
# ::node	0.2.1.2.0.0	end-up-03	
# ::node	0.2.1.2.0.0.0	job	40-41
# ::node	0.2.1.2.0.0.0.0	end-01	34-35
# ::node	0.2.1.2.0.0.0.0.0	die-01	
# ::node	0.2.1.2.0.1	aspire-01	44-45
# ::node	0.2.1.2.0.1.0	someone	48-49
# ::root	0	and
# ::edge	and	op1	end-up-03	0.2.1.2.0	0.2.1.2.0.0	
# ::edge	and	op1	lack-01	0	0.0	
# ::edge	and	op2	aspire-01	0.2.1.2.0	0.2.1.2.0.1	
# ::edge	and	op2	feel-01	0	0.1	
# ::edge	and	op3	contrast-01	0	0.2	
# ::edge	aspire-01	ARG0	i	0.2.1.2.0.1	0.0.0	
# ::edge	aspire-01	ARG1	someone	0.2.1.2.0.1	0.2.1.2.0.1.0	
# ::edge	bring-about-05	ARG0	i	0.2.1.1	0.0.0	
# ::edge	bring-about-05	ARG1	give-in-09	0.2.1.1	0.2.1.1.0	
# ::edge	cause-01	ARG0	and	0.2.1.2	0.2.1.2.0	
# ::edge	comfortable-02	ARG0	person	0.1.1	0.1.2	
# ::edge	comfortable-02	ARG1	i	0.1.1	0.0.0	
# ::edge	contrast-01	ARG1	feel-06	0.2	0.2.0	
# ::edge	contrast-01	ARG2	possible-01	0.2	0.2.1	
# ::edge	end-01	ARG2	die-01	0.2.1.2.0.0.0.0	0.2.1.2.0.0.0.0.0	
# ::edge	end-up-03	ARG1	i	0.2.1.2.0.0	0.0.0	
# ::edge	end-up-03	ARG2	job	0.2.1.2.0.0	0.2.1.2.0.0.0	
# ::edge	feel-01	ARG0	i	0.1	0.0.0	
# ::edge	feel-01	ARG1	comfortable-02	0.1	0.1.1	
# ::edge	feel-01	ARG2	person	0.1	0.1.2	
# ::edge	feel-01	polarity	-	0.1	0.1.0	
# ::edge	feel-06	ARG0	i	0.2.0	0.0.0	
# ::edge	feel-06	ARG1	want-01	0.2.0	0.2.0.0	
# ::edge	give-in-09	ARG0	i	0.2.0.0.0	0.0.0	
# ::edge	give-in-09	ARG0	i	0.2.1.1.0	0.0.0	
# ::edge	job	ARG1-of	end-01	0.2.1.2.0.0.0	0.2.1.2.0.0.0.0	
# ::edge	lack-01	ARG0	i	0.0	0.0.0	
# ::edge	lack-01	ARG1	motivation	0.0	0.0.1	
# ::edge	lecture-01	ARG1	i	0.1.2.0	0.0.0	
# ::edge	person	ARG0-of	lecture-01	0.1.2	0.1.2.0	
# ::edge	possible-01	ARG1	bring-about-05	0.2.1	0.2.1.1	
# ::edge	possible-01	ARG1-of	cause-01	0.2.1	0.2.1.2	
# ::edge	possible-01	polarity	-	0.2.1	0.2.1.0	
# ::edge	someone	domain	i	0.2.1.2.0.1.0	0.0.0	
# ::edge	want-01	ARG0	i	0.2.0.0	0.0.0	
# ::edge	want-01	ARG1	give-in-09	0.2.0.0	0.2.0.0.0	
(a / and
      :op1 (l / lack-01
            :ARG0 (i / i)
            :ARG1 (m / motivation))
      :op2 (f / feel-01 :polarity -
            :ARG0 i
            :ARG1 (c2 / comfortable-02
                  :ARG0 p
                  :ARG1 i)
            :ARG2 (p / person
                  :ARG0-of (l2 / lecture-01
                        :ARG1 i)))
      :op3 (c / contrast-01
            :ARG1 (f2 / feel-06
                  :ARG0 i
                  :ARG1 (w / want-01
                        :ARG0 i
                        :ARG1 (g / give-in-09
                              :ARG0 i)))
            :ARG2 (p2 / possible-01 :polarity -
                  :ARG1 (b / bring-about-05
                        :ARG0 i
                        :ARG1 (g2 / give-in-09
                              :ARG0 i))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (a3 / and
                              :op1 (e / end-up-03
                                    :ARG1 i
                                    :ARG2 (j / job
                                          :ARG1-of (e2 / end-01
                                                :ARG2 (d / die-01))))
                              :op2 (a2 / aspire-01
                                    :ARG0 i
                                    :ARG1 (s / someone
                                          :domain i)))))))

# ::node	0	and	11-12
# ::node	0.0	prefer-01	
# ::node	0.0.0	i	1-2
# ::node	0.0.1	die-01	
# ::node	0.0.2	and	20-21
# ::node	0.0.2.0	educate-01	9-10
# ::node	0.0.2.0.0	-	8-8
# ::node	0.0.2.1	live-01	12-13
# ::node	0.0.2.1.0	-	8-8
# ::node	0.0.2.1.1	life	14-15
# ::node	0.0.2.1.1.0	live-01	18-19
# ::node	0.0.2.1.1.0.0	want-01	16-17
# ::node	0.1	worsen-01	28-29
# ::node	0.1.0	matter	27-28
# ::node	0.1.1	drop-out-04	21-22
# ::node	0.1.1.0	university	
# ::root	0	and
# ::edge	and	op1	educate-01	0.0.2	0.0.2.0	
# ::edge	and	op1	prefer-01	0	0.0	
# ::edge	and	op2	live-01	0.0.2	0.0.2.1	
# ::edge	and	op3	worsen-01	0	0.1	
# ::edge	die-01	ARG1	i	0.0.1	0.0.0	
# ::edge	drop-out-04	ARG0	i	0.1.1	0.0.0	
# ::edge	drop-out-04	ARG1	university	0.1.1	0.1.1.0	
# ::edge	educate-01	ARG1	i	0.0.2.0	0.0.0	
# ::edge	educate-01	polarity	-	0.0.2.0	0.0.2.0.0	
# ::edge	life	ARG1-of	live-01	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	live-01	ARG0	i	0.0.2.1	0.0.0	
# ::edge	live-01	ARG0	i	0.0.2.1.1.0	0.0.0	
# ::edge	live-01	ARG1	life	0.0.2.1	0.0.2.1.1	
# ::edge	live-01	ARG1-of	want-01	0.0.2.1.1.0	0.0.2.1.1.0.0	
# ::edge	live-01	polarity	-	0.0.2.1	0.0.2.1.0	
# ::edge	prefer-01	ARG0	i	0.0	0.0.0	
# ::edge	prefer-01	ARG1	die-01	0.0	0.0.1	
# ::edge	prefer-01	ARG2	and	0.0	0.0.2	
# ::edge	want-01	ARG0	i	0.0.2.1.1.0.0	0.0.0	
# ::edge	worsen-01	ARG0	i	0.1	0.0.0	
# ::edge	worsen-01	ARG1	matter	0.1	0.1.0	
# ::edge	worsen-01	manner	drop-out-04	0.1	0.1.1	
(a / and
      :op1 (p / prefer-01
            :ARG0 (i / i)
            :ARG1 (d / die-01
                  :ARG1 i)
            :ARG2 (a2 / and
                  :op1 (e / educate-01 :polarity -
                        :ARG1 i)
                  :op2 (l / live-01 :polarity -
                        :ARG0 i
                        :ARG1 (l2 / life
                              :ARG1-of (l3 / live-01
                                    :ARG0 i
                                    :ARG1-of (w2 / want-01
                                          :ARG0 i))))))
      :op3 (w / worsen-01
            :ARG0 i
            :ARG1 (m / matter)
            :manner (d2 / drop-out-04
                  :ARG0 i
                  :ARG1 (u / university))))

# ::node	0	and	
# ::node	0.0	age-01	
# ::node	0.0.0	i	1-2
# ::node	0.0.1	temporal-quantity	9-10
# ::node	0.0.1.0	21	
# ::node	0.0.1.1	year	9-10
# ::node	0.1	turn-02	6-7
# ::node	0.1.0	temporal-quantity	
# ::node	0.1.0.0	22	7-8
# ::node	0.1.0.1	year	
# ::node	0.1.1	year	
# ::node	0.1.1.0	this	8-9
# ::node	0.2	have-03	14-15
# ::node	0.2.0	-	
# ::node	0.2.1	time	16-17
# ::node	0.2.1.0	much	15-16
# ::node	0.2.1.1	leave-17	17-18
# ::node	0.2.1.2	fail-01	19-20
# ::node	0.3	obligate-01	
# ::node	0.3.0	do-02	12-13
# ::node	0.3.0.0	something	23-24
# ::root	0	and
# ::edge	age-01	ARG1	i	0.0	0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0	0.0.1	
# ::edge	and	op1	age-01	0	0.0	
# ::edge	and	op2	turn-02	0	0.1	
# ::edge	and	op3	have-03	0	0.2	
# ::edge	and	op4	obligate-01	0	0.3	
# ::edge	do-02	ARG0	i	0.3.0	0.0.0	
# ::edge	do-02	ARG1	something	0.3.0	0.3.0.0	
# ::edge	fail-01	ARG1	i	0.2.1.2	0.0.0	
# ::edge	have-03	ARG0	i	0.2	0.0.0	
# ::edge	have-03	ARG1	time	0.2	0.2.1	
# ::edge	have-03	polarity	-	0.2	0.2.0	
# ::edge	obligate-01	ARG2	do-02	0.3	0.3.0	
# ::edge	temporal-quantity	quant	21	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	quant	22	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.0.1	0.0.1.1	
# ::edge	temporal-quantity	unit	year	0.1.0	0.1.0.1	
# ::edge	time	ARG1-of	leave-17	0.2.1	0.2.1.1	
# ::edge	time	mod	much	0.2.1	0.2.1.0	
# ::edge	time	purpose	fail-01	0.2.1	0.2.1.2	
# ::edge	turn-02	ARG1	i	0.1	0.0.0	
# ::edge	turn-02	ARG3	temporal-quantity	0.1	0.1.0	
# ::edge	turn-02	time	year	0.1	0.1.1	
# ::edge	year	mod	this	0.1.1	0.1.1.0	
(a / and
      :op1 (a2 / age-01
            :ARG1 (i / i)
            :ARG2 (t2 / temporal-quantity :quant 21
                  :unit (y / year)))
      :op2 (t / turn-02
            :ARG1 i
            :ARG3 (t3 / temporal-quantity :quant 22
                  :unit (y2 / year))
            :time (y3 / year
                  :mod (t4 / this)))
      :op3 (h / have-03 :polarity -
            :ARG0 i
            :ARG1 (t5 / time
                  :mod (m / much)
                  :ARG1-of (l / leave-17)
                  :purpose (f / fail-01
                        :ARG1 i)))
      :op4 (o / obligate-01
            :ARG2 (d / do-02
                  :ARG0 i
                  :ARG1 (s / something))))

# ::node	0	multi-sentence	
# ::node	0.0	want-01	17-18
# ::node	0.0.0	-	
# ::node	0.0.1	and	24-25
# ::node	0.0.1.0	go-01	19-20
# ::node	0.0.1.0.0	system	22-23
# ::node	0.0.1.0.1	over-and-over	4-5
# ::node	0.0.1.1	fail-01	1-2
# ::node	0.0.1.1.0	consistent	27-28
# ::node	0.1	and	26-27
# ::node	0.1.0	fail-01	28-29
# ::node	0.1.0.0	i	0-1
# ::node	0.1.0.1	college	2-3
# ::node	0.1.0.2	once	3-4
# ::node	0.1.1	do-02	6-7
# ::node	0.1.1.0	course	8-9
# ::node	0.1.1.0.0	another	7-8
# ::node	0.1.1.1	possible-01	11-12
# ::node	0.1.1.1.0	get-05	12-13
# ::node	0.1.1.1.0.0	university	
# ::root	0	multi-sentence
# ::edge	and	op1	fail-01	0.1	0.1.0	
# ::edge	and	op1	go-01	0.0.1	0.0.1.0	
# ::edge	and	op2	do-02	0.1	0.1.1	
# ::edge	and	op2	fail-01	0.0.1	0.0.1.1	
# ::edge	course	mod	another	0.1.1.0	0.1.1.0.0	
# ::edge	do-02	ARG0	i	0.1.1	0.1.0.0	
# ::edge	do-02	ARG1	course	0.1.1	0.1.1.0	
# ::edge	do-02	purpose	possible-01	0.1.1	0.1.1.1	
# ::edge	fail-01	ARG0	i	0.0.1.1	0.1.0.0	
# ::edge	fail-01	ARG1	i	0.1.0	0.1.0.0	
# ::edge	fail-01	ARG2	college	0.1.0	0.1.0.1	
# ::edge	fail-01	manner	consistent	0.0.1.1	0.0.1.1.0	
# ::edge	fail-01	time	once	0.1.0	0.1.0.2	
# ::edge	get-05	ARG1	i	0.1.1.1.0	0.1.0.0	
# ::edge	get-05	ARG2	university	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	go-01	ARG1	i	0.0.1.0	0.1.0.0	
# ::edge	go-01	frequency	over-and-over	0.0.1.0	0.0.1.0.1	
# ::edge	go-01	path	system	0.0.1.0	0.0.1.0.0	
# ::edge	multi-sentence	snt1	and	0	0.1	
# ::edge	multi-sentence	snt2	want-01	0	0.0	
# ::edge	possible-01	ARG1	get-05	0.1.1.1	0.1.1.1.0	
# ::edge	want-01	ARG0	i	0.0	0.1.0.0	
# ::edge	want-01	ARG1	and	0.0	0.0.1	
# ::edge	want-01	polarity	-	0.0	0.0.0	
(m / multi-sentence
      :snt2 (w / want-01 :polarity -
            :ARG0 i
            :ARG1 (a2 / and
                  :op1 (g2 / go-01
                        :ARG1 i
                        :path (s / system)
                        :frequency (o2 / over-and-over))
                  :op2 (f2 / fail-01
                        :ARG0 i
                        :manner (c3 / consistent))))
      :snt1 (a3 / and
            :op1 (f / fail-01
                  :ARG1 (i / i)
                  :ARG2 (c / college)
                  :time (o / once))
            :op2 (d / do-02
                  :ARG0 i
                  :ARG1 (c2 / course
                        :mod (a / another))
                  :purpose (p / possible-01
                        :ARG1 (g / get-05
                              :ARG1 i
                              :ARG2 (u / university))))))

# ::node	0	possible-01	0-1
# ::node	0.0	interrogative	
# ::node	0.1	+	
# ::node	0.2	advise-01	6-7
# ::node	0.2.0	someone	1-2
# ::node	0.2.1	i	
# ::node	0.2.2	some	5-6
# ::root	0	possible-01
# ::edge	advise-01	ARG0	someone	0.2	0.2.0	
# ::edge	advise-01	ARG2	i	0.2	0.2.1	
# ::edge	advise-01	mod	some	0.2	0.2.2	
# ::edge	possible-01	ARG1	advise-01	0	0.2	
# ::edge	possible-01	mode	interrogative	0	0.0	
# ::edge	possible-01	polite	+	0	0.1	
(p / possible-01 :mode interrogative :polite +
      :ARG1 (a2 / advise-01
            :ARG0 (s / someone)
            :ARG2 (i / i)
            :mod (s2 / some)))

# ::node	0	and	2-3
# ::node	0.0	and	7-8
# ::node	0.0.0	go-02	1-2
# ::node	0.0.0.0	imperative	
# ::node	0.0.0.1	you	14-15
# ::node	0.0.1	see-01	8-9
# ::node	0.0.1.0	imperative	
# ::node	0.0.1.1	person	
# ::node	0.0.1.1.0	have-org-role-91	5-6
# ::node	0.0.1.1.0.0	doctor	5-6
# ::node	0.0.2	possible-01	
# ::node	0.1	see-01	3-4
# ::node	0.1.0	imperative	
# ::node	0.1.1	way	13-14
# ::node	0.1.1.0	interrogative	
# ::node	0.1.1.1	get-04	16-17
# ::node	0.1.1.1.0	extend-01	19-20
# ::node	0.1.1.1.0.0	deadline	18-19
# ::node	0.1.1.1.0.1	try-01	21-22
# ::node	0.1.1.1.0.1.0	ease-02	23-24
# ::node	0.1.1.1.0.1.0.0	pressure	25-26
# ::node	0.1.1.1.0.1.0.1	bit	27-28
# ::node	0.1.1.1.1	possible-01	15-16
# ::root	0	and
# ::edge	and	ARG1-of	possible-01	0.0	0.0.2	
# ::edge	and	op1	and	0	0.0	
# ::edge	and	op1	go-02	0.0	0.0.0	
# ::edge	and	op2	see-01	0	0.1	
# ::edge	and	op2	see-01	0.0	0.0.1	
# ::edge	deadline	poss	you	0.1.1.1.0.0	0.0.0.1	
# ::edge	ease-02	ARG0	you	0.1.1.1.0.1.0	0.0.0.1	
# ::edge	ease-02	ARG1	pressure	0.1.1.1.0.1.0	0.1.1.1.0.1.0.0	
# ::edge	ease-02	degree	bit	0.1.1.1.0.1.0	0.1.1.1.0.1.0.1	
# ::edge	extend-01	ARG0	you	0.1.1.1.0	0.0.0.1	
# ::edge	extend-01	ARG1	deadline	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	extend-01	purpose	try-01	0.1.1.1.0	0.1.1.1.0.1	
# ::edge	get-04	ARG1	extend-01	0.1.1.1	0.1.1.1.0	
# ::edge	get-04	ARG1-of	possible-01	0.1.1.1	0.1.1.1.1	
# ::edge	go-02	ARG0	you	0.0.0	0.0.0.1	
# ::edge	go-02	mode	imperative	0.0.0	0.0.0.0	
# ::edge	have-org-role-91	ARG1	you	0.0.1.1.0	0.0.0.1	
# ::edge	have-org-role-91	ARG2	doctor	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0.1.1	0.0.1.1.0	
# ::edge	see-01	ARG0	you	0.0.1	0.0.0.1	
# ::edge	see-01	ARG0	you	0.1	0.0.0.1	
# ::edge	see-01	ARG1	person	0.0.1	0.0.1.1	
# ::edge	see-01	ARG1	way	0.1	0.1.1	
# ::edge	see-01	mode	imperative	0.0.1	0.0.1.0	
# ::edge	see-01	mode	imperative	0.1	0.1.0	
# ::edge	try-01	ARG0	you	0.1.1.1.0.1	0.0.0.1	
# ::edge	try-01	ARG1	ease-02	0.1.1.1.0.1	0.1.1.1.0.1.0	
# ::edge	way	manner-of	get-04	0.1.1	0.1.1.1	
# ::edge	way	mode	interrogative	0.1.1	0.1.1.0	
(a / and
      :op1 (a2 / and
            :op1 (g / go-02 :mode imperative
                  :ARG0 (y / you))
            :op2 (s2 / see-01 :mode imperative
                  :ARG0 y
                  :ARG1 (p4 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 y
                              :ARG2 (d / doctor))))
            :ARG1-of (p / possible-01))
      :op2 (s / see-01 :mode imperative
            :ARG0 y
            :ARG1 (w / way :mode interrogative
                  :manner-of (g2 / get-04
                        :ARG1 (e / extend-01
                              :ARG0 y
                              :ARG1 (d2 / deadline
                                    :poss y)
                              :purpose (t2 / try-01
                                    :ARG0 y
                                    :ARG1 (e2 / ease-02
                                          :ARG0 y
                                          :ARG1 (p3 / pressure)
                                          :degree (b / bit))))
                        :ARG1-of (p2 / possible-01)))))

# ::node	0	multi-sentence	
# ::node	0.0	and	40-41
# ::node	0.0.0	send-01	0-1
# ::node	0.0.0.0	imperative	
# ::node	0.0.0.1	you	
# ::node	0.0.0.2	email	5-6
# ::node	0.0.0.2.0	resemble-01	
# ::node	0.0.0.2.0.0	post	8-9
# ::node	0.0.0.2.0.0.0	this	7-8
# ::node	0.0.0.3	tutor	2-3
# ::node	0.0.1	consider-02	43-44
# ::node	0.0.1.0	circumstance	45-46
# ::node	0.0.1.0.0	mitigate-01	44-45
# ::node	0.1	worry-02	12-13
# ::node	0.1.0	-	
# ::node	0.1.1	imperative	
# ::node	0.1.2	you	
# ::node	0.1.3	cause-01	
# ::node	0.1.3.0	see-01	15-16
# ::node	0.1.3.0.0	they	13-14
# ::node	0.1.3.0.1	all	17-18
# ::node	0.1.3.0.1.0	include-91	
# ::node	0.1.3.0.1.0.0	thing	24-25
# ::node	0.1.3.0.1.0.0.0	admit-02	24-25
# ::node	0.1.3.0.1.0.0.1	some	20-21
# ::node	0.1.3.0.1.0.0.2	comfortable-02	23-24
# ::node	0.1.3.0.1.0.0.2.0	-	23-24
# ::node	0.1.3.0.1.0.0.2.1	more	22-23
# ::node	0.1.3.0.1.0.0.2.1.0	much	21-22
# ::node	0.1.3.0.2	before	18-19
# ::node	0.2	know-01	28-29
# ::node	0.2.0	i	27-28
# ::node	0.2.1	cause-01	
# ::node	0.2.1.0	use-02	31-32
# ::node	0.2.1.0.0	work-01	33-34
# ::node	0.2.1.0.0.0	department	
# ::node	0.2.1.0.0.0.0	administrate-01	38-39
# ::node	0.2.1.0.0.0.0.0	university	
# ::root	0	multi-sentence
# ::edge	administrate-01	ARG1	university	0.2.1.0.0.0.0	0.2.1.0.0.0.0.0	
# ::edge	all	ARG2-of	include-91	0.1.3.0.1	0.1.3.0.1.0	
# ::edge	and	op1	send-01	0.0	0.0.0	
# ::edge	and	op2	consider-02	0.0	0.0.1	
# ::edge	cause-01	ARG0	see-01	0.1.3	0.1.3.0	
# ::edge	cause-01	ARG0	use-02	0.2.1	0.2.1.0	
# ::edge	circumstance	ARG0-of	mitigate-01	0.0.1.0	0.0.1.0.0	
# ::edge	comfortable-02	degree	more	0.1.3.0.1.0.0.2	0.1.3.0.1.0.0.2.1	
# ::edge	comfortable-02	polarity	-	0.1.3.0.1.0.0.2	0.1.3.0.1.0.0.2.0	
# ::edge	consider-02	ARG0	tutor	0.0.1	0.0.0.3	
# ::edge	consider-02	ARG1	circumstance	0.0.1	0.0.1.0	
# ::edge	department	ARG0-of	administrate-01	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	email	ARG1-of	resemble-01	0.0.0.2	0.0.0.2.0	
# ::edge	include-91	ARG1	thing	0.1.3.0.1.0	0.1.3.0.1.0.0	
# ::edge	know-01	ARG0	i	0.2	0.2.0	
# ::edge	know-01	ARG1-of	cause-01	0.2	0.2.1	
# ::edge	more	quant	much	0.1.3.0.1.0.0.2.1	0.1.3.0.1.0.0.2.1.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	worry-02	0	0.1	
# ::edge	multi-sentence	snt3	know-01	0	0.2	
# ::edge	post	mod	this	0.0.0.2.0.0	0.0.0.2.0.0.0	
# ::edge	resemble-01	ARG2	post	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	see-01	ARG0	they	0.1.3.0	0.1.3.0.0	
# ::edge	see-01	ARG1	all	0.1.3.0	0.1.3.0.1	
# ::edge	see-01	time	before	0.1.3.0	0.1.3.0.2	
# ::edge	send-01	ARG0	you	0.0.0	0.0.0.1	
# ::edge	send-01	ARG1	email	0.0.0	0.0.0.2	
# ::edge	send-01	ARG2	tutor	0.0.0	0.0.0.3	
# ::edge	send-01	mode	imperative	0.0.0	0.0.0.0	
# ::edge	thing	ARG0-of	comfortable-02	0.1.3.0.1.0.0	0.1.3.0.1.0.0.2	
# ::edge	thing	ARG1-of	admit-02	0.1.3.0.1.0.0	0.1.3.0.1.0.0.0	
# ::edge	thing	quant	some	0.1.3.0.1.0.0	0.1.3.0.1.0.0.1	
# ::edge	tutor	poss	you	0.0.0.3	0.0.0.1	
# ::edge	use-02	ARG1	work-01	0.2.1.0	0.2.1.0.0	
# ::edge	work-01	ARG0	i	0.2.1.0.0	0.2.0	
# ::edge	work-01	ARG2	department	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	worry-02	ARG0	you	0.1	0.1.2	
# ::edge	worry-02	ARG1-of	cause-01	0.1	0.1.3	
# ::edge	worry-02	mode	imperative	0.1	0.1.1	
# ::edge	worry-02	polarity	-	0.1	0.1.0	
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / send-01 :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (e / email
                        :ARG1-of (r / resemble-01
                              :ARG2 (p / post
                                    :mod (t2 / this))))
                  :ARG2 (t / tutor
                        :poss y))
            :op2 (c / consider-02
                  :ARG0 t
                  :ARG1 (c6 / circumstance
                        :ARG0-of (m2 / mitigate-01))))
      :snt2 (w / worry-02 :polarity - :mode imperative
            :ARG0 (y2 / you)
            :ARG1-of (c3 / cause-01
                  :ARG0 (s2 / see-01
                        :ARG0 (t3 / they)
                        :ARG1 (a2 / all
                              :ARG2-of (i / include-91
                                    :ARG1 (t4 / thing
                                          :ARG1-of (a3 / admit-02)
                                          :quant (s3 / some)
                                          :ARG0-of (c2 / comfortable-02 :polarity -
                                                :degree (m3 / more
                                                      :quant (m4 / much))))))
                        :time (b / before))))
      :snt3 (k / know-01
            :ARG0 (i2 / i)
            :ARG1-of (c5 / cause-01
                  :ARG0 (u / use-02
                        :ARG1 (w2 / work-01
                              :ARG0 i2
                              :ARG2 (d / department
                                    :ARG0-of (a4 / administrate-01
                                          :ARG1 (u2 / university))))))))

# ::node	0	and	8-9
# ::node	0.0	sum-up-01	
# ::node	0.0.0	you	18-19
# ::node	0.0.1	thing	
# ::node	0.0.1.0	cause-01	
# ::node	0.0.1.0.0	be-located-at-91	
# ::node	0.0.1.0.0.0	there	7-8
# ::node	0.1	work-10	44-45
# ::node	0.1.0	bottom	11-12
# ::node	0.1.1	off	12-13
# ::node	0.1.2	get-01	24-25
# ::node	0.1.2.0	grade	17-18
# ::node	0.1.2.0.0	good	16-17
# ::node	0.1.2.0.0.0	most	16-17
# ::node	0.1.2.0.0.1	possible-01	33-34
# ::node	0.2	cause-01	
# ::node	0.2.0	have-03	30-31
# ::node	0.2.0.0	something	31-32
# ::node	0.2.0.0.0	say-01	34-35
# ::node	0.2.0.0.0.0	possible-01	19-20
# ::node	0.2.0.0.1	and	45-46
# ::node	0.2.0.0.1.0	fail-01	39-40
# ::node	0.2.0.0.1.0.0	-	
# ::node	0.2.0.0.1.0.1	i	37-38
# ::node	0.2.0.0.1.0.2	hey	36-37
# ::node	0.2.0.0.1.0.2.0	expressive	
# ::node	0.2.0.0.1.1	and	
# ::node	0.2.0.0.1.1.0	work-01	9-10
# ::node	0.2.0.0.1.1.0.0	it	41-42
# ::node	0.2.0.0.1.1.0.1	hard-02	43-44
# ::node	0.2.0.0.1.1.1	pass-07	47-48
# ::node	0.2.0.1	get-01	14-15
# ::node	0.2.0.1.0	degree	26-27
# ::node	0.3	way	1-2
# ::node	0.3.0	either	0-1
# ::root	0	and
# ::edge	and	ARG1-of	cause-01	0	0.2	
# ::edge	and	mod	way	0	0.3	
# ::edge	and	op1	fail-01	0.2.0.0.1	0.2.0.0.1.0	
# ::edge	and	op1	sum-up-01	0	0.0	
# ::edge	and	op1	work-01	0.2.0.0.1.1	0.2.0.0.1.1.0	
# ::edge	and	op2	and	0.2.0.0.1	0.2.0.0.1.1	
# ::edge	and	op2	pass-07	0.2.0.0.1.1	0.2.0.0.1.1.1	
# ::edge	and	op2	work-10	0	0.1	
# ::edge	be-located-at-91	ARG1	you	0.0.1.0.0	0.0.0	
# ::edge	be-located-at-91	ARG2	there	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	bottom	poss	you	0.1.0	0.0.0	
# ::edge	cause-01	ARG0	have-03	0.2	0.2.0	
# ::edge	cause-01	ARG1	be-located-at-91	0.0.1.0	0.0.1.0.0	
# ::edge	degree	poss	you	0.2.0.1.0	0.0.0	
# ::edge	fail-01	ARG1	i	0.2.0.0.1.0	0.2.0.0.1.0.1	
# ::edge	fail-01	mod	hey	0.2.0.0.1.0	0.2.0.0.1.0.2	
# ::edge	fail-01	polarity	-	0.2.0.0.1.0	0.2.0.0.1.0.0	
# ::edge	get-01	ARG0	you	0.1.2	0.0.0	
# ::edge	get-01	ARG0	you	0.2.0.1	0.0.0	
# ::edge	get-01	ARG1	degree	0.2.0.1	0.2.0.1.0	
# ::edge	get-01	ARG1	grade	0.1.2	0.1.2.0	
# ::edge	good	ARG1-of	possible-01	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	good	degree	most	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	grade	mod	good	0.1.2.0	0.1.2.0.0	
# ::edge	have-03	ARG0	you	0.2.0	0.0.0	
# ::edge	have-03	ARG1	something	0.2.0	0.2.0.0	
# ::edge	have-03	time	get-01	0.2.0	0.2.0.1	
# ::edge	hey	mode	expressive	0.2.0.0.1.0.2	0.2.0.0.1.0.2.0	
# ::edge	pass-07	ARG1	i	0.2.0.0.1.1.1	0.2.0.0.1.0.1	
# ::edge	say-01	ARG0	you	0.2.0.0.0	0.0.0	
# ::edge	say-01	ARG1-of	possible-01	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	something	ARG1-of	say-01	0.2.0.0	0.2.0.0.0	
# ::edge	something	example	and	0.2.0.0	0.2.0.0.1	
# ::edge	sum-up-01	ARG0	you	0.0	0.0.0	
# ::edge	sum-up-01	ARG1	thing	0.0	0.0.1	
# ::edge	thing	ARG0-of	cause-01	0.0.1	0.0.1.0	
# ::edge	way	mod	either	0.3	0.3.0	
# ::edge	work-01	ARG1	it	0.2.0.0.1.1.0	0.2.0.0.1.1.0.0	
# ::edge	work-01	ARG1-of	hard-02	0.2.0.0.1.1.0	0.2.0.0.1.1.0.1	
# ::edge	work-10	ARG0	you	0.1	0.0.0	
# ::edge	work-10	ARG1	bottom	0.1	0.1.0	
# ::edge	work-10	ARG2	off	0.1	0.1.1	
# ::edge	work-10	purpose	get-01	0.1	0.1.2	
(a / and
      :op1 (s / sum-up-01
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (b / be-located-at-91
                              :ARG1 y
                              :ARG2 (t2 / there)))))
      :op2 (w / work-10
            :ARG0 y
            :ARG1 (b2 / bottom
                  :poss y)
            :ARG2 (o / off)
            :purpose (g / get-01
                  :ARG0 y
                  :ARG1 (g2 / grade
                        :mod (g3 / good
                              :degree (m / most)
                              :ARG1-of (p / possible-01)))))
      :ARG1-of (c2 / cause-01
            :ARG0 (h / have-03
                  :ARG0 y
                  :ARG1 (s2 / something
                        :ARG1-of (s3 / say-01
                              :ARG0 y
                              :ARG1-of (p2 / possible-01))
                        :example (a2 / and
                              :op1 (f / fail-01 :polarity -
                                    :ARG1 (i / i)
                                    :mod (h2 / hey :mode expressive))
                              :op2 (a3 / and
                                    :op1 (w2 / work-01
                                          :ARG1 (i2 / it)
                                          :ARG1-of (h3 / hard-02))
                                    :op2 (p3 / pass-07
                                          :ARG1 i))))
                  :time (g4 / get-01
                        :ARG0 y
                        :ARG1 (d / degree
                              :poss y))))
      :mod (w3 / way
            :mod (e / either)))

# ::node	0	X	0-1
# ::root	0	X
(x / X)

# ::node	0	multi-sentence	
# ::node	0.0	focus-01	5-6
# ::node	0.0.0	i	1-2
# ::node	0.0.1	idol	8-9
# ::node	0.0.2	you	3-4
# ::node	0.1	aspire-01	12-13
# ::node	0.1.0	you	11-12
# ::node	0.1.1	someone	10-11
# ::node	0.1.1.0	someone	21-22
# ::node	0.1.1.0.0	come-03	33-34
# ::node	0.1.1.0.0.0	background	37-38
# ::node	0.1.1.0.0.0.0	bad-07	36-37
# ::node	0.1.1.0.1	end-up-03	
# ::node	0.1.1.0.1.0	and	25-26
# ::node	0.1.1.0.1.0.0	succeed-01	41-42
# ::node	0.1.1.0.1.0.1	happy	43-44
# ::node	0.1.1.0.1.0.2	have-03	26-27
# ::node	0.1.1.0.1.0.2.0	family	46-47
# ::node	0.1.1.0.1.0.3	marry-01	48-49
# ::node	0.1.1.0.1.0.4	et-cetera	
# ::node	0.2	contrast-01	20-21
# ::node	0.2.0	want-01	16-17
# ::node	0.2.0.0	-	16-16
# ::node	0.2.0.1	you	
# ::node	0.2.0.2	they	
# ::node	0.2.1	someone	31-32
# ::node	0.2.1.0	admire-01	24-25
# ::node	0.2.1.1	respect-01	27-28
# ::root	0	multi-sentence
# ::edge	admire-01	ARG0	you	0.2.1.0	0.2.0.1	
# ::edge	and	op1	succeed-01	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	and	op2	happy	0.1.1.0.1.0	0.1.1.0.1.0.1	
# ::edge	and	op3	have-03	0.1.1.0.1.0	0.1.1.0.1.0.2	
# ::edge	and	op4	marry-01	0.1.1.0.1.0	0.1.1.0.1.0.3	
# ::edge	and	op5	et-cetera	0.1.1.0.1.0	0.1.1.0.1.0.4	
# ::edge	aspire-01	ARG0	you	0.1	0.1.0	
# ::edge	aspire-01	ARG1	someone	0.1	0.1.1	
# ::edge	background	ARG1-of	bad-07	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	come-03	ARG2	background	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	contrast-01	ARG1	want-01	0.2	0.2.0	
# ::edge	contrast-01	ARG2	someone	0.2	0.2.1	
# ::edge	end-up-03	ARG2	and	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	focus-01	ARG0	i	0.0	0.0.0	
# ::edge	focus-01	ARG2	idol	0.0	0.0.1	
# ::edge	focus-01	condition	you	0.0	0.0.2	
# ::edge	happy	domain	someone	0.1.1.0.1.0.1	0.1.1.0	
# ::edge	have-03	ARG0	someone	0.1.1.0.1.0.2	0.1.1.0	
# ::edge	have-03	ARG1	family	0.1.1.0.1.0.2	0.1.1.0.1.0.2.0	
# ::edge	marry-01	ARG1	someone	0.1.1.0.1.0.3	0.1.1.0	
# ::edge	multi-sentence	snt1	focus-01	0	0.0	
# ::edge	multi-sentence	snt2	aspire-01	0	0.1	
# ::edge	multi-sentence	snt3	contrast-01	0	0.2	
# ::edge	respect-01	ARG0	you	0.2.1.1	0.2.0.1	
# ::edge	someone	ARG1-of	admire-01	0.2.1	0.2.1.0	
# ::edge	someone	ARG1-of	come-03	0.1.1.0	0.1.1.0.0	
# ::edge	someone	ARG1-of	end-up-03	0.1.1.0	0.1.1.0.1	
# ::edge	someone	ARG1-of	respect-01	0.2.1	0.2.1.1	
# ::edge	someone	example	someone	0.1.1	0.1.1.0	
# ::edge	succeed-01	ARG0	someone	0.1.1.0.1.0.0	0.1.1.0	
# ::edge	they	domain	you	0.2.0.2	0.2.0.1	
# ::edge	want-01	ARG0	you	0.2.0	0.2.0.1	
# ::edge	want-01	ARG1	they	0.2.0	0.2.0.2	
# ::edge	want-01	polarity	-	0.2.0	0.2.0.0	
# ::edge	you	domain	i	0.0.2	0.0.0	
(m / multi-sentence
      :snt1 (f / focus-01
            :ARG0 (i / i)
            :ARG2 (i2 / idol)
            :condition (y / you
                  :domain i))
      :snt2 (a / aspire-01
            :ARG0 (y2 / you)
            :ARG1 (s / someone
                  :example (s2 / someone
                        :ARG1-of (c / come-03
                              :ARG2 (b / background
                                    :ARG1-of (b2 / bad-07)))
                        :ARG1-of (e / end-up-03
                              :ARG2 (a2 / and
                                    :op1 (s3 / succeed-01
                                          :ARG0 s2)
                                    :op2 (h / happy
                                          :domain s2)
                                    :op3 (h2 / have-03
                                          :ARG0 s2
                                          :ARG1 (f2 / family))
                                    :op4 (m2 / marry-01
                                          :ARG1 s2)
                                    :op5 (e2 / et-cetera))))))
      :snt3 (c3 / contrast-01
            :ARG1 (w / want-01 :polarity -
                  :ARG0 (y3 / you)
                  :ARG1 (t / they
                        :domain y3))
            :ARG2 (s4 / someone
                  :ARG1-of (a3 / admire-01
                        :ARG0 y3)
                  :ARG1-of (r / respect-01
                        :ARG0 y3))))

# ::node	0	multi-sentence	
# ::node	0.0	focus-01	0-1
# ::node	0.0.0	you	3-4
# ::node	0.0.1	thing	6-7
# ::node	0.0.1.0	achieve-01	6-7
# ::node	0.0.1.0.0	life	8-9
# ::node	0.1	state-01	12-13
# ::node	0.1.0	-	
# ::node	0.1.1	you	10-11
# ::node	0.1.2	or	17-18
# ::node	0.1.2.0	thing	15-16
# ::node	0.1.2.0.0	study-01	15-16
# ::node	0.1.2.1	thing	23-24
# ::node	0.1.2.1.0	cause-01	23-24
# ::node	0.1.2.1.1	indeed	18-19
# ::node	0.2	cause-01	29-30
# ::node	0.2.0	want-01	4-5
# ::node	0.2.0.0	interrogative	
# ::node	0.2.0.1	you	24-25
# ::node	0.2.0.2	experience-01	27-28
# ::node	0.3	cause-01	37-38
# ::node	0.3.0	want-01	25-26
# ::node	0.3.0.0	interrogative	
# ::node	0.3.0.1	person	11-12
# ::node	0.3.0.1.0	have-rel-role-91	11-12
# ::node	0.3.0.1.0.0	mum	31-32
# ::node	0.3.0.2	go-01	35-36
# ::node	0.3.0.2.0	you	45-46
# ::node	0.4	cause-01	
# ::node	0.4.0	need-01	39-40
# ::node	0.4.0.0	interrogative	
# ::node	0.4.0.1	you	
# ::node	0.4.0.2	degree	41-42
# ::node	0.4.0.3	career	44-45
# ::node	0.4.0.3.0	want-01	32-33
# ::root	0	multi-sentence
# ::edge	achieve-01	ARG0	you	0.0.1.0	0.0.0	
# ::edge	achieve-01	prep-in	life	0.0.1.0	0.0.1.0.0	
# ::edge	career	ARG1-of	want-01	0.4.0.3	0.4.0.3.0	
# ::edge	cause-01	ARG0	need-01	0.4	0.4.0	
# ::edge	cause-01	ARG0	want-01	0.2	0.2.0	
# ::edge	cause-01	ARG0	want-01	0.3	0.3.0	
# ::edge	cause-01	ARG1	study-01	0.1.2.1.0	0.1.2.0.0	
# ::edge	experience-01	ARG0	you	0.2.0.2	0.2.0.1	
# ::edge	focus-01	ARG0	you	0.0	0.0.0	
# ::edge	focus-01	ARG2	thing	0.0	0.0.1	
# ::edge	go-01	ARG1	you	0.3.0.2	0.3.0.2.0	
# ::edge	have-rel-role-91	ARG1	you	0.3.0.1.0	0.3.0.2.0	
# ::edge	have-rel-role-91	ARG2	mum	0.3.0.1.0	0.3.0.1.0.0	
# ::edge	multi-sentence	snt1	focus-01	0	0.0	
# ::edge	multi-sentence	snt2	state-01	0	0.1	
# ::edge	multi-sentence	snt3	cause-01	0	0.2	
# ::edge	multi-sentence	snt4	cause-01	0	0.3	
# ::edge	multi-sentence	snt5	cause-01	0	0.4	
# ::edge	need-01	ARG0	you	0.4.0	0.4.0.1	
# ::edge	need-01	ARG1	degree	0.4.0	0.4.0.2	
# ::edge	need-01	mode	interrogative	0.4.0	0.4.0.0	
# ::edge	need-01	prep-for	career	0.4.0	0.4.0.3	
# ::edge	or	op1	thing	0.1.2	0.1.2.0	
# ::edge	or	op2	thing	0.1.2	0.1.2.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.3.0.1	0.3.0.1.0	
# ::edge	state-01	ARG0	you	0.1	0.1.1	
# ::edge	state-01	ARG1	or	0.1	0.1.2	
# ::edge	state-01	polarity	-	0.1	0.1.0	
# ::edge	study-01	ARG0	you	0.1.2.0.0	0.1.1	
# ::edge	thing	ARG0-of	cause-01	0.1.2.1	0.1.2.1.0	
# ::edge	thing	ARG1-of	achieve-01	0.0.1	0.0.1.0	
# ::edge	thing	ARG1-of	study-01	0.1.2.0	0.1.2.0.0	
# ::edge	thing	mod	indeed	0.1.2.1	0.1.2.1.1	
# ::edge	want-01	ARG0	person	0.3.0	0.3.0.1	
# ::edge	want-01	ARG0	you	0.2.0	0.2.0.1	
# ::edge	want-01	ARG0	you	0.4.0.3.0	0.4.0.1	
# ::edge	want-01	ARG1	experience-01	0.2.0	0.2.0.2	
# ::edge	want-01	ARG1	go-01	0.3.0	0.3.0.2	
# ::edge	want-01	mode	interrogative	0.2.0	0.2.0.0	
# ::edge	want-01	mode	interrogative	0.3.0	0.3.0.0	
(m / multi-sentence
      :snt1 (f / focus-01
            :ARG0 (y / you)
            :ARG2 (t / thing
                  :ARG1-of (a / achieve-01
                        :ARG0 y
                        :prep-in (l / life))))
      :snt2 (s / state-01 :polarity -
            :ARG0 (y2 / you)
            :ARG1 (o / or
                  :op1 (t2 / thing
                        :ARG1-of (s2 / study-01
                              :ARG0 y2))
                  :op2 (t3 / thing
                        :ARG0-of (c / cause-01
                              :ARG1 s2)
                        :mod (i / indeed))))
      :snt3 (c2 / cause-01
            :ARG0 (w / want-01 :mode interrogative
                  :ARG0 (y3 / you)
                  :ARG1 (e / experience-01
                        :ARG0 y3)))
      :snt4 (c3 / cause-01
            :ARG0 (w2 / want-01 :mode interrogative
                  :ARG0 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 y4
                              :ARG2 (m2 / mum)))
                  :ARG1 (g / go-01
                        :ARG1 (y4 / you))))
      :snt5 (c4 / cause-01
            :ARG0 (n / need-01 :mode interrogative
                  :ARG0 (y5 / you)
                  :ARG1 (d / degree)
                  :prep-for (c5 / career
                        :ARG1-of (w3 / want-01
                              :ARG0 y5)))))

# ::node	0	luck	1-2
# ::node	0.0	good	0-1
# ::root	0	luck
# ::edge	luck	mod	good	0	0.0	
(l / luck
      :mod (g / good))

# ::node	0	tell-01	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	need-01	6-7
# ::node	0.2.0	go-06	8-9
# ::node	0.2.0.0	communicate-01	5-6
# ::node	0.2.0.0.0	all	4-5
# ::node	0.2.0.1	lawyer	11-12
# ::node	0.3	person	
# ::node	0.3.0	have-rel-role-91	
# ::node	0.3.0.0	significant-other	
# ::node	0.3.0.1	ex	2-3
# ::root	0	tell-01
# ::edge	communicate-01	mod	all	0.2.0.0	0.2.0.0.0	
# ::edge	go-06	ARG0	communicate-01	0.2.0	0.2.0.0	
# ::edge	go-06	path	lawyer	0.2.0	0.2.0.1	
# ::edge	have-rel-role-91	ARG1	you	0.3.0	0.1	
# ::edge	have-rel-role-91	ARG2	significant-other	0.3.0	0.3.0.0	
# ::edge	have-rel-role-91	time	ex	0.3.0	0.3.0.1	
# ::edge	need-01	ARG1	go-06	0.2	0.2.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.3	0.3.0	
# ::edge	tell-01	ARG0	you	0	0.1	
# ::edge	tell-01	ARG1	need-01	0	0.2	
# ::edge	tell-01	ARG2	person	0	0.3	
# ::edge	tell-01	mode	imperative	0	0.0	
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (n / need-01
            :ARG1 (g / go-06
                  :ARG0 (c / communicate-01
                        :mod (a / all))
                  :path (l / lawyer)))
      :ARG2 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 y
                  :ARG2 (s / significant-other)
                  :time (e / ex))))

# ::node	0	try-01	7-8
# ::node	0.0	imperative	
# ::node	0.1	you	1-2
# ::node	0.2	aid-01	9-10
# ::node	0.2.0	legal-02	8-9
# ::node	0.3	possible-01	
# ::node	0.3.0	-	
# ::node	0.3.1	afford-01	4-5
# ::node	0.3.1.0	one	5-6
# ::root	0	try-01
# ::edge	afford-01	ARG0	you	0.3.1	0.1	
# ::edge	afford-01	ARG1	one	0.3.1	0.3.1.0	
# ::edge	aid-01	ARG1-of	legal-02	0.2	0.2.0	
# ::edge	possible-01	ARG1	afford-01	0.3	0.3.1	
# ::edge	possible-01	polarity	-	0.3	0.3.0	
# ::edge	try-01	ARG0	you	0	0.1	
# ::edge	try-01	ARG1	aid-01	0	0.2	
# ::edge	try-01	condition	possible-01	0	0.3	
# ::edge	try-01	mode	imperative	0	0.0	
(t / try-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / aid-01
            :ARG1-of (l / legal-02))
      :condition (p / possible-01 :polarity -
            :ARG1 (a2 / afford-01
                  :ARG0 y
                  :ARG1 (o / one))))

# ::node	0	and	3-4
# ::node	0.0	get-01	0-1
# ::node	0.0.0	imperative	
# ::node	0.0.1	you	
# ::node	0.0.2	lawyer	2-3
# ::node	0.1	divorce-01	6-7
# ::node	0.1.0	imperative	
# ::root	0	and
# ::edge	and	op1	get-01	0	0.0	
# ::edge	and	op2	divorce-01	0	0.1	
# ::edge	divorce-01	ARG0	you	0.1	0.0.1	
# ::edge	divorce-01	mode	imperative	0.1	0.1.0	
# ::edge	get-01	ARG0	you	0.0	0.0.1	
# ::edge	get-01	ARG1	lawyer	0.0	0.0.2	
# ::edge	get-01	mode	imperative	0.0	0.0.0	
(a / and
      :op1 (g / get-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / lawyer))
      :op2 (d / divorce-01 :mode imperative
            :ARG0 y))

# ::node	0	multi-sentence	
# ::node	0.0	agree-01	2-3
# ::node	0.0.0	i	0-1
# ::node	0.1	thing	6-7
# ::node	0.1.0	1	4-5
# ::node	0.1.1	other	5-6
# ::node	0.1.2	business	12-13
# ::node	0.1.2.0	-	18-18
# ::node	0.1.2.1	he	
# ::node	0.1.2.2	or	16-17
# ::node	0.1.2.2.0	date-02	
# ::node	0.1.2.2.0.0	you	14-15
# ::node	0.1.2.2.1	date-02	15-16
# ::node	0.1.2.2.1.0	-	18-18
# ::root	0	multi-sentence
# ::edge	agree-01	ARG0	i	0.0	0.0.0	
# ::edge	business	domain	or	0.1.2	0.1.2.2	
# ::edge	business	polarity	-	0.1.2	0.1.2.0	
# ::edge	business	poss	he	0.1.2	0.1.2.1	
# ::edge	date-02	ARG0	you	0.1.2.2.0	0.1.2.2.0.0	
# ::edge	date-02	ARG0	you	0.1.2.2.1	0.1.2.2.0.0	
# ::edge	date-02	polarity	-	0.1.2.2.1	0.1.2.2.1.0	
# ::edge	multi-sentence	snt1	agree-01	0	0.0	
# ::edge	multi-sentence	snt2	thing	0	0.1	
# ::edge	or	op1	date-02	0.1.2.2	0.1.2.2.0	
# ::edge	or	op2	date-02	0.1.2.2	0.1.2.2.1	
# ::edge	thing	domain	business	0.1	0.1.2	
# ::edge	thing	mod	other	0.1	0.1.1	
# ::edge	thing	quant	1	0.1	0.1.0	
(m / multi-sentence
      :snt1 (a2 / agree-01
            :ARG0 (i / i))
      :snt2 (t / thing :quant 1
            :mod (o / other)
            :domain (b / business :polarity -
                  :poss (h / he)
                  :domain (o3 / or
                        :op1 (d / date-02
                              :ARG0 (y / you))
                        :op2 (d2 / date-02 :polarity -
                              :ARG0 y)))))

# ::node	0	hope-01	0-1
# ::node	0.0	i	
# ::node	0.1	help-01	2-3
# ::node	0.1.0	this	1-2
# ::root	0	hope-01
# ::edge	help-01	ARG0	this	0.1	0.1.0	
# ::edge	hope-01	ARG0	i	0	0.0	
# ::edge	hope-01	ARG1	help-01	0	0.1	
(h / hope-01
      :ARG0 (i / i)
      :ARG1 (h2 / help-01
            :ARG0 (t / this)))

# ::node	0	make-02	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	5-6
# ::node	0.2	or	3-4
# ::node	0.2.0	email-01	2-3
# ::node	0.2.0.0	he	
# ::node	0.2.1	text-01	4-5
# ::node	0.2.1.0	he	
# ::root	0	make-02
# ::edge	email-01	ARG0	he	0.2.0	0.2.0.0	
# ::edge	email-01	ARG2	you	0.2.0	0.1	
# ::edge	make-02	ARG0	you	0	0.1	
# ::edge	make-02	ARG1	or	0	0.2	
# ::edge	make-02	mode	imperative	0	0.0	
# ::edge	or	op1	email-01	0.2	0.2.0	
# ::edge	or	op2	text-01	0.2	0.2.1	
# ::edge	text-01	ARG0	he	0.2.1	0.2.1.0	
# ::edge	text-01	ARG2	you	0.2.1	0.1	
(m / make-02 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / or
            :op1 (e / email-01
                  :ARG0 (h / he)
                  :ARG2 y)
            :op2 (t / text-01
                  :ARG0 (h2 / he)
                  :ARG2 y)))

# ::node	0	keep-01	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	thing	2-3
# ::node	0.2.0	record-01	2-3
# ::node	0.2.1	that	
# ::root	0	keep-01
# ::edge	keep-01	ARG0	you	0	0.1	
# ::edge	keep-01	ARG1	thing	0	0.2	
# ::edge	keep-01	mode	imperative	0	0.0	
# ::edge	thing	ARG1-of	record-01	0.2	0.2.0	
# ::edge	thing	mod	that	0.2	0.2.1	
(k / keep-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (r / record-01)
            :mod (t2 / that)))

# ::node	0	tell-01	3-4
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	he	
# ::root	0	tell-01
# ::edge	tell-01	ARG0	i	0	0.1	
# ::edge	tell-01	ARG2	he	0	0.2	
# ::edge	tell-01	polarity	-	0	0.0	
(t / tell-01 :polarity -
      :ARG0 (i / i)
      :ARG2 (h / he))

# ::node	0	way	7-8
# ::node	0.0	possible-01	8-9
# ::node	0.1	rid-01	2-3
# ::node	0.1.0	you	23-24
# ::node	0.1.1	it	30-31
# ::node	0.2	avoid-01	12-13
# ::node	0.2.0	act-01	15-16
# ::node	0.2.0.0	compulsive	14-15
# ::node	0.2.1	just	28-29
# ::node	0.3	cause-01	
# ::node	0.3.0	and	
# ::node	0.3.0.0	check-01	19-20
# ::node	0.3.0.0.0	imperative	
# ::node	0.3.0.0.1	-	
# ::node	0.3.0.0.2	lose-02	25-26
# ::node	0.3.0.0.2.0	something	26-27
# ::node	0.3.0.1	leave-14	29-30
# ::node	0.3.0.1.0	imperative	
# ::node	0.3.0.1.1	it	4-5
# ::node	0.3.0.1.2	just	10-11
# ::root	0	way
# ::edge	act-01	ARG1	compulsive	0.2.0	0.2.0.0	
# ::edge	and	op1	check-01	0.3.0	0.3.0.0	
# ::edge	and	op2	leave-14	0.3.0	0.3.0.1	
# ::edge	avoid-01	ARG0	you	0.2	0.1.0	
# ::edge	avoid-01	ARG1	act-01	0.2	0.2.0	
# ::edge	avoid-01	mod	just	0.2	0.2.1	
# ::edge	cause-01	ARG1	and	0.3	0.3.0	
# ::edge	check-01	ARG0	you	0.3.0.0	0.1.0	
# ::edge	check-01	ARG1	lose-02	0.3.0.0	0.3.0.0.2	
# ::edge	check-01	mode	imperative	0.3.0.0	0.3.0.0.0	
# ::edge	check-01	polarity	-	0.3.0.0	0.3.0.0.1	
# ::edge	leave-14	ARG0	you	0.3.0.1	0.1.0	
# ::edge	leave-14	ARG1	it	0.3.0.1	0.3.0.1.1	
# ::edge	leave-14	mod	just	0.3.0.1	0.3.0.1.2	
# ::edge	leave-14	mode	imperative	0.3.0.1	0.3.0.1.0	
# ::edge	lose-02	ARG0	you	0.3.0.0.2	0.1.0	
# ::edge	lose-02	ARG1	something	0.3.0.0.2	0.3.0.0.2.0	
# ::edge	rid-01	ARG0	you	0.1	0.1.0	
# ::edge	rid-01	ARG1	it	0.1	0.1.1	
# ::edge	way	ARG0-of	cause-01	0	0.3	
# ::edge	way	ARG1-of	possible-01	0	0.0	
# ::edge	way	domain	avoid-01	0	0.2	
# ::edge	way	instrument-of	rid-01	0	0.1	
(w / way
      :ARG1-of (p / possible-01)
      :instrument-of (r / rid-01
            :ARG0 (y / you)
            :ARG1 (i / it))
      :domain (a / avoid-01
            :ARG0 y
            :ARG1 (a2 / act-01
                  :ARG1 (c / compulsive))
            :mod (j / just))
      :ARG0-of (c2 / cause-01
            :ARG1 (a3 / and
                  :op1 (c3 / check-01 :mode imperative :polarity -
                        :ARG0 y
                        :ARG1 (l2 / lose-02
                              :ARG0 y
                              :ARG1 (s / something)))
                  :op2 (l / leave-14 :mode imperative
                        :ARG0 y
                        :ARG1 (i2 / it)
                        :mod (j2 / just)))))

# ::node	0	do-02	1-2
# ::node	0.0	i	0-1
# ::node	0.1	disease	3-4
# ::node	0.1.0	"Obsessive–compulsive_disorder"	
# ::node	0.1.1	name	3-4
# ::node	0.1.1.0	"OCD"	3-4
# ::node	0.2	emoticon	
# ::node	0.2.0	":P"	
# ::node	0.3	class	
# ::node	0.3.0	psychology	5-6
# ::node	0.3.1	today	6-7
# ::root	0	do-02
# ::edge	class	time	today	0.3	0.3.1	
# ::edge	class	topic	psychology	0.3	0.3.0	
# ::edge	disease	name	name	0.1	0.1.1	
# ::edge	disease	wiki	"Obsessive–compulsive_disorder"	0.1	0.1.0	
# ::edge	do-02	ARG0	i	0	0.0	
# ::edge	do-02	mod	emoticon	0	0.2	
# ::edge	do-02	subevent	class	0	0.3	
# ::edge	do-02	topic	disease	0	0.1	
# ::edge	emoticon	value	":P"	0.2	0.2.0	
# ::edge	name	op1	"OCD"	0.1.1	0.1.1.0	
(d / do-02
      :ARG0 (i / i)
      :topic (d2 / disease :wiki "Obsessive–compulsive_disorder"
            :name (n / name :op1 "OCD"))
      :mod (e / emoticon :value ":P")
      :subevent (c / class
            :topic (p / psychology)
            :time (t / today)))

# ::node	0	do-02	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	2-3
# ::node	0.2	thing	3-4
# ::node	0.2.0	want-01	3-4
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.1	
# ::edge	do-02	ARG1	thing	0	0.2	
# ::edge	do-02	mode	imperative	0	0.0	
# ::edge	thing	ARG1-of	want-01	0.2	0.2.0	
# ::edge	want-01	ARG0	you	0.2.0	0.1	
(d / do-02 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (w / want-01
                  :ARG0 y)))

# ::node	0	advise-01	1-2
# ::node	0.0	you	3-4
# ::node	0.1	i	
# ::node	0.2	amr-unknown	
# ::node	0.3	possible-01	2-3
# ::root	0	advise-01
# ::edge	advise-01	ARG0	you	0	0.0	
# ::edge	advise-01	ARG1	i	0	0.1	
# ::edge	advise-01	ARG1-of	possible-01	0	0.3	
# ::edge	advise-01	ARG2	amr-unknown	0	0.2	
(a / advise-01
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (a2 / amr-unknown)
      :ARG1-of (p / possible-01))

# ::node	0	cause-01	
# ::node	0.0	see-01	3-4
# ::node	0.0.0	doctor	0-1
# ::node	0.0.1	case	6-7
# ::node	0.0.1.0	bad-05	5-6
# ::node	0.0.1.0.0	more	
# ::node	0.0.1.0.0.0	much	4-5
# ::node	0.1	worry-02	10-11
# ::node	0.1.0	-	
# ::node	0.1.1	imperative	
# ::node	0.1.2	you	
# ::node	0.1.3	that	12-13
# ::root	0	cause-01
# ::edge	bad-05	degree	more	0.0.1.0	0.0.1.0.0	
# ::edge	case	ARG1-of	bad-05	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG0	see-01	0	0.0	
# ::edge	cause-01	ARG1	worry-02	0	0.1	
# ::edge	more	quant	much	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	see-01	ARG0	doctor	0.0	0.0.0	
# ::edge	see-01	ARG1	case	0.0	0.0.1	
# ::edge	worry-02	ARG0	you	0.1	0.1.2	
# ::edge	worry-02	ARG1	that	0.1	0.1.3	
# ::edge	worry-02	mode	imperative	0.1	0.1.1	
# ::edge	worry-02	polarity	-	0.1	0.1.0	
(c / cause-01
      :ARG0 (s / see-01
            :ARG0 (d / doctor)
            :ARG1 (c2 / case
                  :ARG1-of (b / bad-05
                        :degree (m / more
                              :quant (m2 / much)))))
      :ARG1 (w / worry-02 :polarity - :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / that)))

# ::node	0	multi-sentence	
# ::node	0.0	know-01	50-51
# ::node	0.0.0	easy-05	45-46
# ::node	0.0.0.0	say-01	46-47
# ::node	0.0.0.1	more	3-4
# ::node	0.0.0.2	do-02	48-49
# ::node	0.1	and	6-7
# ::node	0.1.0	have-03	2-3
# ::node	0.1.0.0	i	0-1
# ::node	0.1.0.1	anxiety	5-6
# ::node	0.1.0.1.0	severe	4-5
# ::node	0.1.0.1.0.0	more	
# ::node	0.1.0.2	now	1-2
# ::node	0.1.1	think-01	7-8
# ::node	0.1.1.0	sign	13-14
# ::node	0.1.1.0.0	warn-01	12-13
# ::node	0.1.1.0.1	this	
# ::node	0.1.2	cause-01	
# ::node	0.1.2.0	and	17-18
# ::node	0.1.2.0.0	try-01	16-17
# ::node	0.1.2.0.0.0	you	
# ::node	0.1.2.0.0.1	wean-01	18-19
# ::node	0.1.2.0.0.1.0	habit	23-24
# ::node	0.1.2.0.0.1.1	fresh-04	28-29
# ::node	0.1.2.0.0.1.1.0	relative	27-28
# ::node	0.1.2.0.0.2	just	10-11
# ::node	0.1.2.0.1	visit-01	31-32
# ::node	0.1.2.0.1.0	imperative	
# ::node	0.1.2.0.1.1	person	
# ::node	0.1.2.0.1.1.0	have-rel-role-91	33-34
# ::node	0.1.2.0.1.1.0.0	doctor	33-34
# ::node	0.1.2.0.1.2	definite	30-31
# ::node	0.1.2.0.1.3	contrast-01	34-35
# ::node	0.1.2.0.1.3.0	tell-01	36-37
# ::node	0.1.2.0.1.3.0.0	keep-01	40-41
# ::node	0.1.2.0.1.3.0.0.0	-	39-39
# ::node	0.1.2.0.1.3.0.0.1	check-01	41-42
# ::node	0.1.2.0.1.3.0.0.1.0	thing	43-44
# ::node	0.1.2.0.1.3.0.0.1.0.0	this	8-9
# ::node	0.1.2.0.1.3.0.1	also	35-36
# ::root	0	multi-sentence
# ::edge	and	ARG0-of	cause-01	0.1	0.1.2	
# ::edge	and	op1	have-03	0.1	0.1.0	
# ::edge	and	op1	try-01	0.1.2.0	0.1.2.0.0	
# ::edge	and	op2	think-01	0.1	0.1.1	
# ::edge	and	op2	visit-01	0.1.2.0	0.1.2.0.1	
# ::edge	anxiety	mod	severe	0.1.0.1	0.1.0.1.0	
# ::edge	cause-01	ARG1	and	0.1.2	0.1.2.0	
# ::edge	check-01	ARG0	you	0.1.2.0.1.3.0.0.1	0.1.2.0.0.0	
# ::edge	check-01	ARG1	thing	0.1.2.0.1.3.0.0.1	0.1.2.0.1.3.0.0.1.0	
# ::edge	contrast-01	ARG2	tell-01	0.1.2.0.1.3	0.1.2.0.1.3.0	
# ::edge	easy-05	ARG1	say-01	0.0.0	0.0.0.0	
# ::edge	easy-05	compared-to	do-02	0.0.0	0.0.0.2	
# ::edge	easy-05	degree	more	0.0.0	0.0.0.1	
# ::edge	fresh-04	ARG1	habit	0.1.2.0.0.1.1	0.1.2.0.0.1.0	
# ::edge	fresh-04	mod	relative	0.1.2.0.0.1.1	0.1.2.0.0.1.1.0	
# ::edge	have-03	ARG0	i	0.1.0	0.1.0.0	
# ::edge	have-03	ARG1	anxiety	0.1.0	0.1.0.1	
# ::edge	have-03	time	now	0.1.0	0.1.0.2	
# ::edge	have-rel-role-91	ARG1	you	0.1.2.0.1.1.0	0.1.2.0.0.0	
# ::edge	have-rel-role-91	ARG2	doctor	0.1.2.0.1.1.0	0.1.2.0.1.1.0.0	
# ::edge	keep-01	ARG0	you	0.1.2.0.1.3.0.0	0.1.2.0.0.0	
# ::edge	keep-01	ARG1	check-01	0.1.2.0.1.3.0.0	0.1.2.0.1.3.0.0.1	
# ::edge	keep-01	polarity	-	0.1.2.0.1.3.0.0	0.1.2.0.1.3.0.0.0	
# ::edge	know-01	ARG0	i	0.0	0.1.0.0	
# ::edge	know-01	ARG1	easy-05	0.0	0.0.0	
# ::edge	multi-sentence	snt1	and	0	0.1	
# ::edge	multi-sentence	snt2	know-01	0	0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.2.0.1.1	0.1.2.0.1.1.0	
# ::edge	severe	degree	more	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	sign	ARG0-of	warn-01	0.1.1.0	0.1.1.0.0	
# ::edge	sign	domain	this	0.1.1.0	0.1.1.0.1	
# ::edge	tell-01	ARG0	you	0.1.2.0.1.3.0	0.1.2.0.0.0	
# ::edge	tell-01	ARG1	keep-01	0.1.2.0.1.3.0	0.1.2.0.1.3.0.0	
# ::edge	tell-01	ARG2	you	0.1.2.0.1.3.0	0.1.2.0.0.0	
# ::edge	tell-01	mod	also	0.1.2.0.1.3.0	0.1.2.0.1.3.0.1	
# ::edge	thing	mod	this	0.1.2.0.1.3.0.0.1.0	0.1.2.0.1.3.0.0.1.0.0	
# ::edge	think-01	ARG0	i	0.1.1	0.1.0.0	
# ::edge	think-01	ARG1	sign	0.1.1	0.1.1.0	
# ::edge	try-01	ARG0	you	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	try-01	ARG1	wean-01	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	try-01	mod	just	0.1.2.0.0	0.1.2.0.0.2	
# ::edge	visit-01	ARG0	you	0.1.2.0.1	0.1.2.0.0.0	
# ::edge	visit-01	ARG1	person	0.1.2.0.1	0.1.2.0.1.1	
# ::edge	visit-01	ARG1-of	contrast-01	0.1.2.0.1	0.1.2.0.1.3	
# ::edge	visit-01	mod	definite	0.1.2.0.1	0.1.2.0.1.2	
# ::edge	visit-01	mode	imperative	0.1.2.0.1	0.1.2.0.1.0	
# ::edge	wean-01	ARG2	habit	0.1.2.0.0.1	0.1.2.0.0.1.0	
# ::edge	wean-01	time	fresh-04	0.1.2.0.0.1	0.1.2.0.0.1.1	
(m / multi-sentence
      :snt2 (k2 / know-01
            :ARG0 i
            :ARG1 (e / easy-05
                  :ARG1 (s3 / say-01)
                  :degree (m3 / more)
                  :compared-to (d3 / do-02)))
      :snt1 (a / and
            :op1 (h / have-03
                  :ARG0 (i / i)
                  :ARG1 (a2 / anxiety
                        :mod (s / severe
                              :degree (m2 / more)))
                  :time (n / now))
            :op2 (t / think-01
                  :ARG0 i
                  :ARG1 (s2 / sign
                        :ARG0-of (w / warn-01)
                        :domain (t2 / this)))
            :ARG0-of (c3 / cause-01
                  :ARG1 (a3 / and
                        :op1 (t3 / try-01
                              :ARG0 (y3 / you)
                              :ARG1 (w2 / wean-01
                                    :ARG2 (h2 / habit)
                                    :time (f / fresh-04
                                          :ARG1 h2
                                          :mod (r / relative)))
                              :mod (j / just))
                        :op2 (v2 / visit-01 :mode imperative
                              :ARG0 y3
                              :ARG1 (p / person
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG1 y3
                                          :ARG2 (d / doctor)))
                              :mod (d2 / definite)
                              :ARG1-of (c / contrast-01
                                    :ARG2 (t4 / tell-01
                                          :ARG0 y3
                                          :ARG1 (k / keep-01 :polarity -
                                                :ARG0 y3
                                                :ARG1 (c2 / check-01
                                                      :ARG0 y3
                                                      :ARG1 (t5 / thing
                                                            :mod (t6 / this))))
                                          :ARG2 y3
                                          :mod (a4 / also))))))))

# ::node	0	and	10-11
# ::node	0.0	hear-01	4-5
# ::node	0.0.0	-	
# ::node	0.0.1	they	0-1
# ::node	0.0.2	compulsion	7-8
# ::node	0.0.2.0	some	6-7
# ::node	0.0.2.1	resemble-01	
# ::node	0.0.2.1.0	this	9-10
# ::node	0.0.3	ever	
# ::node	0.0.4	probable	2-3
# ::node	0.1	know-01	14-15
# ::node	0.1.0	-	
# ::node	0.1.1	i	11-12
# ::node	0.1.2	thing	17-18
# ::node	0.1.2.0	do-02	17-18
# ::node	0.1.3	just	12-13
# ::root	0	and
# ::edge	and	op1	hear-01	0	0.0	
# ::edge	and	op2	know-01	0	0.1	
# ::edge	compulsion	ARG1-of	resemble-01	0.0.2	0.0.2.1	
# ::edge	compulsion	mod	some	0.0.2	0.0.2.0	
# ::edge	do-02	ARG0	i	0.1.2.0	0.1.1	
# ::edge	hear-01	ARG0	they	0.0	0.0.1	
# ::edge	hear-01	ARG1	compulsion	0.0	0.0.2	
# ::edge	hear-01	mod	probable	0.0	0.0.4	
# ::edge	hear-01	polarity	-	0.0	0.0.0	
# ::edge	hear-01	time	ever	0.0	0.0.3	
# ::edge	know-01	ARG0	i	0.1	0.1.1	
# ::edge	know-01	ARG1	thing	0.1	0.1.2	
# ::edge	know-01	mod	just	0.1	0.1.3	
# ::edge	know-01	polarity	-	0.1	0.1.0	
# ::edge	resemble-01	ARG2	this	0.0.2.1	0.0.2.1.0	
# ::edge	thing	ARG1-of	do-02	0.1.2	0.1.2.0	
(a / and
      :op1 (h / hear-01 :polarity -
            :ARG0 (t / they)
            :ARG1 (c / compulsion
                  :mod (s / some)
                  :ARG1-of (r / resemble-01
                        :ARG2 (t2 / this)))
            :time (e / ever)
            :mod (p / probable))
      :op2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t3 / thing
                  :ARG1-of (d / do-02
                        :ARG0 i))
            :mod (j / just)))

# ::node	0	possible-01	0-1
# ::node	0.0	interrogative	
# ::node	0.1	document-01	2-3
# ::node	0.1.0	you	1-2
# ::node	0.1.1	threaten-01	4-5
# ::node	0.1.1.0	he	
# ::root	0	possible-01
# ::edge	document-01	ARG0	you	0.1	0.1.0	
# ::edge	document-01	ARG1	threaten-01	0.1	0.1.1	
# ::edge	possible-01	ARG1	document-01	0	0.1	
# ::edge	possible-01	mode	interrogative	0	0.0	
# ::edge	threaten-01	ARG0	he	0.1.1	0.1.1.0	
(p / possible-01 :mode interrogative
      :ARG1 (d / document-01
            :ARG0 (y / you)
            :ARG1 (t2 / threaten-01
                  :ARG0 (h / he))))

# ::node	0	need-01	2-3
# ::node	0.0	you	0-1
# ::node	0.1	real	1-2
# ::root	0	need-01
# ::edge	need-01	ARG0	you	0	0.0	
# ::edge	need-01	manner	real	0	0.1	
(n / need-01
      :ARG0 (y / you)
      :manner (r / real))

# ::node	0	have-03	4-5
# ::node	0.0	interrogative	
# ::node	0.1	person	2-3
# ::node	0.1.0	include-91	2-3
# ::node	0.1.0.0	you	3-4
# ::node	0.1.1	any	1-2
# ::node	0.2	ritual	8-9
# ::node	0.2.0	resemble-01	
# ::root	0	have-03
# ::edge	have-03	ARG0	person	0	0.1	
# ::edge	have-03	ARG1	ritual	0	0.2	
# ::edge	have-03	mode	interrogative	0	0.0	
# ::edge	include-91	ARG2	you	0.1.0	0.1.0.0	
# ::edge	person	ARG1-of	include-91	0.1	0.1.0	
# ::edge	person	mod	any	0.1	0.1.1	
# ::edge	ritual	ARG1-of	resemble-01	0.2	0.2.0	
(h / have-03 :mode interrogative
      :ARG0 (p / person
            :ARG1-of (i / include-91
                  :ARG2 (y / you))
            :mod (a / any))
      :ARG1 (r / ritual
            :ARG1-of (r2 / resemble-01)))

# ::node	0	multi-sentence	
# ::node	0.0	and	4-5
# ::node	0.0.0	grow-up-04	1-2
# ::node	0.0.0.0	person	3-4
# ::node	0.0.0.0.0	-	
# ::node	0.0.0.0.1	name	3-4
# ::node	0.0.0.0.1.0	"tsr"	3-4
# ::node	0.0.1	stop-01	5-6
# ::node	0.0.1.0	nag-01	
# ::node	0.0.2	oh	0-1
# ::node	0.0.2.0	expressive	
# ::node	0.1	joke	10-11
# ::node	0.1.0	it	7-8
# ::root	0	multi-sentence
# ::edge	and	mod	oh	0.0	0.0.2	
# ::edge	and	op1	grow-up-04	0.0	0.0.0	
# ::edge	and	op2	stop-01	0.0	0.0.1	
# ::edge	grow-up-04	ARG1	person	0.0.0	0.0.0.0	
# ::edge	joke	domain	it	0.1	0.1.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	joke	0	0.1	
# ::edge	nag-01	ARG0	person	0.0.1.0	0.0.0.0	
# ::edge	name	op1	"tsr"	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	oh	mode	expressive	0.0.2	0.0.2.0	
# ::edge	person	name	name	0.0.0.0	0.0.0.0.1	
# ::edge	person	wiki	-	0.0.0.0	0.0.0.0.0	
# ::edge	stop-01	ARG0	person	0.0.1	0.0.0.0	
# ::edge	stop-01	ARG1	nag-01	0.0.1	0.0.1.0	
(m / multi-sentence
      :snt1 (a / and
            :op1 (g / grow-up-04
                  :ARG1 (p / person :wiki -
                        :name (n / name :op1 "tsr")))
            :op2 (s / stop-01
                  :ARG0 p
                  :ARG1 (n2 / nag-01
                        :ARG0 p))
            :mod (o / oh :mode expressive))
      :snt2 (j / joke
            :domain (i / it)))

# ::node	0	contrast-01	7-8
# ::node	0.0	think-01	2-3
# ::node	0.0.0	person	
# ::node	0.0.1	crazy-03	5-6
# ::node	0.0.1.0	i	3-4
# ::node	0.1	difficult	12-13
# ::node	0.1.0	get-05	14-15
# ::node	0.1.0.0	you	
# ::node	0.1.0.1	out-06	16-17
# ::node	0.1.0.1.0	this	18-19
# ::node	0.1.1	strange	11-12
# ::node	0.1.1.0	very	10-11
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	think-01	0	0.0	
# ::edge	contrast-01	ARG2	difficult	0	0.1	
# ::edge	crazy-03	ARG1	i	0.0.1	0.0.1.0	
# ::edge	difficult	domain	get-05	0.1	0.1.0	
# ::edge	difficult	manner	strange	0.1	0.1.1	
# ::edge	get-05	ARG0	you	0.1.0	0.1.0.0	
# ::edge	get-05	ARG1	you	0.1.0	0.1.0.0	
# ::edge	get-05	ARG2	out-06	0.1.0	0.1.0.1	
# ::edge	out-06	ARG1	you	0.1.0.1	0.1.0.0	
# ::edge	out-06	ARG2	this	0.1.0.1	0.1.0.1.0	
# ::edge	strange	degree	very	0.1.1	0.1.1.0	
# ::edge	think-01	ARG0	person	0.0	0.0.0	
# ::edge	think-01	ARG1	crazy-03	0.0	0.0.1	
(c / contrast-01
      :ARG1 (t / think-01
            :ARG0 (p / person)
            :ARG1 (c2 / crazy-03
                  :ARG1 (i / i)))
      :ARG2 (d / difficult
            :domain (g / get-05
                  :ARG0 y
                  :ARG1 (y / you)
                  :ARG2 (o / out-06
                        :ARG1 y
                        :ARG2 (t2 / this)))
            :manner (s / strange
                  :degree (v / very))))

# ::node	0	drill-02	11-12
# ::node	0.0	person	2-3
# ::node	0.0.0	do-02	2-3
# ::node	0.0.0.0	slash	
# ::node	0.0.0.0.0	dance-01	3-4
# ::node	0.0.0.0.1	gymnastics	5-6
# ::node	0.0.0.0.2	ballet	7-8
# ::node	0.0.0.0.3	et-cetera	
# ::node	0.1	it	10-11
# ::node	0.2	find-02	20-21
# ::node	0.2.0	i	19-20
# ::node	0.2.1	comfortable-02	23-24
# ::node	0.2.1.0	more	22-23
# ::node	0.2.1.1	now	24-25
# ::root	0	drill-02
# ::edge	comfortable-02	ARG1	it	0.2.1	0.1	
# ::edge	comfortable-02	degree	more	0.2.1	0.2.1.0	
# ::edge	comfortable-02	time	now	0.2.1	0.2.1.1	
# ::edge	do-02	ARG1	slash	0.0.0	0.0.0.0	
# ::edge	drill-02	ARG1	person	0	0.0	
# ::edge	drill-02	ARG2	it	0	0.1	
# ::edge	drill-02	extent	find-02	0	0.2	
# ::edge	find-02	ARG0	i	0.2	0.2.0	
# ::edge	find-02	ARG1	comfortable-02	0.2	0.2.1	
# ::edge	person	ARG0-of	do-02	0.0	0.0.0	
# ::edge	slash	op1	dance-01	0.0.0.0	0.0.0.0.0	
# ::edge	slash	op2	gymnastics	0.0.0.0	0.0.0.0.1	
# ::edge	slash	op3	ballet	0.0.0.0	0.0.0.0.2	
# ::edge	slash	op4	et-cetera	0.0.0.0	0.0.0.0.3	
(d / drill-02
      :ARG1 (p / person
            :ARG0-of (d2 / do-02
                  :ARG1 (s / slash
                        :op1 (d3 / dance-01)
                        :op2 (g / gymnastics)
                        :op3 (b / ballet)
                        :op4 (e / et-cetera))))
      :ARG2 (i / it)
      :extent (f / find-02
            :ARG0 (i2 / i)
            :ARG1 (c / comfortable-02
                  :ARG1 i
                  :degree (m / more)
                  :time (n / now))))

# ::node	0	read-01	3-4
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	symptom	9-10
# ::node	0.2.0	random	7-8
# ::node	0.2.1	resemble-01	
# ::node	0.2.1.0	that	12-13
# ::node	0.3	much	5-6
# ::node	0.3.0	too	4-5
# ::root	0	read-01
# ::edge	much	degree	too	0.3	0.3.0	
# ::edge	read-01	ARG0	i	0	0.1	
# ::edge	read-01	ARG2	symptom	0	0.2	
# ::edge	read-01	mod	much	0	0.3	
# ::edge	read-01	polarity	-	0	0.0	
# ::edge	resemble-01	ARG2	that	0.2.1	0.2.1.0	
# ::edge	symptom	ARG1-of	resemble-01	0.2	0.2.1	
# ::edge	symptom	mod	random	0.2	0.2.0	
(r / read-01 :polarity -
      :ARG0 (i / i)
      :ARG2 (s / symptom
            :mod (r2 / random)
            :ARG1-of (r3 / resemble-01
                  :ARG2 (t2 / that)))
      :mod (m / much
            :degree (t / too)))

# ::node	0	have-03	1-2
# ::node	0.0	i	0-1
# ::node	0.1	dyspraxia	2-3
# ::root	0	have-03
# ::edge	have-03	ARG0	i	0	0.0	
# ::edge	have-03	ARG1	dyspraxia	0	0.1	
(h / have-03
      :ARG0 (i / i)
      :ARG1 (d / dyspraxia))

# ::node	0	and	
# ::node	0.0	quit-01	0-1
# ::node	0.0.0	imperative	
# ::node	0.0.1	you	
# ::node	0.0.2	take-01	1-2
# ::node	0.0.2.0	call-02	3-4
# ::node	0.0.2.0.0	he	
# ::node	0.1	make-02	5-6
# ::node	0.1.0	imperative	
# ::node	0.1.1	leave-12	7-8
# ::node	0.1.1.0	mail	9-10
# ::node	0.1.1.0.0	voice	8-9
# ::root	0	and
# ::edge	and	op1	quit-01	0	0.0	
# ::edge	and	op2	make-02	0	0.1	
# ::edge	call-02	ARG0	he	0.0.2.0	0.0.2.0.0	
# ::edge	leave-12	ARG0	he	0.1.1	0.0.2.0.0	
# ::edge	leave-12	ARG1	mail	0.1.1	0.1.1.0	
# ::edge	mail	mod	voice	0.1.1.0	0.1.1.0.0	
# ::edge	make-02	ARG0	you	0.1	0.0.1	
# ::edge	make-02	ARG1	leave-12	0.1	0.1.1	
# ::edge	make-02	mode	imperative	0.1	0.1.0	
# ::edge	quit-01	ARG0	you	0.0	0.0.1	
# ::edge	quit-01	ARG1	take-01	0.0	0.0.2	
# ::edge	quit-01	mode	imperative	0.0	0.0.0	
# ::edge	take-01	ARG0	you	0.0.2	0.0.1	
# ::edge	take-01	ARG1	call-02	0.0.2	0.0.2.0	
(a / and
      :op1 (q / quit-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / take-01
                  :ARG0 y
                  :ARG1 (c / call-02
                        :ARG0 (h / he))))
      :op2 (m / make-02 :mode imperative
            :ARG0 y
            :ARG1 (l / leave-12
                  :ARG0 h
                  :ARG1 (m2 / mail
                        :mod (v / voice)))))

# ::node	0	contrast-01	0-1
# ::node	0.0	and	9-10
# ::node	0.0.0	have-03	18-19
# ::node	0.0.0.0	-	16-16
# ::node	0.0.0.1	i	2-3
# ::node	0.0.0.2	thing	8-9
# ::node	0.0.0.2.0	proper	7-8
# ::node	0.0.0.2.1	diagnose-01	8-9
# ::node	0.0.1	have-03	5-6
# ::node	0.0.1.0	symptom	13-14
# ::node	0.0.1.0.0	some	12-13
# ::node	0.0.1.1	even	10-11
# ::node	0.0.1.2	mean-01	16-17
# ::node	0.0.1.2.0	-	16-16
# ::node	0.0.1.2.1	have-03	11-12
# ::node	0.0.1.2.1.0	you	17-18
# ::node	0.0.1.2.1.1	condition	21-22
# ::node	0.0.1.2.1.1.0	certain	20-21
# ::node	0.0.1.2.2	possible-01	
# ::node	0.1	then	1-2
# ::root	0	contrast-01
# ::edge	and	op1	have-03	0.0	0.0.0	
# ::edge	and	op2	have-03	0.0	0.0.1	
# ::edge	condition	mod	certain	0.0.1.2.1.1	0.0.1.2.1.1.0	
# ::edge	contrast-01	ARG2	and	0	0.0	
# ::edge	contrast-01	mod	then	0	0.1	
# ::edge	have-03	ARG0	i	0.0.0	0.0.0.1	
# ::edge	have-03	ARG0	you	0.0.1	0.0.1.2.1.0	
# ::edge	have-03	ARG0	you	0.0.1.2.1	0.0.1.2.1.0	
# ::edge	have-03	ARG1	condition	0.0.1.2.1	0.0.1.2.1.1	
# ::edge	have-03	ARG1	symptom	0.0.1	0.0.1.0	
# ::edge	have-03	ARG1	thing	0.0.0	0.0.0.2	
# ::edge	have-03	ARG1-of	mean-01	0.0.1	0.0.1.2	
# ::edge	have-03	mod	even	0.0.1	0.0.1.1	
# ::edge	have-03	polarity	-	0.0.0	0.0.0.0	
# ::edge	mean-01	ARG1-of	possible-01	0.0.1.2	0.0.1.2.2	
# ::edge	mean-01	ARG2	have-03	0.0.1.2	0.0.1.2.1	
# ::edge	mean-01	polarity	-	0.0.1.2	0.0.1.2.0	
# ::edge	symptom	quant	some	0.0.1.0	0.0.1.0.0	
# ::edge	thing	ARG2-of	diagnose-01	0.0.0.2	0.0.0.2.1	
# ::edge	thing	mod	proper	0.0.0.2	0.0.0.2.0	
(c / contrast-01
      :ARG2 (a / and
            :op1 (h / have-03 :polarity -
                  :ARG0 (i / i)
                  :ARG1 (t2 / thing
                        :mod (p / proper)
                        :ARG2-of (d / diagnose-01)))
            :op2 (h2 / have-03
                  :ARG0 y
                  :ARG1 (s / symptom
                        :quant (s2 / some))
                  :mod (e / even)
                  :ARG1-of (m / mean-01 :polarity -
                        :ARG2 (h3 / have-03
                              :ARG0 (y / you)
                              :ARG1 (c2 / condition
                                    :mod (c3 / certain)))
                        :ARG1-of (p2 / possible-01))))
      :mod (t / then))

# ::node	0	cause-01	
# ::node	0.0	tell-01	12-13
# ::node	0.0.0	walk-01	1-2
# ::node	0.0.0.0	-	6-6
# ::node	0.0.0.1	toe	4-5
# ::node	0.0.1	i	0-1
# ::node	0.0.2	multiple	
# ::node	0.0.2.0	temporal-quantity	9-10
# ::node	0.0.2.0.0	1	
# ::node	0.0.2.0.1	year	9-10
# ::node	0.1	walk-01	
# ::node	0.1.0	toe	
# ::node	0.1.1	much	7-8
# ::node	0.1.1.0	-	6-6
# ::root	0	cause-01
# ::edge	cause-01	ARG0	tell-01	0	0.0	
# ::edge	cause-01	ARG1	walk-01	0	0.1	
# ::edge	much	polarity	-	0.1.1	0.1.1.0	
# ::edge	multiple	op1	temporal-quantity	0.0.2	0.0.2.0	
# ::edge	tell-01	ARG1	walk-01	0.0	0.0.0	
# ::edge	tell-01	ARG2	i	0.0	0.0.1	
# ::edge	tell-01	duration	multiple	0.0	0.0.2	
# ::edge	temporal-quantity	quant	1	0.0.2.0	0.0.2.0.0	
# ::edge	temporal-quantity	unit	year	0.0.2.0	0.0.2.0.1	
# ::edge	toe	part-of	i	0.0.0.1	0.0.1	
# ::edge	toe	part-of	i	0.1.0	0.0.1	
# ::edge	walk-01	ARG0	i	0.1	0.0.1	
# ::edge	walk-01	frequency	much	0.1	0.1.1	
# ::edge	walk-01	polarity	-	0.0.0	0.0.0.0	
# ::edge	walk-01	prep-on	toe	0.0.0	0.0.0.1	
# ::edge	walk-01	prep-on	toe	0.1	0.1.0	
(c / cause-01
      :ARG0 (t / tell-01
            :ARG1 (w2 / walk-01 :polarity -
                  :prep-on (t3 / toe
                        :part-of i))
            :ARG2 (i / i)
            :duration (m2 / multiple
                  :op1 (t4 / temporal-quantity :quant 1
                        :unit (y / year))))
      :ARG1 (w / walk-01
            :ARG0 i
            :prep-on (t2 / toe
                  :part-of i)
            :frequency (m / much :polarity -)))

# ::node	0	contrast-01	8-9
# ::node	0.0	walk-01	3-4
# ::node	0.0.0	i	0-1
# ::node	0.0.1	toe	17-18
# ::node	0.1	cause-01	11-12
# ::node	0.1.0	bear-02	14-15
# ::node	0.1.0.0	toe	6-7
# ::node	0.1.0.0.0	strange	16-17
# ::node	0.1.0.0.1	curl-01	19-20
# ::node	0.1.0.0.1.0	under	20-21
# ::node	0.1.0.0.2	straighten-01	25-26
# ::node	0.1.0.0.2.0	surgery-01	27-28
# ::node	0.1.0.0.2.1	obligate-01	
# ::node	0.1.0.0.2.2	before	
# ::node	0.1.0.0.2.2.0	now	
# ::node	0.1.0.0.2.2.1	temporal-quantity	29-30
# ::node	0.1.0.0.2.2.1.0	2	28-29
# ::node	0.1.0.0.2.2.1.1	year	29-30
# ::root	0	contrast-01
# ::edge	bear-02	ARG1	i	0.1.0	0.0.0	
# ::edge	bear-02	prep-with	toe	0.1.0	0.1.0.0	
# ::edge	before	op1	now	0.1.0.0.2.2	0.1.0.0.2.2.0	
# ::edge	before	quant	temporal-quantity	0.1.0.0.2.2	0.1.0.0.2.2.1	
# ::edge	cause-01	ARG0	bear-02	0.1	0.1.0	
# ::edge	cause-01	ARG1	walk-01	0.1	0.0	
# ::edge	contrast-01	ARG1	walk-01	0	0.0	
# ::edge	contrast-01	ARG2	cause-01	0	0.1	
# ::edge	curl-01	ARG2	under	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	straighten-01	ARG2	surgery-01	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	straighten-01	ARG2-of	obligate-01	0.1.0.0.2	0.1.0.0.2.1	
# ::edge	straighten-01	time	before	0.1.0.0.2	0.1.0.0.2.2	
# ::edge	temporal-quantity	quant	2	0.1.0.0.2.2.1	0.1.0.0.2.2.1.0	
# ::edge	temporal-quantity	unit	year	0.1.0.0.2.2.1	0.1.0.0.2.2.1.1	
# ::edge	toe	ARG1-of	curl-01	0.1.0.0	0.1.0.0.1	
# ::edge	toe	ARG1-of	straighten-01	0.1.0.0	0.1.0.0.2	
# ::edge	toe	mod	strange	0.1.0.0	0.1.0.0.0	
# ::edge	toe	part-of	i	0.0.1	0.0.0	
# ::edge	walk-01	ARG0	i	0.0	0.0.0	
# ::edge	walk-01	prep-on	toe	0.0	0.0.1	
(c3 / contrast-01
      :ARG1 (w / walk-01
            :ARG0 (i / i)
            :prep-on (t2 / toe
                  :part-of i))
      :ARG2 (c / cause-01
            :ARG0 (b / bear-02
                  :ARG1 i
                  :prep-with (t3 / toe
                        :mod (s / strange)
                        :ARG1-of (c2 / curl-01
                              :ARG2 (u / under))
                        :ARG1-of (s2 / straighten-01
                              :ARG2 (s3 / surgery-01)
                              :ARG2-of (o / obligate-01)
                              :time (b2 / before
                                    :op1 (n / now)
                                    :quant (t4 / temporal-quantity :quant 2
                                          :unit (y2 / year))))))
            :ARG1 w))

# ::node	0	spit-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	have-rel-role-91	1-2
# ::node	0.0.0.0	i	
# ::node	0.0.0.1	mum	1-2
# ::node	0.1	hell	6-7
# ::node	0.2	too	7-8
# ::root	0	spit-01
# ::edge	have-rel-role-91	ARG1	i	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	mum	0.0.0	0.0.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0	
# ::edge	spit-01	ARG1	person	0	0.0	
# ::edge	spit-01	mod	too	0	0.2	
# ::edge	spit-01	source	hell	0	0.1	
(s / spit-01
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (m / mum)))
      :source (h / hell)
      :mod (t / too))

# ::node	0	and	20-21
# ::node	0.0	obligate-01	
# ::node	0.0.0	deal-01	3-4
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	abuse-03	6-7
# ::node	0.0.0.1.0	person	1-2
# ::node	0.0.0.1.0.0	have-rel-role-91	1-2
# ::node	0.0.0.1.0.0.0	dad	9-10
# ::node	0.0.0.1.1	verbal	5-6
# ::node	0.0.0.2	before	15-16
# ::node	0.0.0.2.0	come-01	17-18
# ::node	0.0.0.2.0.0	university	
# ::node	0.0.0.3	long-03	12-13
# ::node	0.0.0.3.0	temporal-quantity	14-15
# ::node	0.0.0.3.0.0	8	13-14
# ::node	0.0.0.3.0.1	year	14-15
# ::node	0.1	cause-01	31-32
# ::node	0.1.0	reason	25-26
# ::node	0.1.0.0	only	35-36
# ::node	0.1.0.1	way	36-37
# ::node	0.1.0.1.0	only	24-25
# ::node	0.1.0.1.1	out	37-38
# ::node	0.1.0.1.2	it	32-33
# ::node	0.1.1	be-located-at-91	
# ::node	0.1.1.0	here	29-30
# ::node	0.1.2	honest	21-22
# ::root	0	and
# ::edge	abuse-03	ARG0	person	0.0.0.1	0.0.0.1.0	
# ::edge	abuse-03	ARG1	i	0.0.0.1	0.0.0.0	
# ::edge	abuse-03	mod	verbal	0.0.0.1	0.0.0.1.1	
# ::edge	and	op1	obligate-01	0	0.0	
# ::edge	and	op2	cause-01	0	0.1	
# ::edge	be-located-at-91	ARG1	i	0.1.1	0.0.0.0	
# ::edge	be-located-at-91	ARG2	here	0.1.1	0.1.1.0	
# ::edge	before	op1	come-01	0.0.0.2	0.0.0.2.0	
# ::edge	cause-01	ARG0	reason	0.1	0.1.0	
# ::edge	cause-01	ARG1	be-located-at-91	0.1	0.1.1	
# ::edge	cause-01	mod	honest	0.1	0.1.2	
# ::edge	come-01	ARG1	i	0.0.0.2.0	0.0.0.0	
# ::edge	come-01	ARG4	university	0.0.0.2.0	0.0.0.2.0.0	
# ::edge	deal-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	deal-01	ARG1-of	long-03	0.0.0	0.0.0.3	
# ::edge	deal-01	ARG2	abuse-03	0.0.0	0.0.0.1	
# ::edge	deal-01	time	before	0.0.0	0.0.0.2	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.1.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	dad	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	long-03	ARG2	temporal-quantity	0.0.0.3	0.0.0.3.0	
# ::edge	obligate-01	ARG2	deal-01	0.0	0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	reason	domain	way	0.1.0	0.1.0.1	
# ::edge	reason	mod	only	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	quant	8	0.0.0.3.0	0.0.0.3.0.0	
# ::edge	temporal-quantity	unit	year	0.0.0.3.0	0.0.0.3.0.1	
# ::edge	way	direction	out	0.1.0.1	0.1.0.1.1	
# ::edge	way	domain	it	0.1.0.1	0.1.0.1.2	
# ::edge	way	mod	only	0.1.0.1	0.1.0.1.0	
(a / and
      :op1 (o / obligate-01
            :ARG2 (d / deal-01
                  :ARG0 (i / i)
                  :ARG2 (a2 / abuse-03
                        :ARG0 (p / person
                              :ARG0-of (h3 / have-rel-role-91
                                    :ARG1 i
                                    :ARG2 (d2 / dad)))
                        :ARG1 i
                        :mod (v / verbal))
                  :time (b2 / before
                        :op1 (c / come-01
                              :ARG1 i
                              :ARG4 (u / university)))
                  :ARG1-of (l / long-03
                        :ARG2 (t2 / temporal-quantity :quant 8
                              :unit (y2 / year)))))
      :op2 (c2 / cause-01
            :ARG0 (r / reason
                  :mod (o4 / only)
                  :domain (w / way
                        :mod (o2 / only)
                        :direction (o3 / out)
                        :domain (i2 / it)))
            :ARG1 (b / be-located-at-91
                  :ARG1 i
                  :ARG2 (h / here))
            :mod (h2 / honest)))

# ::node	0	have-condition-91	
# ::node	0.0	outsider	12-13
# ::node	0.1	someone	4-5
# ::node	0.1.0	-	4-4
# ::node	0.1.1	family	7-8
# ::node	0.1.1.0	have-org-role-91	
# ::node	0.1.1.0.0	you	
# ::node	0.1.1.0.1	member	
# ::root	0	have-condition-91
# ::edge	family	ARG1-of	have-org-role-91	0.1.1	0.1.1.0	
# ::edge	have-condition-91	ARG1	outsider	0	0.0	
# ::edge	have-condition-91	ARG2	someone	0	0.1	
# ::edge	have-org-role-91	ARG0	you	0.1.1.0	0.1.1.0.0	
# ::edge	have-org-role-91	ARG2	member	0.1.1.0	0.1.1.0.1	
# ::edge	someone	part-of	family	0.1	0.1.1	
# ::edge	someone	polarity	-	0.1	0.1.0	
(h / have-condition-91
      :ARG1 (o / outsider)
      :ARG2 (s / someone :polarity -
            :part-of (f / family
                  :ARG1-of (h2 / have-org-role-91
                        :ARG0 (y / you)
                        :ARG2 (m / member)))))

# ::node	0	sound-01	1-2
# ::node	0.0	need-01	4-5
# ::node	0.0.0	you	3-4
# ::node	0.0.1	support-01	5-6
# ::node	0.0.2	somewhere	7-8
# ::node	0.0.2.0	else	8-9
# ::node	0.0.3	have-condition-91	
# ::node	0.0.3.0	possible-01	
# ::node	0.0.3.0.0	-	
# ::node	0.0.3.0.1	give-01	13-14
# ::node	0.0.3.0.1.0	she	10-11
# ::node	0.0.3.0.1.1	consistent	17-18
# ::node	0.1	really	0-1
# ::root	0	sound-01
# ::edge	give-01	ARG0	she	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	give-01	ARG1	support-01	0.0.3.0.1	0.0.1	
# ::edge	give-01	ARG2	you	0.0.3.0.1	0.0.0	
# ::edge	give-01	manner	consistent	0.0.3.0.1	0.0.3.0.1.1	
# ::edge	have-condition-91	ARG2	possible-01	0.0.3	0.0.3.0	
# ::edge	need-01	ARG0	you	0.0	0.0.0	
# ::edge	need-01	ARG1	support-01	0.0	0.0.1	
# ::edge	need-01	ARG1-of	have-condition-91	0.0	0.0.3	
# ::edge	need-01	source	somewhere	0.0	0.0.2	
# ::edge	possible-01	ARG1	give-01	0.0.3.0	0.0.3.0.1	
# ::edge	possible-01	polarity	-	0.0.3.0	0.0.3.0.0	
# ::edge	somewhere	mod	else	0.0.2	0.0.2.0	
# ::edge	sound-01	ARG2	need-01	0	0.0	
# ::edge	sound-01	mod	really	0	0.1	
# ::edge	support-01	ARG1	you	0.0.1	0.0.0	
(s / sound-01
      :ARG2 (n / need-01
            :ARG0 (y / you)
            :ARG1 (s2 / support-01
                  :ARG1 y)
            :source (s3 / somewhere
                  :mod (e / else))
            :ARG1-of (h / have-condition-91
                  :ARG2 (p / possible-01 :polarity -
                        :ARG1 (g / give-01
                              :ARG0 (s4 / she)
                              :ARG1 s2
                              :ARG2 y
                              :manner (c / consistent)))))
      :mod (r2 / really))

# ::node	0	have-condition-91	
# ::node	0.0	work-01	0-1
# ::node	0.0.0	you	3-4
# ::node	0.0.1	hard-02	1-2
# ::node	0.1	want-01	5-6
# ::node	0.1.0	out	6-7
# ::node	0.1.1	really	4-5
# ::root	0	have-condition-91
# ::edge	have-condition-91	ARG1	work-01	0	0.0	
# ::edge	have-condition-91	ARG2	want-01	0	0.1	
# ::edge	want-01	ARG0	you	0.1	0.0.0	
# ::edge	want-01	ARG2	out	0.1	0.1.0	
# ::edge	want-01	mod	really	0.1	0.1.1	
# ::edge	work-01	ARG0	you	0.0	0.0.0	
# ::edge	work-01	ARG1-of	hard-02	0.0	0.0.1	
(h / have-condition-91
      :ARG1 (w / work-01
            :ARG0 (y / you)
            :ARG1-of (h2 / hard-02))
      :ARG2 (w2 / want-01
            :ARG0 y
            :ARG2 (o / out)
            :mod (r / really)))

# ::node	0	have-03	3-4
# ::node	0.0	interrogative	
# ::node	0.1	she	1-2
# ::node	0.2	or	9-10
# ::node	0.2.0	history	5-6
# ::node	0.2.0.0	ill-01	
# ::node	0.2.0.0.0	mental	7-8
# ::node	0.2.1	diagnose-01	11-12
# ::node	0.3	even	2-3
# ::root	0	have-03
# ::edge	diagnose-01	ARG1	she	0.2.1	0.1	
# ::edge	have-03	ARG0	she	0	0.1	
# ::edge	have-03	ARG1	or	0	0.2	
# ::edge	have-03	mod	even	0	0.3	
# ::edge	have-03	mode	interrogative	0	0.0	
# ::edge	history	consist-of	ill-01	0.2.0	0.2.0.0	
# ::edge	ill-01	ARG1	she	0.2.0.0	0.1	
# ::edge	ill-01	ARG2	mental	0.2.0.0	0.2.0.0.0	
# ::edge	or	op1	history	0.2	0.2.0	
# ::edge	or	op2	diagnose-01	0.2	0.2.1	
(h / have-03 :mode interrogative
      :ARG0 (s / she)
      :ARG1 (o / or
            :op1 (h2 / history
                  :consist-of (i / ill-01
                        :ARG1 s
                        :ARG2 (m / mental)))
            :op2 (d / diagnose-01
                  :ARG1 s))
      :mod (e / even))

# ::node	0	possible-01	
# ::node	0.0	-	
# ::node	0.1	get-04	3-4
# ::node	0.1.0	you	0-1
# ::node	0.1.1	section-02	5-6
# ::node	0.1.1.0	she	
# ::node	0.1.1.1	cause-01	
# ::node	0.1.1.1.0	that	7-8
# ::root	0	possible-01
# ::edge	cause-01	ARG0	that	0.1.1.1	0.1.1.1.0	
# ::edge	get-04	ARG0	you	0.1	0.1.0	
# ::edge	get-04	ARG1	section-02	0.1	0.1.1	
# ::edge	possible-01	ARG1	get-04	0	0.1	
# ::edge	possible-01	polarity	-	0	0.0	
# ::edge	section-02	ARG1	she	0.1.1	0.1.1.0	
# ::edge	section-02	ARG1-of	cause-01	0.1.1	0.1.1.1	
(p / possible-01 :polarity -
      :ARG1 (g / get-04
            :ARG0 (y / you)
            :ARG1 (s / section-02
                  :ARG1 (s2 / she)
                  :ARG1-of (c / cause-01
                        :ARG0 (t / that)))))

# ::node	0	throw-01	1-2
# ::node	0.0	life	0-1
# ::node	0.1	thing	
# ::node	0.2	you	7-8
# ::node	0.3	time	10-11
# ::node	0.3.0	all	8-9
# ::root	0	throw-01
# ::edge	throw-01	ARG0	life	0	0.0	
# ::edge	throw-01	ARG1	thing	0	0.1	
# ::edge	throw-01	ARG2	you	0	0.2	
# ::edge	throw-01	time	time	0	0.3	
# ::edge	time	quant	all	0.3	0.3.0	
(t / throw-01
      :ARG0 (l / life)
      :ARG1 (t3 / thing)
      :ARG2 (y / you)
      :time (t2 / time
            :quant (a / all)))

# ::node	0	know-01	3-4
# ::node	0.0	-	
# ::node	0.1	you	0-1
# ::node	0.2	get-01	10-11
# ::node	0.2.0	-	
# ::node	0.2.1	grade	12-13
# ::node	0.2.1.0	good	11-12
# ::node	0.3	sure-02	5-6
# ::node	0.4	cause-01	16-17
# ::node	0.4.0	accept-01	14-15
# ::node	0.4.0.0	place	15-16
# ::node	0.4.0.1	possible-01	18-19
# ::root	0	know-01
# ::edge	accept-01	ARG0	you	0.4.0	0.1	
# ::edge	accept-01	ARG1	place	0.4.0	0.4.0.0	
# ::edge	accept-01	condition	possible-01	0.4.0	0.4.0.1	
# ::edge	cause-01	ARG1	accept-01	0.4	0.4.0	
# ::edge	get-01	ARG0	you	0.2	0.1	
# ::edge	get-01	ARG1	grade	0.2	0.2.1	
# ::edge	get-01	polarity	-	0.2	0.2.0	
# ::edge	grade	mod	good	0.2.1	0.2.1.0	
# ::edge	know-01	ARG0	you	0	0.1	
# ::edge	know-01	ARG0-of	cause-01	0	0.4	
# ::edge	know-01	ARG1	get-01	0	0.2	
# ::edge	know-01	ARG1-of	sure-02	0	0.3	
# ::edge	know-01	polarity	-	0	0.0	
# ::edge	possible-01	ARG1	accept-01	0.4.0.1	0.4.0	
(k / know-01 :polarity -
      :ARG0 (y / you)
      :ARG1 (g / get-01 :polarity -
            :ARG0 y
            :ARG1 (g2 / grade
                  :mod (g3 / good)))
      :ARG1-of (s / sure-02)
      :ARG0-of (c / cause-01
            :ARG1 (a / accept-01
                  :ARG0 y
                  :ARG1 (p / place)
                  :condition (p2 / possible-01
                        :ARG1 a))))

# ::node	0	make-02	1-2
# ::node	0.0	amr-unknown	
# ::node	0.1	decide-01	3-4
# ::node	0.1.0	they	
# ::node	0.1.1	signal-07	9-10
# ::node	0.1.1.0	walk-01	6-7
# ::node	0.1.1.0.0	toe	4-5
# ::node	0.1.1.1	autism	11-12
# ::node	0.2	cause-01	
# ::node	0.2.0	and	17-18
# ::node	0.2.0.0	seem-01	14-15
# ::node	0.2.0.0.0	random	16-17
# ::node	0.2.0.0.0.0	so	15-16
# ::node	0.2.0.1	indicate-01	21-22
# ::node	0.2.0.1.0	-	21-22
# ::node	0.2.0.1.1	always	20-21
# ::root	0	make-02
# ::edge	and	op1	seem-01	0.2.0	0.2.0.0	
# ::edge	and	op2	indicate-01	0.2.0	0.2.0.1	
# ::edge	cause-01	ARG0	and	0.2	0.2.0	
# ::edge	decide-01	ARG0	they	0.1	0.1.0	
# ::edge	decide-01	ARG1	signal-07	0.1	0.1.1	
# ::edge	indicate-01	ARG0	walk-01	0.2.0.1	0.1.1.0	
# ::edge	indicate-01	polarity	-	0.2.0.1	0.2.0.1.0	
# ::edge	indicate-01	time	always	0.2.0.1	0.2.0.1.1	
# ::edge	make-02	ARG0	amr-unknown	0	0.0	
# ::edge	make-02	ARG1	decide-01	0	0.1	
# ::edge	make-02	ARG1-of	cause-01	0	0.2	
# ::edge	random	degree	so	0.2.0.0.0	0.2.0.0.0.0	
# ::edge	random	domain	walk-01	0.2.0.0.0	0.1.1.0	
# ::edge	seem-01	ARG1	random	0.2.0.0	0.2.0.0.0	
# ::edge	signal-07	ARG0	walk-01	0.1.1	0.1.1.0	
# ::edge	signal-07	ARG1	autism	0.1.1	0.1.1.1	
# ::edge	walk-01	manner	toe	0.1.1.0	0.1.1.0.0	
(m / make-02
      :ARG0 (a / amr-unknown)
      :ARG1 (d / decide-01
            :ARG0 (t / they)
            :ARG1 (s / signal-07
                  :ARG0 (w / walk-01
                        :manner (t2 / toe))
                  :ARG1 (a2 / autism)))
      :ARG1-of (c / cause-01
            :ARG0 (a3 / and
                  :op1 (s2 / seem-01
                        :ARG1 (r / random
                              :degree (s3 / so)
                              :domain w))
                  :op2 (i / indicate-01 :polarity -
                        :ARG0 w
                        :time (a4 / always)))))

# ::node	0	and	8-9
# ::node	0.0	possible-01	1-2
# ::node	0.0.0	go-02	2-3
# ::node	0.0.0.0	you	0-1
# ::node	0.0.0.1	library	5-6
# ::node	0.0.0.2	date-entity	
# ::node	0.0.0.2.0	saturday	7-8
# ::node	0.1	study-01	15-16
# ::node	0.1.0	temporal-quantity	13-14
# ::node	0.1.0.0	8	12-13
# ::node	0.1.0.1	hour	13-14
# ::node	0.1.0.2	good	11-12
# ::root	0	and
# ::edge	and	op1	possible-01	0	0.0	
# ::edge	and	op2	study-01	0	0.1	
# ::edge	date-entity	weekday	saturday	0.0.0.2	0.0.0.2.0	
# ::edge	go-02	ARG0	you	0.0.0	0.0.0.0	
# ::edge	go-02	ARG4	library	0.0.0	0.0.0.1	
# ::edge	go-02	time	date-entity	0.0.0	0.0.0.2	
# ::edge	possible-01	ARG1	go-02	0.0	0.0.0	
# ::edge	study-01	ARG0	you	0.1	0.0.0.0	
# ::edge	study-01	duration	temporal-quantity	0.1	0.1.0	
# ::edge	study-01	location	library	0.1	0.0.0.1	
# ::edge	temporal-quantity	mod	good	0.1.0	0.1.0.2	
# ::edge	temporal-quantity	quant	8	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	unit	hour	0.1.0	0.1.0.1	
(a / and
      :op1 (p / possible-01
            :ARG1 (g / go-02
                  :ARG0 (y / you)
                  :ARG4 (l / library)
                  :time (d / date-entity
                        :weekday (s / saturday))))
      :op2 (s2 / study-01
            :ARG0 y
            :location l
            :duration (t / temporal-quantity :quant 8
                  :unit (h / hour)
                  :mod (g2 / good))))

# ::node	0	possible-01	1-2
# ::node	0.0	interrogative	
# ::node	0.1	call-02	2-3
# ::node	0.1.0	you	0-1
# ::node	0.1.1	or	4-5
# ::node	0.1.1.0	organization	3-4
# ::node	0.1.1.0.0	"ChildLine"	
# ::node	0.1.1.0.1	name	3-4
# ::node	0.1.1.0.1.0	"Childline"	3-4
# ::node	0.1.1.1	something	5-6
# ::node	0.1.1.1.0	resemble-01	
# ::root	0	possible-01
# ::edge	call-02	ARG0	you	0.1	0.1.0	
# ::edge	call-02	ARG1	or	0.1	0.1.1	
# ::edge	name	op1	"Childline"	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	or	op1	organization	0.1.1	0.1.1.0	
# ::edge	or	op2	something	0.1.1	0.1.1.1	
# ::edge	organization	name	name	0.1.1.0	0.1.1.0.1	
# ::edge	organization	wiki	"ChildLine"	0.1.1.0	0.1.1.0.0	
# ::edge	possible-01	ARG1	call-02	0	0.1	
# ::edge	possible-01	mode	interrogative	0	0.0	
# ::edge	resemble-01	ARG2	organization	0.1.1.1.0	0.1.1.0	
# ::edge	something	ARG1-of	resemble-01	0.1.1.1	0.1.1.1.0	
(p / possible-01 :mode interrogative
      :ARG1 (c / call-02
            :ARG0 (y / you)
            :ARG1 (o / or
                  :op1 (o2 / organization :wiki "ChildLine"
                        :name (n / name :op1 "Childline"))
                  :op2 (s / something
                        :ARG1-of (r / resemble-01
                              :ARG2 o2)))))

# ::node	0	and	9-10
# ::node	0.0	assign-01	3-4
# ::node	0.0.0	person	5-6
# ::node	0.0.0.0	counsel-01	5-6
# ::node	0.0.1	i	1-2
# ::node	0.0.2	university	8-9
# ::node	0.1	see-01	11-12
# ::node	0.1.0	about	14-15
# ::node	0.1.0.0	between	
# ::node	0.1.0.0.0	temporal-quantity	
# ::node	0.1.0.0.0.0	5	
# ::node	0.1.0.0.0.1	week	
# ::node	0.1.0.0.1	temporal-quantity	
# ::node	0.1.0.0.1.0	6	
# ::node	0.1.0.0.1.1	week	
# ::node	0.1.1	session	18-19
# ::node	0.1.1.0	block	17-18
# ::node	0.2	work-out-02	29-30
# ::node	0.2.0	-	
# ::node	0.2.1	real	28-29
# ::node	0.2.2	cause-01	21-22
# ::node	0.2.2.0	open-up-03	35-36
# ::node	0.2.2.0.0	-	
# ::node	0.2.2.0.1	ever	
# ::node	0.2.3	opine-01	
# ::node	0.2.3.0	honest	24-25
# ::root	0	and
# ::edge	about	op1	between	0.1.0	0.1.0.0	
# ::edge	and	op1	assign-01	0	0.0	
# ::edge	and	op2	see-01	0	0.1	
# ::edge	and	op3	work-out-02	0	0.2	
# ::edge	assign-01	ARG1	person	0.0	0.0.0	
# ::edge	assign-01	ARG2	i	0.0	0.0.1	
# ::edge	assign-01	manner	university	0.0	0.0.2	
# ::edge	between	op1	temporal-quantity	0.1.0.0	0.1.0.0.0	
# ::edge	between	op2	temporal-quantity	0.1.0.0	0.1.0.0.1	
# ::edge	cause-01	ARG0	open-up-03	0.2.2	0.2.2.0	
# ::edge	open-up-03	ARG0	i	0.2.2.0	0.0.1	
# ::edge	open-up-03	ARG3	person	0.2.2.0	0.0.0	
# ::edge	open-up-03	polarity	-	0.2.2.0	0.2.2.0.0	
# ::edge	open-up-03	time	ever	0.2.2.0	0.2.2.0.1	
# ::edge	opine-01	ARG0	i	0.2.3	0.0.1	
# ::edge	opine-01	manner	honest	0.2.3	0.2.3.0	
# ::edge	person	ARG0-of	counsel-01	0.0.0	0.0.0.0	
# ::edge	see-01	ARG0	i	0.1	0.0.1	
# ::edge	see-01	ARG1	person	0.1	0.0.0	
# ::edge	see-01	duration	about	0.1	0.1.0	
# ::edge	see-01	mod	session	0.1	0.1.1	
# ::edge	session	mod	block	0.1.1	0.1.1.0	
# ::edge	temporal-quantity	quant	5	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	temporal-quantity	quant	6	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	temporal-quantity	unit	week	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	temporal-quantity	unit	week	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	work-out-02	ARG1	see-01	0.2	0.1	
# ::edge	work-out-02	ARG1-of	cause-01	0.2	0.2.2	
# ::edge	work-out-02	condition	opine-01	0.2	0.2.3	
# ::edge	work-out-02	mod	real	0.2	0.2.1	
# ::edge	work-out-02	polarity	-	0.2	0.2.0	
(a / and
      :op1 (a2 / assign-01
            :ARG1 (p / person
                  :ARG0-of (c / counsel-01))
            :ARG2 (i / i)
            :manner (u / university))
      :op2 (s / see-01
            :ARG0 i
            :ARG1 p
            :duration (a3 / about
                  :op1 (b2 / between
                        :op1 (t / temporal-quantity :quant 5
                              :unit (w / week))
                        :op2 (t2 / temporal-quantity :quant 6
                              :unit (w2 / week))))
            :mod (s2 / session
                  :mod (b / block)))
      :op3 (w3 / work-out-02 :polarity -
            :ARG1 s
            :mod (r / real)
            :ARG1-of (c2 / cause-01
                  :ARG0 (o / open-up-03 :polarity -
                        :ARG0 i
                        :ARG3 p
                        :time (e / ever)))
            :condition (o2 / opine-01
                  :ARG0 i
                  :manner (h / honest))))

# ::node	0	possible-01	1-2
# ::node	0.0	start-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	contrast-01	8-9
# ::node	0.0.1.0	sorry-01	7-8
# ::node	0.0.1.0.0	i	9-10
# ::node	0.0.1.0.1	have-polarity-91	
# ::node	0.0.1.0.1.0	-	
# ::node	0.0.1.1	busy	11-12
# ::root	0	possible-01
# ::edge	busy	domain	i	0.0.1.1	0.0.1.0.0	
# ::edge	contrast-01	ARG1	sorry-01	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG2	busy	0.0.1	0.0.1.1	
# ::edge	have-polarity-91	ARG2	-	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	possible-01	ARG1	start-01	0	0.0	
# ::edge	sorry-01	ARG1	i	0.0.1.0	0.0.1.0.0	
# ::edge	sorry-01	ARG2	have-polarity-91	0.0.1.0	0.0.1.0.1	
# ::edge	start-01	ARG0	you	0.0	0.0.0	
# ::edge	start-01	ARG2	contrast-01	0.0	0.0.1	
(p / possible-01
      :ARG1 (s / start-01
            :ARG0 (y / you)
            :ARG2 (c / contrast-01
                  :ARG1 (s2 / sorry-01
                        :ARG1 (i / i)
                        :ARG2 (h / have-polarity-91
                              :ARG2 -))
                  :ARG2 (b / busy
                        :domain i))))

# ::node	0	have-condition-91	
# ::node	0.0	do-02	0-1
# ::node	0.0.0	you	8-9
# ::node	0.0.1	it	1-2
# ::node	0.0.2	gradual	2-3
# ::node	0.1	comfortable-02	11-12
# ::node	0.1.0	-	7-7
# ::node	0.1.1	particular	10-11
# ::root	0	have-condition-91
# ::edge	comfortable-02	ARG0	it	0.1	0.0.1	
# ::edge	comfortable-02	ARG1	you	0.1	0.0.0	
# ::edge	comfortable-02	mod	particular	0.1	0.1.1	
# ::edge	comfortable-02	polarity	-	0.1	0.1.0	
# ::edge	do-02	ARG0	you	0.0	0.0.0	
# ::edge	do-02	ARG1	it	0.0	0.0.1	
# ::edge	do-02	manner	gradual	0.0	0.0.2	
# ::edge	have-condition-91	ARG1	do-02	0	0.0	
# ::edge	have-condition-91	ARG2	comfortable-02	0	0.1	
(h / have-condition-91
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (i / it)
            :manner (g / gradual))
      :ARG2 (c / comfortable-02 :polarity -
            :ARG0 i
            :ARG1 y
            :mod (p / particular)))

# ::node	0	and	6-7
# ::node	0.0	cause-01	2-3
# ::node	0.0.0	it	0-1
# ::node	0.0.1	and	11-12
# ::node	0.0.1.0	anger	5-6
# ::node	0.0.1.0.0	life	10-11
# ::node	0.0.1.0.0.0	i	20-21
# ::node	0.0.1.0.1	lot	
# ::node	0.0.1.1	distress-01	7-8
# ::node	0.1	start-01	14-15
# ::node	0.1.0	affect-01	
# ::node	0.1.0.0	concentration	18-19
# ::node	0.1.0.0.0	university	
# ::node	0.1.1	really	13-14
# ::root	0	and
# ::edge	affect-01	ARG0	it	0.1.0	0.0.0	
# ::edge	affect-01	ARG1	concentration	0.1.0	0.1.0.0	
# ::edge	and	op1	anger	0.0.1	0.0.1.0	
# ::edge	and	op1	cause-01	0	0.0	
# ::edge	and	op2	distress-01	0.0.1	0.0.1.1	
# ::edge	and	op2	start-01	0	0.1	
# ::edge	anger	prep-in	life	0.0.1.0	0.0.1.0.0	
# ::edge	anger	quant	lot	0.0.1.0	0.0.1.0.1	
# ::edge	cause-01	ARG0	it	0.0	0.0.0	
# ::edge	cause-01	ARG1	and	0.0	0.0.1	
# ::edge	concentration	location	university	0.1.0.0	0.1.0.0.0	
# ::edge	concentration	poss	i	0.1.0.0	0.0.1.0.0.0	
# ::edge	distress-01	prep-in	life	0.0.1.1	0.0.1.0.0	
# ::edge	life	poss	i	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	start-01	ARG0	it	0.1	0.0.0	
# ::edge	start-01	ARG1	affect-01	0.1	0.1.0	
# ::edge	start-01	mod	really	0.1	0.1.1	
(a / and
      :op1 (c / cause-01
            :ARG0 (i / it)
            :ARG1 (a2 / and
                  :op1 (a3 / anger
                        :prep-in (l / life
                              :poss (i2 / i))
                        :quant (l2 / lot))
                  :op2 (d / distress-01
                        :prep-in l)))
      :op2 (s / start-01
            :ARG0 i
            :ARG1 (a4 / affect-01
                  :ARG0 i
                  :ARG1 (c2 / concentration
                        :poss i2
                        :location (u / university)))
            :mod (r / really)))

# ::node	0	exemplify-01	
# ::node	0.0	contrast-01	15-16
# ::node	0.0.0	and	30-31
# ::node	0.0.0.0	say-01	3-4
# ::node	0.0.0.0.0	i	1-2
# ::node	0.0.0.0.1	hello	4-5
# ::node	0.0.0.0.2	someone	6-7
# ::node	0.0.0.0.2.0	university	
# ::node	0.0.0.1	ignore-01	12-13
# ::node	0.0.1	and	9-10
# ::node	0.0.1.0	decide-01	21-22
# ::node	0.0.1.0.0	want-01	23-24
# ::node	0.0.1.0.0.0	help-01	25-26
# ::node	0.0.1.0.0.0.0	work-01	28-29
# ::node	0.0.1.0.0.0.0.0	some	27-28
# ::node	0.0.1.0.1	late	18-19
# ::node	0.0.1.0.1.0	temporal-quantity	17-18
# ::node	0.0.1.0.1.0.0	30	16-17
# ::node	0.0.1.0.1.0.1	minute	17-18
# ::node	0.0.1.0.1.1	more	
# ::node	0.0.1.1	give-01	33-34
# ::root	0	exemplify-01
# ::edge	and	op1	decide-01	0.0.1	0.0.1.0	
# ::edge	and	op1	say-01	0.0.0	0.0.0.0	
# ::edge	and	op2	give-01	0.0.1	0.0.1.1	
# ::edge	and	op2	ignore-01	0.0.0	0.0.0.1	
# ::edge	contrast-01	ARG1	and	0.0	0.0.0	
# ::edge	contrast-01	ARG2	and	0.0	0.0.1	
# ::edge	decide-01	ARG0	someone	0.0.1.0	0.0.0.0.2	
# ::edge	decide-01	ARG1	want-01	0.0.1.0	0.0.1.0.0	
# ::edge	decide-01	time	late	0.0.1.0	0.0.1.0.1	
# ::edge	exemplify-01	ARG0	contrast-01	0	0.0	
# ::edge	give-01	ARG0	i	0.0.1.1	0.0.0.0.0	
# ::edge	give-01	ARG1	help-01	0.0.1.1	0.0.1.0.0.0	
# ::edge	give-01	ARG2	someone	0.0.1.1	0.0.0.0.2	
# ::edge	help-01	ARG0	i	0.0.1.0.0.0	0.0.0.0.0	
# ::edge	help-01	ARG1	work-01	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	help-01	ARG2	someone	0.0.1.0.0.0	0.0.0.0.2	
# ::edge	ignore-01	ARG0	someone	0.0.0.1	0.0.0.0.2	
# ::edge	ignore-01	ARG1	i	0.0.0.1	0.0.0.0.0	
# ::edge	late	degree	more	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	late	op1	temporal-quantity	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	say-01	ARG0	i	0.0.0.0	0.0.0.0.0	
# ::edge	say-01	ARG1	hello	0.0.0.0	0.0.0.0.1	
# ::edge	say-01	ARG2	someone	0.0.0.0	0.0.0.0.2	
# ::edge	someone	source	university	0.0.0.0.2	0.0.0.0.2.0	
# ::edge	temporal-quantity	quant	30	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	temporal-quantity	unit	minute	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	want-01	ARG0	someone	0.0.1.0.0	0.0.0.0.2	
# ::edge	want-01	ARG1	help-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	work-01	mod	some	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
(e / exemplify-01
      :ARG0 (c / contrast-01
            :ARG1 (a / and
                  :op1 (s / say-01
                        :ARG0 (i / i)
                        :ARG1 (h / hello)
                        :ARG2 (s2 / someone
                              :source (u / university)))
                  :op2 (i2 / ignore-01
                        :ARG0 s2
                        :ARG1 i))
            :ARG2 (a2 / and
                  :op1 (d / decide-01
                        :ARG0 s2
                        :ARG1 (w / want-01
                              :ARG0 s2
                              :ARG1 (h2 / help-01
                                    :ARG0 i
                                    :ARG1 (w2 / work-01
                                          :mod (s3 / some))
                                    :ARG2 s2))
                        :time (l / late
                              :op1 (t / temporal-quantity :quant 30
                                    :unit (m2 / minute))
                              :degree (m / more)))
                  :op2 (g / give-01
                        :ARG0 i
                        :ARG1 h2
                        :ARG2 s2))))

# ::node	0	say-01	1-2
# ::node	0.0	you	
# ::node	0.1	no	
# ::node	0.2	just	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	no	0	0.1	
# ::edge	say-01	mod	just	0	0.2	
(s / say-01
      :ARG0 (y / you)
      :ARG1 (n / no)
      :mod (j / just))

# ::node	0	get-02	2-3
# ::node	0.0	interrogative	
# ::node	0.1	anyone	1-2
# ::node	0.2	experience-01	4-5
# ::node	0.2.0	or	11-12
# ::node	0.2.0.0	handle-01	6-7
# ::node	0.2.0.0.0	thing	
# ::node	0.2.0.0.0.0	sort	8-9
# ::node	0.2.0.0.0.0.0	this	7-8
# ::node	0.2.0.1	thing	10-11
# ::node	0.2.0.1.0	go-06	14-15
# ::node	0.2.0.1.0.0	gain-02	16-17
# ::node	0.2.0.1.0.0.0	respect-01	18-19
# ::node	0.2.0.1.0.0.0.0	some	17-18
# ::node	0.2.0.1.0.0.1	again	19-20
# ::node	0.2.1	any	3-4
# ::root	0	get-02
# ::edge	experience-01	ARG0	anyone	0.2	0.1	
# ::edge	experience-01	ARG1	or	0.2	0.2.0	
# ::edge	experience-01	mod	any	0.2	0.2.1	
# ::edge	gain-02	ARG1	respect-01	0.2.0.1.0.0	0.2.0.1.0.0.0	
# ::edge	gain-02	mod	again	0.2.0.1.0.0	0.2.0.1.0.0.1	
# ::edge	get-02	ARG0	anyone	0	0.1	
# ::edge	get-02	ARG1	experience-01	0	0.2	
# ::edge	get-02	mode	interrogative	0	0.0	
# ::edge	go-06	ARG1	gain-02	0.2.0.1.0	0.2.0.1.0.0	
# ::edge	handle-01	ARG0	anyone	0.2.0.0	0.1	
# ::edge	handle-01	ARG1	thing	0.2.0.0	0.2.0.0.0	
# ::edge	or	op1	handle-01	0.2.0	0.2.0.0	
# ::edge	or	op2	thing	0.2.0	0.2.0.1	
# ::edge	respect-01	mod	some	0.2.0.1.0.0.0	0.2.0.1.0.0.0.0	
# ::edge	sort	mod	this	0.2.0.0.0.0	0.2.0.0.0.0.0	
# ::edge	thing	manner-of	go-06	0.2.0.1	0.2.0.1.0	
# ::edge	thing	mod	sort	0.2.0.0.0	0.2.0.0.0.0	
(g2 / get-02 :mode interrogative
      :ARG0 (a2 / anyone)
      :ARG1 (e2 / experience-01
            :ARG0 a2
            :ARG1 (o / or
                  :op1 (h / handle-01
                        :ARG0 a2
                        :ARG1 (t / thing
                              :mod (s / sort
                                    :mod (t2 / this))))
                  :op2 (t3 / thing
                        :manner-of (g3 / go-06
                              :ARG1 (g4 / gain-02
                                    :ARG1 (r / respect-01
                                          :mod (s2 / some))
                                    :mod (a3 / again)))))
            :mod (a4 / any)))

# ::node	0	think-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	and	15-16
# ::node	0.1.0	become-01	10-11
# ::node	0.1.0.0	person	13-14
# ::node	0.1.0.0.0	weak	13-14
# ::node	0.1.0.0.0.0	more	
# ::node	0.1.0.0.0.0.0	much	12-13
# ::node	0.1.0.1	before	
# ::node	0.1.0.1.0	now	
# ::node	0.1.0.1.1	between	
# ::node	0.1.0.1.1.0	temporal-quantity	5-6
# ::node	0.1.0.1.1.0.0	1	
# ::node	0.1.0.1.1.0.1	year	5-6
# ::node	0.1.0.1.1.1	temporal-quantity	
# ::node	0.1.0.1.1.1.0	2	7-8
# ::node	0.1.0.1.1.1.1	year	
# ::node	0.1.1	dull-01	20-21
# ::node	0.1.1.0	personality	23-24
# ::node	0.1.1.1	down	21-22
# ::node	0.1.1.2	try-01	26-27
# ::node	0.1.1.2.0	befriend-01	
# ::node	0.1.1.2.0.0	person	14-15
# ::node	0.1.1.2.0.0.0	some	29-30
# ::node	0.1.1.2.0.1	university	
# ::node	0.1.1.3	way	18-19
# ::root	0	think-01
# ::edge	and	op1	become-01	0.1	0.1.0	
# ::edge	and	op2	dull-01	0.1	0.1.1	
# ::edge	become-01	ARG1	i	0.1.0	0.0	
# ::edge	become-01	ARG2	person	0.1.0	0.1.0.0	
# ::edge	become-01	time	before	0.1.0	0.1.0.1	
# ::edge	before	duration	between	0.1.0.1	0.1.0.1.1	
# ::edge	before	op1	now	0.1.0.1	0.1.0.1.0	
# ::edge	befriend-01	ARG0	i	0.1.1.2.0	0.0	
# ::edge	befriend-01	ARG1	person	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	befriend-01	location	university	0.1.1.2.0	0.1.1.2.0.1	
# ::edge	between	op1	temporal-quantity	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	between	op2	temporal-quantity	0.1.0.1.1	0.1.0.1.1.1	
# ::edge	dull-01	ARG0	i	0.1.1	0.0	
# ::edge	dull-01	ARG1	personality	0.1.1	0.1.1.0	
# ::edge	dull-01	manner	way	0.1.1	0.1.1.3	
# ::edge	dull-01	mod	down	0.1.1	0.1.1.1	
# ::edge	dull-01	purpose	try-01	0.1.1	0.1.1.2	
# ::edge	dull-01	time	between	0.1.1	0.1.0.1.1	
# ::edge	more	degree	much	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	person	mod	weak	0.1.0.0	0.1.0.0.0	
# ::edge	person	quant	some	0.1.1.2.0.0	0.1.1.2.0.0.0	
# ::edge	personality	poss	i	0.1.1.0	0.0	
# ::edge	temporal-quantity	quant	1	0.1.0.1.1.0	0.1.0.1.1.0.0	
# ::edge	temporal-quantity	quant	2	0.1.0.1.1.1	0.1.0.1.1.1.0	
# ::edge	temporal-quantity	unit	year	0.1.0.1.1.0	0.1.0.1.1.0.1	
# ::edge	temporal-quantity	unit	year	0.1.0.1.1.1	0.1.0.1.1.1.1	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	and	0	0.1	
# ::edge	try-01	ARG0	i	0.1.1.2	0.0	
# ::edge	try-01	ARG1	befriend-01	0.1.1.2	0.1.1.2.0	
# ::edge	weak	degree	more	0.1.0.0.0	0.1.0.0.0.0	
(t4 / think-01
      :ARG0 (i / i)
      :ARG1 (a2 / and
            :op1 (b / become-01
                  :ARG1 i
                  :ARG2 (p / person
                        :mod (w / weak
                              :degree (m / more
                                    :degree (m2 / much))))
                  :time (b4 / before
                        :op1 (n / now)
                        :duration (b2 / between
                              :op1 (t / temporal-quantity :quant 1
                                    :unit (y / year))
                              :op2 (t2 / temporal-quantity :quant 2
                                    :unit (y2 / year)))))
            :op2 (d / dull-01
                  :ARG0 i
                  :ARG1 (p2 / personality
                        :poss i)
                  :mod (d2 / down)
                  :purpose (t3 / try-01
                        :ARG0 i
                        :ARG1 (b3 / befriend-01
                              :ARG0 i
                              :ARG1 (p3 / person
                                    :quant (s / some))
                              :location (u / university)))
                  :manner (w2 / way)
                  :time b2)))

# ::node	0	show-01	1-2
# ::node	0.0	they	0-1
# ::node	0.1	respect-01	4-5
# ::node	0.1.0	-	3-4
# ::node	0.1.1	absolute	2-3
# ::root	0	show-01
# ::edge	respect-01	ARG0	they	0.1	0.0	
# ::edge	respect-01	mod	absolute	0.1	0.1.1	
# ::edge	respect-01	polarity	-	0.1	0.1.0	
# ::edge	show-01	ARG0	they	0	0.0	
# ::edge	show-01	ARG1	respect-01	0	0.1	
(s / show-01
      :ARG0 (t / they)
      :ARG1 (r / respect-01 :polarity -
            :ARG0 t
            :mod (a / absolute)))

# ::node	0	contrast-01	0-1
# ::node	0.0	lead-03	8-9
# ::node	0.0.0	nice-01	4-5
# ::node	0.0.0.0	person	
# ::node	0.0.0.1	over	2-3
# ::node	0.0.1	believe-01	11-12
# ::node	0.0.1.0	possible-01	14-15
# ::node	0.0.1.0.0	or	16-17
# ::node	0.0.1.0.0.0	say-01	15-16
# ::node	0.0.1.0.0.0.0	whatever	18-19
# ::node	0.0.1.0.0.0.0.0	want-01	22-23
# ::node	0.0.1.0.0.0.0.1	hell	20-21
# ::node	0.0.1.0.0.0.1	i	
# ::node	0.0.1.0.0.1	do-02	17-18
# ::root	0	contrast-01
# ::edge	believe-01	ARG0	person	0.0.1	0.0.0.0	
# ::edge	believe-01	ARG1	possible-01	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG2	lead-03	0	0.0	
# ::edge	do-02	ARG0	person	0.0.1.0.0.1	0.0.0.0	
# ::edge	do-02	ARG1	whatever	0.0.1.0.0.1	0.0.1.0.0.0.0	
# ::edge	do-02	ARG2	i	0.0.1.0.0.1	0.0.1.0.0.0.1	
# ::edge	lead-03	ARG0	nice-01	0.0	0.0.0	
# ::edge	lead-03	ARG1	person	0.0	0.0.0.0	
# ::edge	lead-03	ARG2	believe-01	0.0	0.0.1	
# ::edge	nice-01	ARG2	person	0.0.0	0.0.0.0	
# ::edge	nice-01	degree	over	0.0.0	0.0.0.1	
# ::edge	or	op1	say-01	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	or	op2	do-02	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	possible-01	ARG1	or	0.0.1.0	0.0.1.0.0	
# ::edge	say-01	ARG0	person	0.0.1.0.0.0	0.0.0.0	
# ::edge	say-01	ARG1	whatever	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	say-01	ARG2	i	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	want-01	ARG0	person	0.0.1.0.0.0.0.0	0.0.0.0	
# ::edge	whatever	ARG1-of	want-01	0.0.1.0.0.0.0	0.0.1.0.0.0.0.0	
# ::edge	whatever	mod	hell	0.0.1.0.0.0.0	0.0.1.0.0.0.0.1	
(c / contrast-01
      :ARG2 (l / lead-03
            :ARG0 (n / nice-01
                  :ARG2 (p / person)
                  :degree (o / over))
            :ARG1 p
            :ARG2 (b / believe-01
                  :ARG0 p
                  :ARG1 (p2 / possible-01
                        :ARG1 (o2 / or
                              :op1 (s / say-01
                                    :ARG0 p
                                    :ARG1 (w / whatever
                                          :ARG1-of (w2 / want-01
                                                :ARG0 p)
                                          :mod (h / hell))
                                    :ARG2 (i / i))
                              :op2 (d / do-02
                                    :ARG0 p
                                    :ARG1 w
                                    :ARG2 i))))))

# ::node	0	contrast-01	11-12
# ::node	0.0	possible-01	
# ::node	0.0.0	have-03	15-16
# ::node	0.0.0.0	i	1-2
# ::node	0.0.0.1	thing	4-5
# ::node	0.0.0.1.0	signal-07	4-5
# ::node	0.0.0.1.0.0	something	6-7
# ::node	0.0.0.1.0.0.0	spectrum	10-11
# ::node	0.0.0.1.0.0.0.0	autism	9-10
# ::node	0.1	have-03	3-4
# ::node	0.1.0	-	
# ::node	0.1.1	amr-unknown	
# ::node	0.1.2	or	17-18
# ::node	0.1.2.0	thing	
# ::node	0.1.2.0.0	1	16-17
# ::node	0.1.2.1	thing	
# ::node	0.1.2.1.0	2	18-19
# ::node	0.2	well	0-1
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	possible-01	0	0.0	
# ::edge	contrast-01	ARG2	have-03	0	0.1	
# ::edge	contrast-01	mod	well	0	0.2	
# ::edge	have-03	ARG0	amr-unknown	0.1	0.1.1	
# ::edge	have-03	ARG0	i	0.0.0	0.0.0.0	
# ::edge	have-03	ARG1	or	0.1	0.1.2	
# ::edge	have-03	ARG1	thing	0.0.0	0.0.0.1	
# ::edge	have-03	polarity	-	0.1	0.1.0	
# ::edge	or	op1	thing	0.1.2	0.1.2.0	
# ::edge	or	op2	thing	0.1.2	0.1.2.1	
# ::edge	possible-01	ARG1	have-03	0.0	0.0.0	
# ::edge	signal-07	ARG1	something	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	something	location	spectrum	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	spectrum	mod	autism	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	thing	ARG0-of	signal-07	0.0.0.1	0.0.0.1.0	
# ::edge	thing	ARG0-of	signal-07	0.1.2.0	0.0.0.1.0	
# ::edge	thing	ARG0-of	signal-07	0.1.2.1	0.0.0.1.0	
# ::edge	thing	quant	1	0.1.2.0	0.1.2.0.0	
# ::edge	thing	quant	2	0.1.2.1	0.1.2.1.0	
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (i / i)
                  :ARG1 (t / thing
                        :ARG0-of (s / signal-07
                              :ARG1 (s2 / something
                                    :location (s3 / spectrum
                                          :mod (a / autism)))))))
      :ARG2 (h2 / have-03 :polarity -
            :ARG0 (a2 / amr-unknown)
            :ARG1 (o2 / or
                  :op1 (t2 / thing :quant 1
                        :ARG0-of s)
                  :op2 (t3 / thing :quant 2
                        :ARG0-of s)))
      :mod (w / well))

# ::node	0	know-01	2-3
# ::node	0.0	you	0-1
# ::node	0.0.0	guy	1-2
# ::node	0.1	thing	5-6
# ::node	0.1.0	mean-01	5-6
# ::node	0.1.0.0	i	4-5
# ::root	0	know-01
# ::edge	know-01	ARG0	you	0	0.0	
# ::edge	know-01	ARG1	thing	0	0.1	
# ::edge	mean-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	thing	ARG2-of	mean-01	0.1	0.1.0	
# ::edge	you	mod	guy	0.0	0.0.0	
(k / know-01
      :ARG0 (y / you
            :mod (g / guy))
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG0 (i / i))))

# ::node	0	possible-01	3-4
# ::node	0.0	symptom	6-7
# ::node	0.0.0	autism	8-9
# ::node	0.0.1	walk-01	0-1
# ::node	0.0.1.0	toe	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	symptom	0	0.0	
# ::edge	symptom	domain	walk-01	0.0	0.0.1	
# ::edge	symptom	mod	autism	0.0	0.0.0	
# ::edge	walk-01	prep-on	toe	0.0.1	0.0.1.0	
(p / possible-01
      :ARG1 (s / symptom
            :mod (a / autism)
            :domain (w / walk-01
                  :prep-on (t / toe))))

# ::node	0	possible-01	3-4
# ::node	0.0	symptom	6-7
# ::node	0.0.0	tumour	9-10
# ::node	0.0.0.0	brain	8-9
# ::node	0.0.1	headache	2-3
# ::root	0	possible-01
# ::edge	possible-01	ARG1	symptom	0	0.0	
# ::edge	symptom	domain	headache	0.0	0.0.1	
# ::edge	symptom	mod	tumour	0.0	0.0.0	
# ::edge	tumour	mod	brain	0.0.0	0.0.0.0	
(p / possible-01
      :ARG1 (s / symptom
            :mod (t / tumour
                  :mod (b / brain))
            :domain (h / headache)))

# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	thing	5-6
# ::node	0.1.0	feel-01	5-6
# ::node	0.1.0.0	you	3-4
# ::root	0	know-01
# ::edge	feel-01	ARG0	you	0.1.0	0.1.0.0	
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	thing	0	0.1	
# ::edge	thing	ARG1-of	feel-01	0.1	0.1.0	
(k / know-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG1-of (f / feel-01
                  :ARG0 (y / you))))

# ::node	0	contrast-01	12-13
# ::node	0.0	autistic	6-7
# ::node	0.0.0	-	5-5
# ::node	0.0.1	mean-01	
# ::node	0.0.1.0	diagnose-01	9-10
# ::node	0.0.1.0.0	-	5-5
# ::node	0.0.1.0.1	dyspraxia	11-12
# ::node	0.0.1.0.2	contrast-01	20-21
# ::node	0.0.1.0.2.0	think-01	14-15
# ::node	0.0.1.0.2.0.0	misdiagnose-01	17-18
# ::node	0.0.1.0.2.0.0.0	doctor	16-17
# ::node	0.0.2	pretty-much	2-3
# ::node	0.0.3	i	0-1
# ::node	0.1	walk-01	22-23
# ::node	0.1.0	toe	25-26
# ::node	0.1.1	time	30-31
# ::node	0.1.1.0	nearly	26-27
# ::node	0.1.1.0.0	all	27-28
# ::root	0	contrast-01
# ::edge	autistic	ARG1-of	mean-01	0.0	0.0.1	
# ::edge	autistic	degree	pretty-much	0.0	0.0.2	
# ::edge	autistic	domain	i	0.0	0.0.3	
# ::edge	autistic	polarity	-	0.0	0.0.0	
# ::edge	contrast-01	ARG1	autistic	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0.0.1.0.2	0.0.1.0.2.0	
# ::edge	contrast-01	ARG2	walk-01	0	0.1	
# ::edge	diagnose-01	ARG1	i	0.0.1.0	0.0.3	
# ::edge	diagnose-01	ARG1-of	contrast-01	0.0.1.0	0.0.1.0.2	
# ::edge	diagnose-01	ARG2	dyspraxia	0.0.1.0	0.0.1.0.1	
# ::edge	diagnose-01	polarity	-	0.0.1.0	0.0.1.0.0	
# ::edge	mean-01	ARG2	diagnose-01	0.0.1	0.0.1.0	
# ::edge	misdiagnose-01	ARG0	doctor	0.0.1.0.2.0.0	0.0.1.0.2.0.0.0	
# ::edge	nearly	op1	all	0.1.1.0	0.1.1.0.0	
# ::edge	think-01	ARG0	i	0.0.1.0.2.0	0.0.3	
# ::edge	think-01	ARG1	misdiagnose-01	0.0.1.0.2.0	0.0.1.0.2.0.0	
# ::edge	time	quant	nearly	0.1.1	0.1.1.0	
# ::edge	toe	part-of	i	0.1.0	0.0.3	
# ::edge	walk-01	ARG0	i	0.1	0.0.3	
# ::edge	walk-01	frequency	time	0.1	0.1.1	
# ::edge	walk-01	prep-on	toe	0.1	0.1.0	
(c / contrast-01
      :ARG1 (a / autistic :polarity -
            :ARG1-of (m / mean-01
                  :ARG2 (d4 / diagnose-01 :polarity -
                        :ARG1 i
                        :ARG2 (d2 / dyspraxia)
                        :ARG1-of (c2 / contrast-01
                              :ARG2 (t / think-01
                                    :ARG0 i
                                    :ARG1 (m2 / misdiagnose-01
                                          :ARG0 (d3 / doctor))))))
            :degree (p / pretty-much)
            :domain (i / i))
      :ARG2 (w / walk-01
            :ARG0 i
            :prep-on (t2 / toe
                  :part-of i)
            :frequency (t3 / time
                  :quant (n / nearly
                        :op1 (a2 / all)))))

# ::node	0	comfortable-02	3-4
# ::node	0.0	it	0-1
# ::node	0.1	i	
# ::node	0.2	more	2-3
# ::root	0	comfortable-02
# ::edge	comfortable-02	ARG0	it	0	0.0	
# ::edge	comfortable-02	ARG1	i	0	0.1	
# ::edge	comfortable-02	degree	more	0	0.2	
(c / comfortable-02
      :ARG0 (i2 / it)
      :ARG1 (i / i)
      :degree (m / more))

# ::node	0	cause-01	
# ::node	0.0	and	16-17
# ::node	0.0.0	pain	12-13
# ::node	0.0.0.0	arse	15-16
# ::node	0.0.0.1	bit	9-10
# ::node	0.0.1	blame-01	19-20
# ::node	0.0.1.0	problem	22-23
# ::node	0.0.1.0.0	all	20-21
# ::node	0.1	want-01	2-3
# ::node	0.1.0	interrogative	
# ::node	0.1.1	you	1-2
# ::node	0.1.2	section-02	4-5
# ::node	0.1.2.0	she	6-7
# ::root	0	cause-01
# ::edge	and	op1	pain	0.0	0.0.0	
# ::edge	and	op2	blame-01	0.0	0.0.1	
# ::edge	blame-01	ARG0	you	0.0.1	0.1.1	
# ::edge	blame-01	ARG1	section-02	0.0.1	0.1.2	
# ::edge	blame-01	ARG2	problem	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG0	and	0	0.0	
# ::edge	cause-01	ARG1	want-01	0	0.1	
# ::edge	pain	degree	bit	0.0.0	0.0.0.1	
# ::edge	pain	domain	section-02	0.0.0	0.1.2	
# ::edge	pain	location	arse	0.0.0	0.0.0.0	
# ::edge	problem	poss	you	0.0.1.0	0.1.1	
# ::edge	problem	quant	all	0.0.1.0	0.0.1.0.0	
# ::edge	section-02	ARG1	she	0.1.2	0.1.2.0	
# ::edge	want-01	ARG0	you	0.1	0.1.1	
# ::edge	want-01	ARG1	section-02	0.1	0.1.2	
# ::edge	want-01	mode	interrogative	0.1	0.1.0	
(c / cause-01
      :ARG0 (a2 / and
            :op1 (p / pain
                  :location (a / arse)
                  :degree (b / bit)
                  :domain s)
            :op2 (b2 / blame-01
                  :ARG0 y
                  :ARG1 s
                  :ARG2 (p2 / problem
                        :quant (a3 / all)
                        :poss y)))
      :ARG1 (w / want-01 :mode interrogative
            :ARG0 (y / you)
            :ARG1 (s / section-02
                  :ARG1 (s2 / she))))

# ::node	0	possible-01	4-5
# ::node	0.0	symptom	7-8
# ::node	0.0.0	leukaemia	9-10
# ::node	0.0.1	feel-01	0-1
# ::node	0.0.1.0	tire-01	1-2
# ::node	0.0.1.0.0	lot	3-4
# ::root	0	possible-01
# ::edge	feel-01	ARG1	tire-01	0.0.1	0.0.1.0	
# ::edge	possible-01	ARG1	symptom	0	0.0	
# ::edge	symptom	domain	feel-01	0.0	0.0.1	
# ::edge	symptom	mod	leukaemia	0.0	0.0.0	
# ::edge	tire-01	frequency	lot	0.0.1.0	0.0.1.0.0	
(p / possible-01
      :ARG1 (s / symptom
            :mod (l / leukaemia)
            :domain (f / feel-01
                  :ARG1 (t / tire-01
                        :frequency (l2 / lot)))))

# ::node	0	contrast-01	5-6
# ::node	0.0	apply-02	4-5
# ::node	0.0.0	-	
# ::node	0.0.1	symptom	
# ::node	0.0.2	always	3-4
# ::node	0.1	recommend-01	
# ::node	0.1.0	note-01	27-28
# ::node	0.1.1	symptom	0-1
# ::node	0.1.1.0	case	13-14
# ::node	0.1.1.0.0	lot	11-12
# ::node	0.1.1.1	infer-01	
# ::node	0.1.1.1.0	instance	22-23
# ::node	0.1.1.1.0.0	this	21-22
# ::node	0.1.1.1.1	clear-06	17-18
# ::node	0.1.2	cause-01	6-7
# ::node	0.1.2.0	diagnose-01	35-36
# ::node	0.1.2.0.0	nothing	31-32
# ::node	0.1.2.0.1	ever	33-34
# ::node	0.1.2.0.2	note-01	
# ::node	0.1.2.0.2.0	-	
# ::root	0	contrast-01
# ::edge	apply-02	ARG0	symptom	0.0	0.0.1	
# ::edge	apply-02	polarity	-	0.0	0.0.0	
# ::edge	apply-02	time	always	0.0	0.0.2	
# ::edge	case	quant	lot	0.1.1.0	0.1.1.0.0	
# ::edge	cause-01	ARG1	diagnose-01	0.1.2	0.1.2.0	
# ::edge	contrast-01	ARG1	apply-02	0	0.0	
# ::edge	contrast-01	ARG2	recommend-01	0	0.1	
# ::edge	diagnose-01	ARG2	nothing	0.1.2.0	0.1.2.0.0	
# ::edge	diagnose-01	condition	note-01	0.1.2.0	0.1.2.0.2	
# ::edge	diagnose-01	time	ever	0.1.2.0	0.1.2.0.1	
# ::edge	infer-01	ARG1-of	clear-06	0.1.1.1	0.1.1.1.1	
# ::edge	infer-01	topic	instance	0.1.1.1	0.1.1.1.0	
# ::edge	instance	mod	this	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	note-01	polarity	-	0.1.2.0.2	0.1.2.0.2.0	
# ::edge	recommend-01	ARG0-of	cause-01	0.1	0.1.2	
# ::edge	recommend-01	ARG1	note-01	0.1	0.1.0	
# ::edge	recommend-01	condition	symptom	0.1	0.1.1	
# ::edge	symptom	ARG1-of	infer-01	0.1.1	0.1.1.1	
# ::edge	symptom	frequency	case	0.1.1	0.1.1.0	
(c / contrast-01
      :ARG1 (a / apply-02 :polarity -
            :ARG0 (s / symptom)
            :time (a2 / always))
      :ARG2 (r / recommend-01
            :ARG1 (n / note-01)
            :condition (s2 / symptom
                  :frequency (c2 / case
                        :quant (l / lot))
                  :ARG1-of (i / infer-01
                        :topic (i2 / instance
                              :mod (t / this))
                        :ARG1-of (c3 / clear-06)))
            :ARG0-of (c4 / cause-01
                  :ARG1 (d2 / diagnose-01
                        :ARG2 (n2 / nothing)
                        :time (e / ever)
                        :condition (n3 / note-01 :polarity -)))))

# ::node	0	worsen-01	3-4
# ::node	0.0	it	0-1
# ::node	0.1	cause-01	
# ::node	0.1.0	have-03	1-2
# ::node	0.1.0.0	i	5-6
# ::node	0.1.0.1	scar-01	8-9
# ::node	0.1.0.1.0	leg	11-12
# ::node	0.1.0.1.1	cause-01	
# ::node	0.1.0.1.1.0	slit-01	14-15
# ::node	0.1.0.1.1.0.0	staple	
# ::node	0.1.0.1.1.0.1	name	19-20
# ::node	0.1.0.1.1.0.1.0	person	6-7
# ::node	0.1.0.1.1.0.1.0.0	have-rel-role-91	6-7
# ::node	0.1.0.1.1.0.1.0.0.0	boyfriend	18-19
# ::node	0.1.0.1.1.0.1.0.0.1	ex	17-18
# ::node	0.1.0.1.1.0.2	cause-01	
# ::node	0.1.0.1.1.0.2.0	stop-01	26-27
# ::node	0.1.0.1.1.0.2.0.0	-	
# ::node	0.1.0.1.1.0.2.0.1	cut-01	27-28
# ::node	0.1.0.1.1.0.2.0.2	bleed-01	30-31
# ::root	0	worsen-01
# ::edge	bleed-01	ARG0	i	0.1.0.1.1.0.2.0.2	0.1.0.0	
# ::edge	cause-01	ARG0	have-03	0.1	0.1.0	
# ::edge	cause-01	ARG0	slit-01	0.1.0.1.1	0.1.0.1.1.0	
# ::edge	cause-01	ARG0	stop-01	0.1.0.1.1.0.2	0.1.0.1.1.0.2.0	
# ::edge	have-03	ARG0	i	0.1.0	0.1.0.0	
# ::edge	have-03	ARG1	scar-01	0.1.0	0.1.0.1	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.1.1.0.1.0.0	0.1.0.0	
# ::edge	have-rel-role-91	ARG2	boyfriend	0.1.0.1.1.0.1.0.0	0.1.0.1.1.0.1.0.0.0	
# ::edge	have-rel-role-91	time	ex	0.1.0.1.1.0.1.0.0	0.1.0.1.1.0.1.0.0.1	
# ::edge	leg	part-of	i	0.1.0.1.0	0.1.0.0	
# ::edge	name	poss	person	0.1.0.1.1.0.1	0.1.0.1.1.0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0.1.1.0.1.0	0.1.0.1.1.0.1.0.0	
# ::edge	scar-01	ARG1	leg	0.1.0.1	0.1.0.1.0	
# ::edge	scar-01	ARG1-of	cause-01	0.1.0.1	0.1.0.1.1	
# ::edge	slit-01	ARG0	i	0.1.0.1.1.0	0.1.0.0	
# ::edge	slit-01	ARG1	leg	0.1.0.1.1.0	0.1.0.1.0	
# ::edge	slit-01	ARG1-of	cause-01	0.1.0.1.1.0	0.1.0.1.1.0.2	
# ::edge	slit-01	ARG3	staple	0.1.0.1.1.0	0.1.0.1.1.0.0	
# ::edge	slit-01	topic	name	0.1.0.1.1.0	0.1.0.1.1.0.1	
# ::edge	stop-01	ARG0	i	0.1.0.1.1.0.2.0	0.1.0.0	
# ::edge	stop-01	ARG1	cut-01	0.1.0.1.1.0.2.0	0.1.0.1.1.0.2.0.1	
# ::edge	stop-01	condition	bleed-01	0.1.0.1.1.0.2.0	0.1.0.1.1.0.2.0.2	
# ::edge	stop-01	polarity	-	0.1.0.1.1.0.2.0	0.1.0.1.1.0.2.0.0	
# ::edge	worsen-01	ARG1	it	0	0.0	
# ::edge	worsen-01	ARG1-of	cause-01	0	0.1	
(w / worsen-01
      :ARG1 (i / it)
      :ARG1-of (c / cause-01
            :ARG0 (h / have-03
                  :ARG0 (i2 / i)
                  :ARG1 (s / scar-01
                        :ARG1 (l / leg
                              :part-of i2)
                        :ARG1-of (c2 / cause-01
                              :ARG0 (s2 / slit-01
                                    :ARG0 i2
                                    :ARG1 l
                                    :ARG3 (s3 / staple)
                                    :topic (n / name
                                          :poss (p / person
                                                :ARG0-of (h2 / have-rel-role-91
                                                      :ARG1 i2
                                                      :ARG2 (b / boyfriend)
                                                      :time (e / ex))))
                                    :ARG1-of (c3 / cause-01
                                          :ARG0 (s4 / stop-01 :polarity -
                                                :ARG0 i2
                                                :ARG1 (c4 / cut-01)
                                                :condition (b2 / bleed-01
                                                      :ARG0 i2)))))))))

# ::node	0	and	15-16
# ::node	0.0	start-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	slit-01	8-9
# ::node	0.0.1.0	finger	
# ::node	0.0.1.0.0	each	9-10
# ::node	0.0.1.0.1	individual	
# ::node	0.0.1.1	scissors	
# ::node	0.0.2	age-01	
# ::node	0.0.2.0	temporal-quantity	
# ::node	0.0.2.0.0	7	5-6
# ::node	0.0.2.0.1	year	
# ::node	0.1	stop-01	21-22
# ::node	0.1.0	-	
# ::node	0.1.1	ever	
# ::node	0.1.2	from	16-17
# ::node	0.1.2.0	day	18-19
# ::node	0.1.2.0.0	that	17-18
# ::root	0	and
# ::edge	age-01	ARG1	i	0.0.2	0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0.2	0.0.2.0	
# ::edge	and	op1	start-01	0	0.0	
# ::edge	and	op2	stop-01	0	0.1	
# ::edge	day	mod	that	0.1.2.0	0.1.2.0.0	
# ::edge	finger	mod	each	0.0.1.0	0.0.1.0.0	
# ::edge	finger	mod	individual	0.0.1.0	0.0.1.0.1	
# ::edge	from	op1	day	0.1.2	0.1.2.0	
# ::edge	slit-01	ARG0	i	0.0.1	0.0.0	
# ::edge	slit-01	ARG1	finger	0.0.1	0.0.1.0	
# ::edge	slit-01	ARG3	scissors	0.0.1	0.0.1.1	
# ::edge	start-01	ARG0	i	0.0	0.0.0	
# ::edge	start-01	ARG2	slit-01	0.0	0.0.1	
# ::edge	start-01	time	age-01	0.0	0.0.2	
# ::edge	stop-01	ARG0	i	0.1	0.0.0	
# ::edge	stop-01	polarity	-	0.1	0.1.0	
# ::edge	stop-01	time	ever	0.1	0.1.1	
# ::edge	stop-01	time	from	0.1	0.1.2	
# ::edge	temporal-quantity	quant	7	0.0.2.0	0.0.2.0.0	
# ::edge	temporal-quantity	unit	year	0.0.2.0	0.0.2.0.1	
(a2 / and
      :op1 (s / start-01
            :ARG0 (i / i)
            :ARG2 (s2 / slit-01
                  :ARG0 i
                  :ARG1 (f / finger
                        :mod (e / each)
                        :mod (i2 / individual))
                  :ARG3 (s3 / scissors))
            :time (a / age-01
                  :ARG1 i
                  :ARG2 (t / temporal-quantity :quant 7
                        :unit (y / year))))
      :op2 (s4 / stop-01 :polarity -
            :ARG0 i
            :time (e2 / ever)
            :time (f2 / from
                  :op1 (d / day
                        :mod (t2 / that)))))

# ::node	0	multi-sentence	
# ::node	0.0	hello	0-1
# ::node	0.1	girl	8-9
# ::node	0.1.0	temporal-quantity	6-7
# ::node	0.1.0.0	12	5-6
# ::node	0.1.0.1	year	6-7
# ::node	0.1.0.2	mean-01	
# ::node	0.1.0.2.0	age-01	
# ::node	0.1.0.2.0.0	temporal-quantity	
# ::node	0.1.0.2.0.0.0	13	10-11
# ::node	0.1.0.2.0.0.1	year	
# ::node	0.1.0.2.0.1	after	
# ::node	0.1.0.2.0.1.0	now	
# ::node	0.1.0.2.0.1.1	temporal-quantity	13-14
# ::node	0.1.0.2.0.1.1.0	2	12-13
# ::node	0.1.0.2.0.1.1.1	day	13-14
# ::node	0.1.1	addict-01	17-18
# ::node	0.1.1.0	harm-01	20-21
# ::node	0.1.1.0.0	self	19-20
# ::node	0.1.2	i	2-3
# ::root	0	multi-sentence
# ::edge	addict-01	ARG2	harm-01	0.1.1	0.1.1.0	
# ::edge	after	op1	now	0.1.0.2.0.1	0.1.0.2.0.1.0	
# ::edge	after	quant	temporal-quantity	0.1.0.2.0.1	0.1.0.2.0.1.1	
# ::edge	age-01	ARG2	temporal-quantity	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	age-01	time	after	0.1.0.2.0	0.1.0.2.0.1	
# ::edge	girl	ARG1-of	addict-01	0.1	0.1.1	
# ::edge	girl	age	temporal-quantity	0.1	0.1.0	
# ::edge	girl	domain	i	0.1	0.1.2	
# ::edge	harm-01	ARG1	self	0.1.1.0	0.1.1.0.0	
# ::edge	mean-01	ARG2	age-01	0.1.0.2	0.1.0.2.0	
# ::edge	multi-sentence	snt1	hello	0	0.0	
# ::edge	multi-sentence	snt2	girl	0	0.1	
# ::edge	temporal-quantity	ARG1-of	mean-01	0.1.0	0.1.0.2	
# ::edge	temporal-quantity	quant	12	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	quant	13	0.1.0.2.0.0	0.1.0.2.0.0.0	
# ::edge	temporal-quantity	quant	2	0.1.0.2.0.1.1	0.1.0.2.0.1.1.0	
# ::edge	temporal-quantity	unit	day	0.1.0.2.0.1.1	0.1.0.2.0.1.1.1	
# ::edge	temporal-quantity	unit	year	0.1.0	0.1.0.1	
# ::edge	temporal-quantity	unit	year	0.1.0.2.0.0	0.1.0.2.0.0.1	
(m2 / multi-sentence
      :snt1 (h2 / hello)
      :snt2 (g / girl
            :age (t2 / temporal-quantity :quant 12
                  :unit (y / year)
                  :ARG1-of (m / mean-01
                        :ARG2 (a / age-01
                              :ARG2 (t3 / temporal-quantity :quant 13
                                    :unit (y2 / year))
                              :time (a3 / after
                                    :op1 (n / now)
                                    :quant (t / temporal-quantity :quant 2
                                          :unit (d2 / day))))))
            :ARG1-of (a2 / addict-01
                  :ARG2 (h / harm-01
                        :ARG1 (s / self)))
            :domain (i / i)))

# ::node	0	tempt-01	7-8
# ::node	0.0	i	4-5
# ::node	0.1	or	12-13
# ::node	0.1.0	cut-01	9-10
# ::node	0.1.0.0	arm	11-12
# ::node	0.1.1	burn-01	13-14
# ::node	0.2	write-01	2-3
# ::node	0.2.0	this	3-4
# ::node	0.3	really	6-7
# ::root	0	tempt-01
# ::edge	arm	part-of	i	0.1.0.0	0.0	
# ::edge	burn-01	ARG0	i	0.1.1	0.0	
# ::edge	burn-01	ARG1	i	0.1.1	0.0	
# ::edge	cut-01	ARG0	i	0.1.0	0.0	
# ::edge	cut-01	ARG1	arm	0.1.0	0.1.0.0	
# ::edge	or	op1	cut-01	0.1	0.1.0	
# ::edge	or	op2	burn-01	0.1	0.1.1	
# ::edge	tempt-01	ARG1	i	0	0.0	
# ::edge	tempt-01	ARG3	or	0	0.1	
# ::edge	tempt-01	mod	really	0	0.3	
# ::edge	tempt-01	time	write-01	0	0.2	
# ::edge	write-01	ARG0	i	0.2	0.0	
# ::edge	write-01	ARG1	this	0.2	0.2.0	
(t / tempt-01
      :ARG1 (i / i)
      :ARG3 (o / or
            :op1 (c / cut-01
                  :ARG0 i
                  :ARG1 (a / arm
                        :part-of i))
            :op2 (b / burn-01
                  :ARG0 i
                  :ARG1 i))
      :time (w / write-01
            :ARG0 i
            :ARG1 (t2 / this))
      :mod (r / really))

# ::node	0	and	13-14
# ::node	0.0	take-01	18-19
# ::node	0.0.0	i	1-2
# ::node	0.0.1	and	22-23
# ::node	0.0.1.0	paracetamol	12-13
# ::node	0.0.1.0.0	around	10-11
# ::node	0.0.1.0.0.0	5	11-12
# ::node	0.0.1.1	drug	15-16
# ::node	0.0.1.1.0	other	14-15
# ::node	0.1	take-01	9-10
# ::node	0.1.0	and	16-17
# ::node	0.1.0.0	lager	
# ::node	0.1.0.1	vodka	23-24
# ::node	0.2	possible-01	
# ::node	0.2.0	-	
# ::node	0.2.1	find-01	3-4
# ::node	0.2.1.0	thing	6-7
# ::node	0.2.1.0.0	cut-01	6-7
# ::root	0	and
# ::edge	and	op1	lager	0.1.0	0.1.0.0	
# ::edge	and	op1	paracetamol	0.0.1	0.0.1.0	
# ::edge	and	op1	take-01	0	0.0	
# ::edge	and	op1	take-01	0	0.1	
# ::edge	and	op2	drug	0.0.1	0.0.1.1	
# ::edge	and	op2	vodka	0.1.0	0.1.0.1	
# ::edge	and	time	possible-01	0	0.2	
# ::edge	around	op1	5	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	drug	mod	other	0.0.1.1	0.0.1.1.0	
# ::edge	find-01	ARG1	thing	0.2.1	0.2.1.0	
# ::edge	paracetamol	quant	around	0.0.1.0	0.0.1.0.0	
# ::edge	possible-01	ARG1	find-01	0.2	0.2.1	
# ::edge	possible-01	polarity	-	0.2	0.2.0	
# ::edge	take-01	ARG0	i	0.0	0.0.0	
# ::edge	take-01	ARG0	i	0.1	0.0.0	
# ::edge	take-01	ARG1	and	0.0	0.0.1	
# ::edge	take-01	ARG1	and	0.1	0.0.1	
# ::edge	take-01	prep-with	and	0.1	0.1.0	
# ::edge	thing	instrument-of	cut-01	0.2.1.0	0.2.1.0.0	
(a2 / and
      :op1 (t / take-01
            :ARG0 (i / i)
            :ARG1 (a4 / and
                  :op1 (p / paracetamol
                        :quant (a / around :op1 5))
                  :op2 (d / drug
                        :mod (o / other))))
      :op1 (t2 / take-01
            :ARG0 i
            :ARG1 a4
            :prep-with (a5 / and
                  :op1 (l / lager)
                  :op2 (v / vodka)))
      :time (p2 / possible-01 :polarity -
            :ARG1 (f / find-01
                  :ARG1 (t3 / thing
                        :instrument-of (c / cut-01)))))

# ::node	0	and	13-14
# ::node	0.0	heal-01	1-2
# ::node	0.0.0	they	0-1
# ::node	0.1	cut-01	5-6
# ::node	0.1.0	i	4-5
# ::node	0.1.1	and	
# ::node	0.1.1.0	staple	8-9
# ::node	0.1.1.0.0	rob-01	10-11
# ::node	0.1.1.0.0.0	school	12-13
# ::node	0.1.1.1	razor	15-16
# ::node	0.1.2	then	3-4
# ::root	0	and
# ::edge	and	op1	heal-01	0	0.0	
# ::edge	and	op1	staple	0.1.1	0.1.1.0	
# ::edge	and	op2	cut-01	0	0.1	
# ::edge	and	op2	razor	0.1.1	0.1.1.1	
# ::edge	cut-01	ARG0	i	0.1	0.1.0	
# ::edge	cut-01	ARG1	i	0.1	0.1.0	
# ::edge	cut-01	ARG3	and	0.1	0.1.1	
# ::edge	cut-01	mod	then	0.1	0.1.2	
# ::edge	heal-01	ARG1	they	0.0	0.0.0	
# ::edge	rob-01	ARG0	i	0.1.1.0.0	0.1.0	
# ::edge	rob-01	ARG1	school	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	staple	ARG2-of	rob-01	0.1.1.0	0.1.1.0.0	
(a / and
      :op1 (h / heal-01
            :ARG1 (t / they))
      :op2 (c / cut-01
            :ARG0 (i / i)
            :ARG1 i
            :ARG3 (a2 / and
                  :op1 (s / staple
                        :ARG2-of (r / rob-01
                              :ARG0 i
                              :ARG1 (s2 / school)))
                  :op2 (r2 / razor))
            :mod (t2 / then)))

# ::node	0	have-03	1-2
# ::node	0.0	i	0-1
# ::node	0.1	slit	3-4
# ::node	0.1.0	arm	6-7
# ::node	0.1.1	several	
# ::root	0	have-03
# ::edge	arm	part-of	i	0.1.0	0.0	
# ::edge	have-03	ARG0	i	0	0.0	
# ::edge	have-03	ARG1	slit	0	0.1	
# ::edge	slit	location	arm	0.1	0.1.0	
# ::edge	slit	quant	several	0.1	0.1.1	
(h / have-03
      :ARG0 (i / i)
      :ARG1 (s / slit
            :location (a / arm
                  :part-of i)
            :quant (s2 / several)))

# ::node	0	think-01	1-2
# ::node	0.0	i	
# ::node	0.1	it	0-1
# ::node	0.2	rate-entity-91	
# ::node	0.2.0	temporal-quantity	
# ::node	0.2.0.0	1	
# ::node	0.2.0.1	day	
# ::root	0	think-01
# ::edge	rate-entity-91	ARG2	temporal-quantity	0.2	0.2.0	
# ::edge	temporal-quantity	quant	1	0.2.0	0.2.0.0	
# ::edge	temporal-quantity	unit	day	0.2.0	0.2.0.1	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	it	0	0.1	
# ::edge	think-01	frequency	rate-entity-91	0	0.2	
(t / think-01
      :ARG0 (i / i)
      :ARG1 (i2 / it)
      :frequency (r / rate-entity-91
            :ARG2 (t2 / temporal-quantity :quant 1
                  :unit (d / day))))

# ::node	0	contrast-01	4-5
# ::node	0.0	contrast-01	14-15
# ::node	0.0.0	autistic	3-4
# ::node	0.0.0.0	person	30-31
# ::node	0.0.0.0.0	have-rel-role-91	30-31
# ::node	0.0.0.0.0.0	i	5-6
# ::node	0.0.0.0.0.1	brother	1-2
# ::node	0.0.1	notice-01	8-9
# ::node	0.0.1.0	-	
# ::node	0.0.1.1	either	12-13
# ::node	0.1	and	20-21
# ::node	0.1.0	broad-02	19-20
# ::node	0.1.0.0	spectrum	16-17
# ::node	0.1.0.1	so	18-19
# ::node	0.1.1	probable	23-24
# ::node	0.1.1.0	have-03	6-7
# ::node	0.1.1.0.0	disease	26-28
# ::node	0.1.1.0.0.0	"Asperger_syndrome"	
# ::node	0.1.1.0.0.1	name	26-28
# ::node	0.1.1.0.0.1.0	"Asperger's"	26-28
# ::node	0.1.1.0.0.2	mild	25-26
# ::node	0.1.1.0.1	cause-01	28-29
# ::node	0.1.1.0.1.0	and	34-35
# ::node	0.1.1.0.1.0.0	have-03	24-25
# ::node	0.1.1.0.1.0.0.0	problem	31-32
# ::node	0.1.1.0.1.0.0.0.0	communicate-01	33-34
# ::node	0.1.1.0.1.0.1	pick-up-11	37-38
# ::node	0.1.1.0.1.0.1.0	-	
# ::node	0.1.1.0.1.0.1.1	slash	
# ::node	0.1.1.0.1.0.1.1.0	react-01	41-42
# ::node	0.1.1.0.1.0.1.1.0.0	society	40-41
# ::node	0.1.1.0.1.0.1.1.1	language	44-45
# ::node	0.1.1.0.1.0.1.1.1.0	body	43-44
# ::root	0	contrast-01
# ::edge	and	op1	broad-02	0.1	0.1.0	
# ::edge	and	op1	have-03	0.1.1.0.1.0	0.1.1.0.1.0.0	
# ::edge	and	op2	pick-up-11	0.1.1.0.1.0	0.1.1.0.1.0.1	
# ::edge	and	op2	probable	0.1	0.1.1	
# ::edge	autistic	domain	person	0.0.0	0.0.0.0	
# ::edge	broad-02	ARG1	spectrum	0.1.0	0.1.0.0	
# ::edge	broad-02	degree	so	0.1.0	0.1.0.1	
# ::edge	cause-01	ARG1	and	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	contrast-01	ARG1	autistic	0.0	0.0.0	
# ::edge	contrast-01	ARG1	contrast-01	0	0.0	
# ::edge	contrast-01	ARG2	and	0	0.1	
# ::edge	contrast-01	ARG2	notice-01	0.0	0.0.1	
# ::edge	disease	mod	mild	0.1.1.0.0	0.1.1.0.0.2	
# ::edge	disease	name	name	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	disease	wiki	"Asperger_syndrome"	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	have-03	ARG0	i	0.1.1.0	0.0.0.0.0.0	
# ::edge	have-03	ARG0	i	0.1.1.0.1.0.0	0.0.0.0.0.0	
# ::edge	have-03	ARG0-of	cause-01	0.1.1.0	0.1.1.0.1	
# ::edge	have-03	ARG1	disease	0.1.1.0	0.1.1.0.0	
# ::edge	have-03	ARG1	problem	0.1.1.0.1.0.0	0.1.1.0.1.0.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	brother	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	language	mod	body	0.1.1.0.1.0.1.1.1	0.1.1.0.1.0.1.1.1.0	
# ::edge	name	op1	"Asperger's"	0.1.1.0.0.1	0.1.1.0.0.1.0	
# ::edge	notice-01	ARG0	i	0.0.1	0.0.0.0.0.0	
# ::edge	notice-01	ARG1	autistic	0.0.1	0.0.0	
# ::edge	notice-01	mod	either	0.0.1	0.0.1.1	
# ::edge	notice-01	polarity	-	0.0.1	0.0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.0	
# ::edge	pick-up-11	ARG0	i	0.1.1.0.1.0.1	0.0.0.0.0.0	
# ::edge	pick-up-11	ARG1	slash	0.1.1.0.1.0.1	0.1.1.0.1.0.1.1	
# ::edge	pick-up-11	polarity	-	0.1.1.0.1.0.1	0.1.1.0.1.0.1.0	
# ::edge	probable	domain	have-03	0.1.1	0.1.1.0	
# ::edge	problem	topic	communicate-01	0.1.1.0.1.0.0.0	0.1.1.0.1.0.0.0.0	
# ::edge	react-01	mod	society	0.1.1.0.1.0.1.1.0	0.1.1.0.1.0.1.1.0.0	
# ::edge	slash	op1	react-01	0.1.1.0.1.0.1.1	0.1.1.0.1.0.1.1.0	
# ::edge	slash	op2	language	0.1.1.0.1.0.1.1	0.1.1.0.1.0.1.1.1	
(c / contrast-01
      :ARG1 (c2 / contrast-01
            :ARG1 (a / autistic
                  :domain (p4 / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 (i / i)
                              :ARG2 (b / brother))))
            :ARG2 (n / notice-01 :polarity -
                  :ARG0 i
                  :ARG1 a
                  :mod (e / either)))
      :ARG2 (a2 / and
            :op1 (b2 / broad-02
                  :ARG1 (s2 / spectrum)
                  :degree (s / so))
            :op2 (p / probable
                  :domain (h2 / have-03
                        :ARG0 i
                        :ARG1 (d / disease :wiki "Asperger_syndrome" :name (n2 / name :op1 "Asperger's")
                              :mod (m2 / mild))
                        :ARG0-of (c3 / cause-01
                              :ARG1 (a5 / and
                                    :op1 (h / have-03
                                          :ARG0 i
                                          :ARG1 (p2 / problem
                                                :topic (c4 / communicate-01)))
                                    :op2 (p3 / pick-up-11 :polarity -
                                          :ARG0 i
                                          :ARG1 (s4 / slash
                                                :op1 (r / react-01
                                                      :mod (s3 / society))
                                                :op2 (l / language
                                                      :mod (b3 / body))))))))))

# ::node	0	possible-01	7-8
# ::node	0.0	interrogative	
# ::node	0.1	go-02	8-9
# ::node	0.1.0	you	6-7
# ::node	0.1.1	house	5-6
# ::node	0.1.1.0	person	
# ::node	0.1.1.0.0	have-rel-role-91	3-4
# ::node	0.1.1.0.0.0	friend	3-4
# ::node	0.1.2	form-01	11-12
# ::node	0.1.2.0	group	14-15
# ::node	0.1.2.0.0	study-01	13-14
# ::root	0	possible-01
# ::edge	form-01	ARG1	group	0.1.2	0.1.2.0	
# ::edge	go-02	ARG0	you	0.1	0.1.0	
# ::edge	go-02	ARG4	house	0.1	0.1.1	
# ::edge	go-02	purpose	form-01	0.1	0.1.2	
# ::edge	group	ARG0-of	study-01	0.1.2.0	0.1.2.0.0	
# ::edge	have-rel-role-91	ARG1	you	0.1.1.0.0	0.1.0	
# ::edge	have-rel-role-91	ARG2	friend	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	house	poss	person	0.1.1	0.1.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1.0	0.1.1.0.0	
# ::edge	possible-01	ARG1	go-02	0	0.1	
# ::edge	possible-01	mode	interrogative	0	0.0	
(p / possible-01 :mode interrogative
      :ARG1 (g / go-02
            :ARG0 (y / you)
            :ARG4 (h / house
                  :poss (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 y
                              :ARG2 (f / friend))))
            :purpose (f2 / form-01
                  :ARG1 (g2 / group
                        :ARG0-of (s / study-01)))))

# ::node	0	contrast-01	2-3
# ::node	0.0	hard-02	1-2
# ::node	0.0.0	it	0-1
# ::node	0.1	possible-01	4-5
# ::node	0.1.0	do-02	5-6
# ::node	0.1.0.0	you	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG1	hard-02	0	0.0	
# ::edge	contrast-01	ARG2	possible-01	0	0.1	
# ::edge	do-02	ARG0	you	0.1.0	0.1.0.0	
# ::edge	do-02	ARG1	it	0.1.0	0.0.0	
# ::edge	hard-02	ARG1	it	0.0	0.0.0	
# ::edge	possible-01	ARG1	do-02	0.1	0.1.0	
(c / contrast-01
      :ARG1 (h / hard-02
            :ARG1 (i2 / it))
      :ARG2 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 i2)))

# ::node	0	contrast-01	15-16
# ::node	0.0	and	
# ::node	0.0.0	age-01	
# ::node	0.0.0.0	i	0-1
# ::node	0.0.0.1	temporal-quantity	8-9
# ::node	0.0.0.1.0	17	2-3
# ::node	0.0.0.1.1	year	8-9
# ::node	0.0.1	start-01	4-5
# ::node	0.0.1.0	harm-01	6-7
# ::node	0.0.1.0.0	self	5-6
# ::node	0.0.1.0.1	mean-01	
# ::node	0.0.1.0.1.0	cut-01	11-12
# ::node	0.0.1.0.1.0.0	arm	13-14
# ::node	0.0.1.0.1.0.1	main	10-11
# ::node	0.0.1.1	year	
# ::node	0.0.1.1.0	last	7-8
# ::node	0.1	stop-01	18-19
# ::node	0.1.0	before	
# ::node	0.1.0.0	now	
# ::node	0.1.0.1	few	22-23
# ::node	0.1.0.1.0	temporal-quantity	23-24
# ::node	0.1.0.1.0.0	1	
# ::node	0.1.0.1.0.1	month	23-24
# ::root	0	contrast-01
# ::edge	age-01	ARG1	i	0.0.0	0.0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0.0	0.0.0.1	
# ::edge	and	op1	age-01	0.0	0.0.0	
# ::edge	and	op2	start-01	0.0	0.0.1	
# ::edge	arm	part-of	i	0.0.1.0.1.0.0	0.0.0.0	
# ::edge	before	op1	now	0.1.0	0.1.0.0	
# ::edge	before	quant	few	0.1.0	0.1.0.1	
# ::edge	contrast-01	ARG1	and	0	0.0	
# ::edge	contrast-01	ARG2	stop-01	0	0.1	
# ::edge	cut-01	ARG1	arm	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	cut-01	mod	main	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	few	op1	temporal-quantity	0.1.0.1	0.1.0.1.0	
# ::edge	harm-01	ARG1	self	0.0.1.0	0.0.1.0.0	
# ::edge	harm-01	ARG1-of	mean-01	0.0.1.0	0.0.1.0.1	
# ::edge	mean-01	ARG2	cut-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	start-01	ARG0	i	0.0.1	0.0.0.0	
# ::edge	start-01	ARG1	harm-01	0.0.1	0.0.1.0	
# ::edge	start-01	time	year	0.0.1	0.0.1.1	
# ::edge	stop-01	ARG0	i	0.1	0.0.0.0	
# ::edge	stop-01	ARG1	harm-01	0.1	0.0.1.0	
# ::edge	stop-01	time	before	0.1	0.1.0	
# ::edge	temporal-quantity	quant	1	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	temporal-quantity	quant	17	0.0.0.1	0.0.0.1.0	
# ::edge	temporal-quantity	unit	month	0.1.0.1.0	0.1.0.1.0.1	
# ::edge	temporal-quantity	unit	year	0.0.0.1	0.0.0.1.1	
# ::edge	year	mod	last	0.0.1.1	0.0.1.1.0	
(c / contrast-01
      :ARG1 (a / and
            :op1 (a2 / age-01
                  :ARG1 (i / i)
                  :ARG2 (t2 / temporal-quantity :quant 17
                        :unit (y / year)))
            :op2 (s / start-01
                  :ARG0 i
                  :ARG1 (h / harm-01
                        :ARG1 (s2 / self)
                        :ARG1-of (m / mean-01
                              :ARG2 (c2 / cut-01
                                    :ARG1 (a3 / arm
                                          :part-of i)
                                    :mod (m3 / main))))
                  :time (y2 / year
                        :mod (l / last))))
      :ARG2 (s3 / stop-01
            :ARG0 i
            :ARG1 h
            :time (b / before
                  :op1 (n / now)
                  :quant (f / few
                        :op1 (t3 / temporal-quantity :quant 1
                              :unit (m4 / month))))))

# ::node	0	multi-sentence	
# ::node	0.0	and	0-1
# ::node	0.0.0	strength	3-4
# ::node	0.0.1	also	2-3
# ::node	0.1	possible-01	6-7
# ::node	0.1.0	do-02	7-8
# ::node	0.1.0.0	you	5-6
# ::node	0.1.0.1	it	8-9
# ::node	0.2	find-01	11-12
# ::node	0.2.0	i	10-11
# ::node	0.2.1	salvation	12-13
# ::node	0.2.1.0	and	16-17
# ::node	0.2.1.0.0	write-01	15-16
# ::node	0.2.1.0.0.0	poetry	14-15
# ::node	0.2.1.0.1	keep-03	17-18
# ::node	0.2.1.0.1.0	journal	19-20
# ::root	0	multi-sentence
# ::edge	and	mod	also	0.0	0.0.1	
# ::edge	and	op1	write-01	0.2.1.0	0.2.1.0.0	
# ::edge	and	op2	keep-03	0.2.1.0	0.2.1.0.1	
# ::edge	and	op2	strength	0.0	0.0.0	
# ::edge	do-02	ARG0	you	0.1.0	0.1.0.0	
# ::edge	do-02	ARG1	it	0.1.0	0.1.0.1	
# ::edge	find-01	ARG0	i	0.2	0.2.0	
# ::edge	find-01	ARG1	salvation	0.2	0.2.1	
# ::edge	keep-03	ARG1	journal	0.2.1.0.1	0.2.1.0.1.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	possible-01	0	0.1	
# ::edge	multi-sentence	snt3	find-01	0	0.2	
# ::edge	possible-01	ARG1	do-02	0.1	0.1.0	
# ::edge	salvation	prep-in	and	0.2.1	0.2.1.0	
# ::edge	write-01	ARG1	poetry	0.2.1.0.0	0.2.1.0.0.0	
(m / multi-sentence
      :snt1 (a / and
            :op2 (s / strength)
            :mod (a2 / also))
      :snt2 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (i / it)))
      :snt3 (f / find-01
            :ARG0 (i2 / i)
            :ARG1 (s2 / salvation
                  :prep-in (a3 / and
                        :op1 (w / write-01
                              :ARG1 (p2 / poetry))
                        :op2 (k / keep-03
                              :ARG1 (j / journal))))))

# ::node	0	contrast-01	6-7
# ::node	0.0	feel-01	18-19
# ::node	0.0.0	i	0-1
# ::node	0.0.1	happy	4-5
# ::node	0.0.1.0	more	
# ::node	0.0.1.0.0	much	3-4
# ::node	0.0.1.0.0.0	so	
# ::node	0.1	remind-01	14-15
# ::node	0.1.0	see-01	7-8
# ::node	0.1.0.0	scar	9-10
# ::node	0.1.1	and	
# ::node	0.1.1.0	thing	36-37
# ::node	0.1.1.0.0	feel-01	1-2
# ::node	0.1.1.0.0.0	time	21-22
# ::node	0.1.1.0.0.0.0	that	20-21
# ::node	0.1.1.1	strong-02	24-25
# ::node	0.1.1.1.0	so	2-3
# ::node	0.1.1.1.1	cause-01	
# ::node	0.1.1.1.1.0	want-01	31-32
# ::node	0.1.1.1.1.0.0	do-02	33-34
# ::node	0.1.1.1.1.0.0.0	thing	
# ::node	0.1.1.1.1.0.0.0.0	such	34-35
# ::node	0.1.2	pain-01	13-14
# ::root	0	contrast-01
# ::edge	and	op1	thing	0.1.1	0.1.1.0	
# ::edge	and	op2	strong-02	0.1.1	0.1.1.1	
# ::edge	cause-01	ARG1	want-01	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	contrast-01	ARG1	feel-01	0	0.0	
# ::edge	contrast-01	ARG2	remind-01	0	0.1	
# ::edge	do-02	ARG1	thing	0.1.1.1.1.0.0	0.1.1.1.1.0.0.0	
# ::edge	do-02	ARG2	i	0.1.1.1.1.0.0	0.0.0	
# ::edge	feel-01	ARG0	i	0.0	0.0.0	
# ::edge	feel-01	ARG0	i	0.1.1.0.0	0.0.0	
# ::edge	feel-01	ARG1	happy	0.0	0.0.1	
# ::edge	feel-01	time	time	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	happy	degree	more	0.0.1	0.0.1.0	
# ::edge	more	quant	much	0.0.1.0	0.0.1.0.0	
# ::edge	much	degree	so	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	pain-01	ARG1	i	0.1.2	0.0.0	
# ::edge	remind-01	ARG0	see-01	0.1	0.1.0	
# ::edge	remind-01	ARG0-of	pain-01	0.1	0.1.2	
# ::edge	remind-01	ARG1	and	0.1	0.1.1	
# ::edge	remind-01	ARG2	i	0.1	0.0.0	
# ::edge	see-01	ARG0	i	0.1.0	0.0.0	
# ::edge	see-01	ARG1	scar	0.1.0	0.1.0.0	
# ::edge	strong-02	ARG0-of	cause-01	0.1.1.1	0.1.1.1.1	
# ::edge	strong-02	ARG1	feel-01	0.1.1.1	0.1.1.0.0	
# ::edge	strong-02	degree	so	0.1.1.1	0.1.1.1.0	
# ::edge	thing	ARG1-of	feel-01	0.1.1.0	0.1.1.0.0	
# ::edge	thing	mod	such	0.1.1.1.1.0.0.0	0.1.1.1.1.0.0.0.0	
# ::edge	time	mod	that	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	want-01	ARG0	i	0.1.1.1.1.0	0.0.0	
# ::edge	want-01	ARG1	do-02	0.1.1.1.1.0	0.1.1.1.1.0.0	
(c / contrast-01
      :ARG1 (f / feel-01
            :ARG0 (i / i)
            :ARG1 (h / happy
                  :degree (m / more
                        :quant (m2 / much
                              :degree (s / so)))))
      :ARG2 (r / remind-01
            :ARG0 (s4 / see-01
                  :ARG0 i
                  :ARG1 (s5 / scar))
            :ARG1 (a / and
                  :op1 (t4 / thing
                        :ARG1-of (f2 / feel-01
                              :ARG0 i
                              :time (t / time
                                    :mod (t2 / that))))
                  :op2 (s2 / strong-02
                        :ARG1 f2
                        :degree (s6 / so)
                        :ARG0-of (c2 / cause-01
                              :ARG1 (w / want-01
                                    :ARG0 i
                                    :ARG1 (d / do-02
                                          :ARG1 (t3 / thing
                                                :mod (s3 / such))
                                          :ARG2 i)))))
            :ARG2 i
            :ARG0-of (p / pain-01
                  :ARG1 i)))

# ::node	0	remember-01	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	define-01	6-7
# ::node	0.2.0	-	6-6
# ::node	0.2.1	harm-01	3-4
# ::node	0.2.1.0	self	2-3
# ::node	0.2.2	person	8-9
# ::node	0.2.2.0	you	8-9
# ::root	0	remember-01
# ::edge	define-01	ARG0	harm-01	0.2	0.2.1	
# ::edge	define-01	ARG1	person	0.2	0.2.2	
# ::edge	define-01	polarity	-	0.2	0.2.0	
# ::edge	harm-01	ARG1	self	0.2.1	0.2.1.0	
# ::edge	person	domain	you	0.2.2	0.2.2.0	
# ::edge	remember-01	ARG0	you	0	0.1	
# ::edge	remember-01	ARG1	define-01	0	0.2	
# ::edge	remember-01	mode	imperative	0	0.0	
(r / remember-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (d / define-01 :polarity -
            :ARG0 (h / harm-01
                  :ARG1 (s / self))
            :ARG1 (p / person
                  :domain (y2 / you))))

# ::node	0	contrast-01	5-6
# ::node	0.0	addictive-02	3-4
# ::node	0.0.0	harm-01	1-2
# ::node	0.0.0.0	self	0-1
# ::node	0.1	possible-01	7-8
# ::node	0.1.0	overcome-01	8-9
# ::node	0.1.0.0	you	6-7
# ::root	0	contrast-01
# ::edge	addictive-02	ARG0	harm-01	0.0	0.0.0	
# ::edge	contrast-01	ARG1	addictive-02	0	0.0	
# ::edge	contrast-01	ARG2	possible-01	0	0.1	
# ::edge	harm-01	ARG1	self	0.0.0	0.0.0.0	
# ::edge	overcome-01	ARG0	you	0.1.0	0.1.0.0	
# ::edge	overcome-01	ARG1	harm-01	0.1.0	0.0.0	
# ::edge	possible-01	ARG1	overcome-01	0.1	0.1.0	
(c / contrast-01
      :ARG1 (a / addictive-02
            :ARG0 (h / harm-01
                  :ARG1 (s / self)))
      :ARG2 (p / possible-01
            :ARG1 (o / overcome-01
                  :ARG0 (y / you)
                  :ARG1 h)))

# ::node	0	this	2-3
# ::node	0.0	cause-01	
# ::node	0.0.0	amr-unknown	
# ::root	0	this
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.0	
# ::edge	this	ARG1-of	cause-01	0	0.0	
(t / this
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown)))

# ::node	0	possible-01	1-2
# ::node	0.0	overcome-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	it	3-4
# ::root	0	possible-01
# ::edge	overcome-01	ARG0	you	0.0	0.0.0	
# ::edge	overcome-01	ARG1	it	0.0	0.0.1	
# ::edge	possible-01	ARG1	overcome-01	0	0.0	
(p / possible-01
      :ARG1 (o / overcome-01
            :ARG0 (y / you)
            :ARG1 (i / it)))

# ::node	0	have-concession-91	15-16
# ::node	0.0	know-01	3-4
# ::node	0.0.0	i	2-3
# ::node	0.0.1	take-10	6-7
# ::node	0.0.1.0	adjust-01	11-12
# ::node	0.0.1.1	time	9-10
# ::node	0.0.1.1.0	some	8-9
# ::node	0.0.2	cause-01	13-14
# ::node	0.0.2.0	and	21-22
# ::node	0.0.2.0.0	introvert	19-20
# ::node	0.0.2.0.0.0	very	18-19
# ::node	0.0.2.0.1	shy-04	22-23
# ::node	0.0.2.0.2	anxious	25-26
# ::node	0.0.2.0.2.0	especially	24-25
# ::node	0.0.2.0.3	rest	29-30
# ::node	0.0.2.0.3.0	all	27-28
# ::node	0.0.2.0.4	always	16-17
# ::root	0	have-concession-91
# ::edge	adjust-01	ARG1	i	0.0.1.0	0.0.0	
# ::edge	and	op1	introvert	0.0.2.0	0.0.2.0.0	
# ::edge	and	op2	shy-04	0.0.2.0	0.0.2.0.1	
# ::edge	and	op3	anxious	0.0.2.0	0.0.2.0.2	
# ::edge	and	op4	rest	0.0.2.0	0.0.2.0.3	
# ::edge	and	time	always	0.0.2.0	0.0.2.0.4	
# ::edge	anxious	degree	especially	0.0.2.0.2	0.0.2.0.2.0	
# ::edge	anxious	domain	i	0.0.2.0.2	0.0.0	
# ::edge	cause-01	ARG0	and	0.0.2	0.0.2.0	
# ::edge	have-concession-91	ARG2	know-01	0	0.0	
# ::edge	introvert	degree	very	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	introvert	domain	i	0.0.2.0.0	0.0.0	
# ::edge	know-01	ARG0	i	0.0	0.0.0	
# ::edge	know-01	ARG1	take-10	0.0	0.0.1	
# ::edge	know-01	ARG1-of	cause-01	0.0	0.0.2	
# ::edge	rest	mod	all	0.0.2.0.3	0.0.2.0.3.0	
# ::edge	shy-04	ARG0	i	0.0.2.0.1	0.0.0	
# ::edge	take-10	ARG0	adjust-01	0.0.1	0.0.1.0	
# ::edge	take-10	ARG1	time	0.0.1	0.0.1.1	
# ::edge	take-10	ARG2	i	0.0.1	0.0.0	
# ::edge	time	mod	some	0.0.1.1	0.0.1.1.0	
(h / have-concession-91
      :ARG2 (k / know-01
            :ARG0 (i / i)
            :ARG1 (t / take-10
                  :ARG0 (a / adjust-01
                        :ARG1 i)
                  :ARG1 (t2 / time
                        :mod (s / some))
                  :ARG2 i)
            :ARG1-of (c / cause-01
                  :ARG0 (a3 / and
                        :op1 (i2 / introvert
                              :domain i
                              :degree (v / very))
                        :op2 (s2 / shy-04
                              :ARG0 i)
                        :op3 (a4 / anxious
                              :domain i
                              :degree (e / especially))
                        :op4 (r / rest
                              :mod (a5 / all))
                        :time (a2 / always)))))

# ::node	0	and	10-11
# ::node	0.0	go-out-17	
# ::node	0.0.0	and	14-15
# ::node	0.0.0.0	person	21-22
# ::node	0.0.0.0.0	all	7-8
# ::node	0.0.0.0.1	have-rel-role-91	21-22
# ::node	0.0.0.0.1.0	housemate	9-10
# ::node	0.0.1	night	2-3
# ::node	0.0.1.0	ordinal-entity	
# ::node	0.0.1.0.0	1	
# ::node	0.0.1.1	be-located-at-91	
# ::node	0.0.1.1.0	i	3-4
# ::node	0.0.1.1.1	here	5-6
# ::node	0.1	hard-02	18-19
# ::node	0.1.0	most	18-19
# ::node	0.1.1	thing	19-20
# ::node	0.1.1.0	do-02	26-27
# ::node	0.1.1.0.0	ever	22-23
# ::node	0.1.1.0.1	obligate-01	
# ::root	0	and
# ::edge	and	op1	go-out-17	0	0.0	
# ::edge	and	op1	person	0.0.0	0.0.0.0	
# ::edge	and	op2	hard-02	0	0.1	
# ::edge	and	op2	i	0.0.0	0.0.1.1.0	
# ::edge	be-located-at-91	ARG1	i	0.0.1.1	0.0.1.1.0	
# ::edge	be-located-at-91	ARG2	here	0.0.1.1	0.0.1.1.1	
# ::edge	do-02	ARG0	i	0.1.1.0	0.0.1.1.0	
# ::edge	do-02	ARG1-of	obligate-01	0.1.1.0	0.1.1.0.1	
# ::edge	do-02	time	ever	0.1.1.0	0.1.1.0.0	
# ::edge	go-out-17	ARG0	and	0.0	0.0.0	
# ::edge	go-out-17	time	night	0.0	0.0.1	
# ::edge	hard-02	ARG1	go-out-17	0.1	0.0	
# ::edge	hard-02	compared-to	thing	0.1	0.1.1	
# ::edge	hard-02	degree	most	0.1	0.1.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.1	0.0.1.1.0	
# ::edge	have-rel-role-91	ARG2	housemate	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	night	ord	ordinal-entity	0.0.1	0.0.1.0	
# ::edge	night	time-of	be-located-at-91	0.0.1	0.0.1.1	
# ::edge	ordinal-entity	value	1	0.0.1.0	0.0.1.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.1	
# ::edge	person	quant	all	0.0.0.0	0.0.0.0.0	
# ::edge	thing	ARG1-of	do-02	0.1.1	0.1.1.0	
(a / and
      :op1 (g / go-out-17
            :ARG0 (a2 / and
                  :op1 (p / person
                        :quant (a3 / all)
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 i
                              :ARG2 (h4 / housemate)))
                  :op2 i)
            :time (n / night
                  :ord (o / ordinal-entity :value 1)
                  :time-of (b / be-located-at-91
                        :ARG1 (i / i)
                        :ARG2 (h / here))))
      :op2 (h3 / hard-02
            :ARG1 g
            :degree (m / most)
            :compared-to (t / thing
                  :ARG1-of (d / do-02
                        :ARG0 i
                        :time (e / ever)
                        :ARG1-of (o2 / obligate-01)))))

# ::node	0	horrible	2-3
# ::node	0.0	i	
# ::node	0.1	she	0-1
# ::node	0.2	constant	6-7
# ::root	0	horrible
# ::edge	horrible	beneficiary	i	0	0.0	
# ::edge	horrible	domain	she	0	0.1	
# ::edge	horrible	manner	constant	0	0.2	
(h / horrible
      :beneficiary (i / i)
      :domain (s / she)
      :manner (c / constant))

# ::node	0	multi-sentence	
# ::node	0.0	hello	0-1
# ::node	0.1	contrast-01	
# ::node	0.1.0	start-01	2-3
# ::node	0.1.0.0	i	1-2
# ::node	0.1.0.1	university	3-4
# ::node	0.1.0.2	date-entity	5-6
# ::node	0.1.0.2.0	9	5-6
# ::node	0.1.1	gel-00	10-11
# ::node	0.1.1.0	-	
# ::node	0.1.1.1	immediate	9-10
# ::node	0.1.1.2	obvious	13-14
# ::node	0.1.1.3	resemble-01	
# ::node	0.1.1.3.0	person	15-16
# ::node	0.1.1.3.0.0	most	15-16
# ::root	0	multi-sentence
# ::edge	contrast-01	ARG1	start-01	0.1	0.1.0	
# ::edge	contrast-01	ARG2	gel-00	0.1	0.1.1	
# ::edge	date-entity	month	9	0.1.0.2	0.1.0.2.0	
# ::edge	gel-00	ARG1	i	0.1.1	0.1.0.0	
# ::edge	gel-00	ARG1-of	resemble-01	0.1.1	0.1.1.3	
# ::edge	gel-00	ARG2	university	0.1.1	0.1.0.1	
# ::edge	gel-00	manner	obvious	0.1.1	0.1.1.2	
# ::edge	gel-00	polarity	-	0.1.1	0.1.1.0	
# ::edge	gel-00	time	immediate	0.1.1	0.1.1.1	
# ::edge	multi-sentence	snt1	hello	0	0.0	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	person	mod	most	0.1.1.3.0	0.1.1.3.0.0	
# ::edge	resemble-01	ARG2	person	0.1.1.3	0.1.1.3.0	
# ::edge	start-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	start-01	ARG1	university	0.1.0	0.1.0.1	
# ::edge	start-01	time	date-entity	0.1.0	0.1.0.2	
(m / multi-sentence
      :snt1 (h / hello)
      :snt2 (c / contrast-01
            :ARG1 (s / start-01
                  :ARG0 (i / i)
                  :ARG1 (u / university)
                  :time (d / date-entity :month 9))
            :ARG2 (g / gel-00 :polarity -
                  :ARG1 i
                  :ARG2 u
                  :time (i2 / immediate)
                  :manner (o / obvious)
                  :ARG1-of (r / resemble-01
                        :ARG2 (p / person
                              :mod (m2 / most))))))

# ::node	0	wish-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	possible-01	4-5
# ::node	0.1.0	go-out-17	
# ::node	0.1.0.0	worry-02	8-9
# ::node	0.1.0.0.0	-	
# ::node	0.1.0.0.1	or	16-17
# ::node	0.1.0.0.1.0	leave-12	15-16
# ::node	0.1.0.0.1.0.0	something	18-19
# ::node	0.1.0.0.1.1	lose-02	17-18
# ::node	0.1.0.0.2	rate-entity-91	
# ::node	0.1.0.0.2.0	temporal-quantity	
# ::node	0.1.0.0.2.0.0	2	10-11
# ::node	0.1.0.0.2.0.1	minute	
# ::node	0.2	just	1-2
# ::root	0	wish-01
# ::edge	go-out-17	ARG0	i	0.1.0	0.0	
# ::edge	go-out-17	manner	worry-02	0.1.0	0.1.0.0	
# ::edge	leave-12	ARG0	i	0.1.0.0.1.0	0.0	
# ::edge	leave-12	ARG1	something	0.1.0.0.1.0	0.1.0.0.1.0.0	
# ::edge	lose-02	ARG0	i	0.1.0.0.1.1	0.0	
# ::edge	lose-02	ARG1	something	0.1.0.0.1.1	0.1.0.0.1.0.0	
# ::edge	or	op1	leave-12	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	or	op2	lose-02	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	possible-01	ARG1	go-out-17	0.1	0.1.0	
# ::edge	rate-entity-91	ARG3	temporal-quantity	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	temporal-quantity	quant	2	0.1.0.0.2.0	0.1.0.0.2.0.0	
# ::edge	temporal-quantity	unit	minute	0.1.0.0.2.0	0.1.0.0.2.0.1	
# ::edge	wish-01	ARG0	i	0	0.0	
# ::edge	wish-01	ARG1	possible-01	0	0.1	
# ::edge	wish-01	mod	just	0	0.2	
# ::edge	worry-02	ARG0	i	0.1.0.0	0.0	
# ::edge	worry-02	ARG1	or	0.1.0.0	0.1.0.0.1	
# ::edge	worry-02	frequency	rate-entity-91	0.1.0.0	0.1.0.0.2	
# ::edge	worry-02	polarity	-	0.1.0.0	0.1.0.0.0	
(w / wish-01
      :ARG0 (i / i)
      :ARG1 (p / possible-01
            :ARG1 (g / go-out-17
                  :ARG0 i
                  :manner (w2 / worry-02 :polarity -
                        :ARG0 i
                        :ARG1 (o / or
                              :op1 (l / leave-12
                                    :ARG0 i
                                    :ARG1 (s / something))
                              :op2 (l2 / lose-02
                                    :ARG0 i
                                    :ARG1 s))
                        :frequency (r / rate-entity-91
                              :ARG3 (t / temporal-quantity :quant 2
                                    :unit (m / minute))))))
      :mod (j / just))

# ::node	0	make-out-23	2-3
# ::node	0.0	university	1-2
# ::node	0.1	good	7-8
# ::node	0.1.0	more	
# ::node	0.1.0.0	much	6-7
# ::node	0.1.1	seem-01	10-11
# ::node	0.1.1.0	it	4-5
# ::root	0	make-out-23
# ::edge	good	compared-to	seem-01	0.1	0.1.1	
# ::edge	good	degree	more	0.1	0.1.0	
# ::edge	good	domain	it	0.1	0.1.1.0	
# ::edge	make-out-23	ARG1	university	0	0.0	
# ::edge	make-out-23	ARG2	good	0	0.1	
# ::edge	more	quant	much	0.1.0	0.1.0.0	
# ::edge	seem-01	ARG1	it	0.1.1	0.1.1.0	
(m / make-out-23
      :ARG1 (u / university)
      :ARG2 (g / good
            :degree (m2 / more
                  :quant (m3 / much))
            :compared-to (s / seem-01
                  :ARG1 (i / it))
            :domain i))

# ::node	0	go-06	1-2
# ::node	0.0	i	
# ::node	0.1	bar	5-6
# ::node	0.1.0	union	
# ::node	0.1.0.0	person	
# ::node	0.1.0.0.0	study-01	
# ::node	0.2	by-oneself	
# ::node	0.3	sober-03	10-11
# ::root	0	go-06
# ::edge	bar	mod	union	0.1	0.1.0	
# ::edge	go-06	ARG0	i	0	0.0	
# ::edge	go-06	ARG2	bar	0	0.1	
# ::edge	go-06	mod	by-oneself	0	0.2	
# ::edge	go-06	time	sober-03	0	0.3	
# ::edge	person	ARG0-of	study-01	0.1.0.0	0.1.0.0.0	
# ::edge	sober-03	ARG1	i	0.3	0.0	
# ::edge	union	consist-of	person	0.1.0	0.1.0.0	
(g / go-06
      :ARG0 (i / i)
      :ARG2 (b / bar
            :mod (u / union
                  :consist-of (p / person
                        :ARG0-of (s2 / study-01))))
      :mod (b2 / by-oneself)
      :time (s / sober-03
            :ARG1 i))

# ::node	0	multi-sentence	
# ::node	0.0	fact	9-10
# ::node	0.0.0	here	6-7
# ::node	0.1	contrast-01	
# ::node	0.1.0	point	4-5
# ::node	0.1.0.0	more	1-2
# ::root	0	multi-sentence
# ::edge	contrast-01	ARG2	point	0.1	0.1.0	
# ::edge	fact	location	here	0.0	0.0.0	
# ::edge	multi-sentence	snt1	contrast-01	0	0.1	
# ::edge	multi-sentence	snt2	fact	0	0.0	
# ::edge	point	degree	more	0.1.0	0.1.0.0	
(m2 / multi-sentence
      :snt2 (f / fact
            :location (h / here))
      :snt1 (c / contrast-01
            :ARG2 (p / point
                  :degree (m / more))))

# ::node	0	and	7-8
# ::node	0.0	calm-03	4-5
# ::node	0.0.0	i	1-2
# ::node	0.0.1	pretty	3-4
# ::node	0.0.2	thing	6-7
# ::node	0.0.3	usual	0-1
# ::node	0.1	like-01	8-9
# ::node	0.1.0	take-02	10-11
# ::node	0.1.0.0	come-01	14-15
# ::node	0.2	worry-01	18-19
# ::node	0.2.0	-	17-17
# ::node	0.2.1	much	20-21
# ::node	0.2.1.0	too	19-20
# ::root	0	and
# ::edge	and	op1	calm-03	0	0.0	
# ::edge	and	op2	like-01	0	0.1	
# ::edge	and	op3	worry-01	0	0.2	
# ::edge	calm-03	ARG1	i	0.0	0.0.0	
# ::edge	calm-03	mod	pretty	0.0	0.0.1	
# ::edge	calm-03	mod	usual	0.0	0.0.3	
# ::edge	calm-03	topic	thing	0.0	0.0.2	
# ::edge	come-01	ARG1	thing	0.1.0.0	0.0.2	
# ::edge	like-01	ARG0	i	0.1	0.0.0	
# ::edge	like-01	ARG1	take-02	0.1	0.1.0	
# ::edge	much	degree	too	0.2.1	0.2.1.0	
# ::edge	take-02	ARG0	i	0.1.0	0.0.0	
# ::edge	take-02	ARG1	thing	0.1.0	0.0.2	
# ::edge	take-02	prep-as	come-01	0.1.0	0.1.0.0	
# ::edge	worry-01	ARG1	i	0.2	0.0.0	
# ::edge	worry-01	polarity	-	0.2	0.2.0	
# ::edge	worry-01	quant	much	0.2	0.2.1	
(a / and
      :op1 (c / calm-03
            :ARG1 (i / i)
            :mod (p / pretty)
            :topic (t / thing)
            :mod (u / usual))
      :op2 (l / like-01
            :ARG0 i
            :ARG1 (t2 / take-02
                  :ARG0 i
                  :ARG1 t
                  :prep-as (c2 / come-01
                        :ARG1 t)))
      :op3 (w / worry-01 :polarity -
            :ARG1 i
            :quant (m / much
                  :degree (t3 / too))))

# ::node	0	contrast-01	
# ::node	0.0	and	18-19
# ::node	0.0.0	find-01	10-11
# ::node	0.0.0.0	i	8-9
# ::node	0.0.0.1	become-01	12-13
# ::node	0.0.0.1.0	anxious	14-15
# ::node	0.0.0.1.0.0	thing	16-17
# ::node	0.0.0.1.0.1	real	13-14
# ::node	0.0.0.2	before	
# ::node	0.0.0.2.0	now	
# ::node	0.0.0.2.1	between	
# ::node	0.0.0.2.1.0	temporal-quantity	5-6
# ::node	0.0.0.2.1.0.0	1	
# ::node	0.0.0.2.1.0.1	month	5-6
# ::node	0.0.0.2.1.1	temporal-quantity	
# ::node	0.0.0.2.1.1.0	2	7-8
# ::node	0.0.0.2.1.1.1	month	
# ::node	0.0.1	talk-01	22-23
# ::node	0.0.1.0	-	22-22
# ::node	0.0.1.1	feel-01	30-31
# ::node	0.0.1.1.0	nervous	32-33
# ::node	0.0.1.1.1	mere	25-26
# ::node	0.0.1.1.2	out-of-the-blue	
# ::root	0	contrast-01
# ::edge	and	op1	find-01	0.0	0.0.0	
# ::edge	and	op2	talk-01	0.0	0.0.1	
# ::edge	anxious	mod	real	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	anxious	topic	thing	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	become-01	ARG1	i	0.0.0.1	0.0.0.0	
# ::edge	become-01	ARG2	anxious	0.0.0.1	0.0.0.1.0	
# ::edge	before	duration	between	0.0.0.2	0.0.0.2.1	
# ::edge	before	op1	now	0.0.0.2	0.0.0.2.0	
# ::edge	between	op1	temporal-quantity	0.0.0.2.1	0.0.0.2.1.0	
# ::edge	between	op2	temporal-quantity	0.0.0.2.1	0.0.0.2.1.1	
# ::edge	contrast-01	ARG2	and	0	0.0	
# ::edge	feel-01	ARG1	nervous	0.0.1.1	0.0.1.1.0	
# ::edge	feel-01	mod	mere	0.0.1.1	0.0.1.1.1	
# ::edge	feel-01	mod	out-of-the-blue	0.0.1.1	0.0.1.1.2	
# ::edge	find-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	find-01	ARG1	become-01	0.0.0	0.0.0.1	
# ::edge	find-01	time	before	0.0.0	0.0.0.2	
# ::edge	talk-01	ARG0	i	0.0.1	0.0.0.0	
# ::edge	talk-01	ARG1	feel-01	0.0.1	0.0.1.1	
# ::edge	talk-01	polarity	-	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	quant	1	0.0.0.2.1.0	0.0.0.2.1.0.0	
# ::edge	temporal-quantity	quant	2	0.0.0.2.1.1	0.0.0.2.1.1.0	
# ::edge	temporal-quantity	unit	month	0.0.0.2.1.0	0.0.0.2.1.0.1	
# ::edge	temporal-quantity	unit	month	0.0.0.2.1.1	0.0.0.2.1.1.1	
(c / contrast-01
      :ARG2 (a2 / and
            :op1 (f / find-01
                  :ARG0 (i / i)
                  :ARG1 (b / become-01
                        :ARG1 i
                        :ARG2 (a / anxious
                              :topic (t / thing)
                              :mod (r / real)))
                  :time (b2 / before
                        :op1 (n2 / now)
                        :duration (b3 / between
                              :op1 (t2 / temporal-quantity :quant 1
                                    :unit (m / month))
                              :op2 (t3 / temporal-quantity :quant 2
                                    :unit (m2 / month)))))
            :op2 (t4 / talk-01 :polarity -
                  :ARG0 i
                  :ARG1 (f2 / feel-01
                        :ARG1 (n / nervous)
                        :mod (m3 / mere)
                        :mod (o2 / out-of-the-blue)))))

# ::node	0	begin-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	feel-01	4-5
# ::node	0.1.0	panic-01	6-7
# ::node	0.1.0.0	thing	11-12
# ::node	0.1.0.0.0	variety	9-10
# ::node	0.1.0.0.1	worry-02	16-17
# ::node	0.1.0.0.1.0	-	
# ::node	0.1.0.0.1.1	beforehand	13-14
# ::node	0.1.0.0.1.2	much	19-20
# ::node	0.1.0.0.1.2.0	too	18-19
# ::node	0.1.0.0.2	cross-01	22-23
# ::node	0.1.0.0.2.0	-	
# ::node	0.1.0.0.2.1	mind	24-25
# ::node	0.1.0.0.2.2	something	26-27
# ::node	0.1.0.0.2.2.0	cause-01	28-29
# ::node	0.1.0.0.2.2.0.0	ring-01	32-33
# ::node	0.1.0.0.2.2.0.0.0	bell	30-31
# ::node	0.1.0.0.2.2.0.0.1	alarm-01	29-30
# ::node	0.1.0.0.2.2.0.0.2	head	35-36
# ::node	0.1.0.0.2.3	even	21-22
# ::node	0.1.0.1	rational	
# ::node	0.1.0.1.0	-	
# ::root	0	begin-01
# ::edge	begin-01	ARG0	i	0	0.0	
# ::edge	begin-01	ARG1	feel-01	0	0.1	
# ::edge	cause-01	ARG1	ring-01	0.1.0.0.2.2.0	0.1.0.0.2.2.0.0	
# ::edge	cross-01	ARG1	mind	0.1.0.0.2	0.1.0.0.2.1	
# ::edge	cross-01	mod	even	0.1.0.0.2	0.1.0.0.2.3	
# ::edge	cross-01	polarity	-	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	cross-01	prep-as	something	0.1.0.0.2	0.1.0.0.2.2	
# ::edge	feel-01	ARG0	i	0.1	0.0	
# ::edge	feel-01	ARG1	panic-01	0.1	0.1.0	
# ::edge	head	part-of	i	0.1.0.0.2.2.0.0.2	0.0	
# ::edge	mind	poss	i	0.1.0.0.2.1	0.0	
# ::edge	much	degree	too	0.1.0.0.1.2	0.1.0.0.1.2.0	
# ::edge	panic-01	ARG0	thing	0.1.0	0.1.0.0	
# ::edge	panic-01	ARG1	i	0.1.0	0.0	
# ::edge	panic-01	manner	rational	0.1.0	0.1.0.1	
# ::edge	rational	polarity	-	0.1.0.1	0.1.0.1.0	
# ::edge	ring-01	ARG1	bell	0.1.0.0.2.2.0.0	0.1.0.0.2.2.0.0.0	
# ::edge	ring-01	ARG2	alarm-01	0.1.0.0.2.2.0.0	0.1.0.0.2.2.0.0.1	
# ::edge	ring-01	location	head	0.1.0.0.2.2.0.0	0.1.0.0.2.2.0.0.2	
# ::edge	something	ARG0-of	cause-01	0.1.0.0.2.2	0.1.0.0.2.2.0	
# ::edge	thing	ARG0-of	cross-01	0.1.0.0	0.1.0.0.2	
# ::edge	thing	ARG1-of	worry-02	0.1.0.0	0.1.0.0.1	
# ::edge	thing	mod	variety	0.1.0.0	0.1.0.0.0	
# ::edge	worry-02	ARG0	i	0.1.0.0.1	0.0	
# ::edge	worry-02	polarity	-	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	worry-02	quant	much	0.1.0.0.1	0.1.0.0.1.2	
# ::edge	worry-02	time	beforehand	0.1.0.0.1	0.1.0.0.1.1	
(b / begin-01
      :ARG0 (i / i)
      :ARG1 (f / feel-01
            :ARG0 i
            :ARG1 (p / panic-01
                  :ARG0 (t / thing
                        :mod (v / variety)
                        :ARG1-of (w / worry-02 :polarity -
                              :ARG0 i
                              :time (b2 / beforehand)
                              :quant (m / much
                                    :degree (t2 / too)))
                        :ARG0-of (c / cross-01 :polarity -
                              :ARG1 (m2 / mind
                                    :poss i)
                              :prep-as (s / something
                                    :ARG0-of (c2 / cause-01
                                          :ARG1 (r2 / ring-01
                                                :ARG1 (b3 / bell)
                                                :ARG2 (a / alarm-01)
                                                :location (h / head
                                                      :part-of i))))
                              :mod (e / even)))
                  :ARG1 i
                  :manner (r / rational :polarity -))))

# ::node	0	contrast-01	36-37
# ::node	0.0	sure-02	3-4
# ::node	0.0.0	-	3-3
# ::node	0.0.1	i	0-1
# ::node	0.0.2	or	26-27
# ::node	0.0.2.0	interrogative	
# ::node	0.0.2.1	cause-01	24-25
# ::node	0.0.2.1.0	change-01	8-9
# ::node	0.0.2.1.0.0	lifestyle	10-11
# ::node	0.0.2.1.0.1	mean-01	
# ::node	0.0.2.1.0.1.0	go-01	12-13
# ::node	0.0.2.1.0.1.0.0	person	17-18
# ::node	0.0.2.1.0.1.0.0.0	study-01	17-18
# ::node	0.0.2.1.0.1.0.0.1	free-04	16-17
# ::node	0.0.2.1.0.1.0.0.1.0	care-01	14-15
# ::node	0.0.2.1.0.1.0.1	person	20-21
# ::node	0.0.2.1.0.1.0.1.0	graduate-01	20-21
# ::node	0.0.2.1.0.1.0.1.1	employ-01	19-20
# ::node	0.0.2.1.0.1.0.1.1.0	-	3-3
# ::node	0.0.2.1.1	this	25-26
# ::node	0.0.2.2	signal-07	31-32
# ::node	0.0.2.2.0	issue-02	34-35
# ::node	0.0.2.2.0.0	other	33-34
# ::node	0.1	begin-01	39-40
# ::node	0.1.0	bug-01	41-42
# ::node	0.1.0.0	cause-01	4-5
# ::node	0.1.0.0.0	affect-01	46-47
# ::node	0.1.0.0.0.0	and	49-50
# ::node	0.1.0.0.0.0.0	confident-01	48-49
# ::node	0.1.0.0.0.0.1	happy	50-51
# ::root	0	contrast-01
# ::edge	affect-01	ARG0	this	0.1.0.0.0	0.0.2.1.1	
# ::edge	affect-01	ARG1	and	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	and	op1	confident-01	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	and	op2	happy	0.1.0.0.0.0	0.1.0.0.0.0.1	
# ::edge	begin-01	ARG1	bug-01	0.1	0.1.0	
# ::edge	bug-01	ARG0	this	0.1.0	0.0.2.1.1	
# ::edge	bug-01	ARG1	i	0.1.0	0.0.1	
# ::edge	bug-01	ARG1-of	cause-01	0.1.0	0.1.0.0	
# ::edge	cause-01	ARG0	affect-01	0.1.0.0	0.1.0.0.0	
# ::edge	cause-01	ARG0	change-01	0.0.2.1	0.0.2.1.0	
# ::edge	cause-01	ARG1	this	0.0.2.1	0.0.2.1.1	
# ::edge	change-01	ARG1	lifestyle	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	change-01	ARG1-of	mean-01	0.0.2.1.0	0.0.2.1.0.1	
# ::edge	confident-01	ARG1	i	0.1.0.0.0.0.0	0.0.1	
# ::edge	contrast-01	ARG1	sure-02	0	0.0	
# ::edge	contrast-01	ARG2	begin-01	0	0.1	
# ::edge	employ-01	polarity	-	0.0.2.1.0.1.0.1.1	0.0.2.1.0.1.0.1.1.0	
# ::edge	free-04	ARG2	care-01	0.0.2.1.0.1.0.0.1	0.0.2.1.0.1.0.0.1.0	
# ::edge	go-01	ARG3	person	0.0.2.1.0.1.0	0.0.2.1.0.1.0.0	
# ::edge	go-01	ARG4	person	0.0.2.1.0.1.0	0.0.2.1.0.1.0.1	
# ::edge	happy	domain	i	0.1.0.0.0.0.1	0.0.1	
# ::edge	issue-02	mod	other	0.0.2.2.0	0.0.2.2.0.0	
# ::edge	mean-01	ARG2	go-01	0.0.2.1.0.1	0.0.2.1.0.1.0	
# ::edge	or	mode	interrogative	0.0.2	0.0.2.0	
# ::edge	or	op1	cause-01	0.0.2	0.0.2.1	
# ::edge	or	op2	signal-07	0.0.2	0.0.2.2	
# ::edge	person	ARG0-of	study-01	0.0.2.1.0.1.0.0	0.0.2.1.0.1.0.0.0	
# ::edge	person	ARG1-of	employ-01	0.0.2.1.0.1.0.1	0.0.2.1.0.1.0.1.1	
# ::edge	person	ARG1-of	free-04	0.0.2.1.0.1.0.0	0.0.2.1.0.1.0.0.1	
# ::edge	person	ARG1-of	graduate-01	0.0.2.1.0.1.0.1	0.0.2.1.0.1.0.1.0	
# ::edge	signal-07	ARG0	this	0.0.2.2	0.0.2.1.1	
# ::edge	signal-07	ARG1	issue-02	0.0.2.2	0.0.2.2.0	
# ::edge	sure-02	ARG0	i	0.0	0.0.1	
# ::edge	sure-02	ARG1	or	0.0	0.0.2	
# ::edge	sure-02	polarity	-	0.0	0.0.0	
(c / contrast-01
      :ARG1 (s3 / sure-02 :polarity -
            :ARG0 (i / i)
            :ARG1 (o / or :mode interrogative
                  :op1 (c2 / cause-01
                        :ARG0 (c3 / change-01
                              :ARG1 (l / lifestyle)
                              :ARG1-of (m / mean-01
                                    :ARG2 (g / go-01
                                          :ARG3 (p3 / person
                                                :ARG0-of (s / study-01)
                                                :ARG1-of (f / free-04
                                                      :ARG2 (c4 / care-01)))
                                          :ARG4 (p2 / person
                                                :ARG1-of (g2 / graduate-01)
                                                :ARG1-of (e / employ-01 :polarity -)))))
                        :ARG1 (t / this))
                  :op2 (s2 / signal-07
                        :ARG0 t
                        :ARG1 (i2 / issue-02
                              :mod (o2 / other)))))
      :ARG2 (b / begin-01
            :ARG1 (b2 / bug-01
                  :ARG0 t
                  :ARG1 i
                  :ARG1-of (c5 / cause-01
                        :ARG0 (a / affect-01
                              :ARG0 t
                              :ARG1 (a2 / and
                                    :op1 (c6 / confident-01
                                          :ARG1 i)
                                    :op2 (h / happy
                                          :domain i)))))))

# ::node	0	contrast-01	12-13
# ::node	0.0	speak-01	2-3
# ::node	0.0.0	i	0-1
# ::node	0.0.1	it	8-9
# ::node	0.0.2	person	9-10
# ::node	0.0.2.0	few	5-6
# ::node	0.0.2.1	include-01	9-10
# ::node	0.0.2.1.0	person	
# ::node	0.0.2.1.0.0	have-rel-role-91	11-12
# ::node	0.0.2.1.0.0.0	parent	11-12
# ::node	0.1	think-01	15-16
# ::node	0.1.0	person	14-15
# ::node	0.1.0.0	all	14-15
# ::node	0.1.1	and	27-28
# ::node	0.1.1.0	go-02	22-23
# ::node	0.1.1.0.0	phase	26-27
# ::node	0.1.1.0.0.0	random	25-26
# ::node	0.1.1.1	recommend-01	30-31
# ::node	0.1.1.1.0	hold-off-08	31-32
# ::node	0.1.1.1.0.0	act-02	
# ::node	0.1.1.1.0.1	until	35-36
# ::node	0.1.1.1.0.1.0	clear-06	38-39
# ::node	0.1.1.1.0.1.0.0	problem	44-45
# ::node	0.1.1.1.0.1.0.0.0	serious	43-44
# ::node	0.1.2	same-01	17-18
# ::root	0	contrast-01
# ::edge	act-02	ARG0	i	0.1.1.1.0.0	0.0.0	
# ::edge	and	op1	go-02	0.1.1	0.1.1.0	
# ::edge	and	op1	recommend-01	0.1.1	0.1.1.1	
# ::edge	clear-06	ARG1	problem	0.1.1.1.0.1.0	0.1.1.1.0.1.0.0	
# ::edge	contrast-01	ARG1	speak-01	0	0.0	
# ::edge	contrast-01	ARG2	think-01	0	0.1	
# ::edge	go-02	ARG0	i	0.1.1.0	0.0.0	
# ::edge	go-02	ARG1	phase	0.1.1.0	0.1.1.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.2.1.0.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	parent	0.0.2.1.0.0	0.0.2.1.0.0.0	
# ::edge	hold-off-08	ARG0	i	0.1.1.1.0	0.0.0	
# ::edge	hold-off-08	ARG1	act-02	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	hold-off-08	time	until	0.1.1.1.0	0.1.1.1.0.1	
# ::edge	include-01	ARG1	person	0.0.2.1	0.0.2.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.2.1.0	0.0.2.1.0.0	
# ::edge	person	ARG2-of	include-01	0.0.2	0.0.2.1	
# ::edge	person	quant	all	0.1.0	0.1.0.0	
# ::edge	person	quant	few	0.0.2	0.0.2.0	
# ::edge	phase	mod	random	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	problem	mod	serious	0.1.1.1.0.1.0.0	0.1.1.1.0.1.0.0.0	
# ::edge	recommend-01	ARG1	hold-off-08	0.1.1.1	0.1.1.1.0	
# ::edge	recommend-01	ARG2	i	0.1.1.1	0.0.0	
# ::edge	speak-01	ARG0	i	0.0	0.0.0	
# ::edge	speak-01	ARG1	it	0.0	0.0.1	
# ::edge	speak-01	ARG2	person	0.0	0.0.2	
# ::edge	think-01	ARG0	person	0.1	0.1.0	
# ::edge	think-01	ARG1	and	0.1	0.1.1	
# ::edge	think-01	ARG1-of	same-01	0.1	0.1.2	
# ::edge	until	op1	clear-06	0.1.1.1.0.1	0.1.1.1.0.1.0	
(c / contrast-01
      :ARG1 (s / speak-01
            :ARG0 (i / i)
            :ARG1 (i2 / it)
            :ARG2 (p / person
                  :quant (f / few)
                  :ARG2-of (i3 / include-01
                        :ARG1 (p2 / person
                              :ARG0-of (h2 / have-rel-role-91
                                    :ARG1 i
                                    :ARG2 (p6 / parent))))))
      :ARG2 (t / think-01
            :ARG0 (p3 / person
                  :quant (a / all))
            :ARG1 (a2 / and
                  :op1 (g / go-02
                        :ARG0 i
                        :ARG1 (p4 / phase
                              :mod (r2 / random)))
                  :op1 (r / recommend-01
                        :ARG1 (h / hold-off-08
                              :ARG0 i
                              :ARG1 (a3 / act-02
                                    :ARG0 i)
                              :time (u / until
                                    :op1 (c2 / clear-06
                                          :ARG1 (p5 / problem
                                                :mod (s2 / serious)))))
                        :ARG2 i))
            :ARG1-of (s3 / same-01)))

# ::node	0	wonder-01	2-3
# ::node	0.0	thing	7-8
# ::node	0.0.0	good	6-7
# ::node	0.0.0.0	most	6-7
# ::node	0.0.1	do-02	9-10
# ::node	0.0.2	amr-unknown	
# ::node	0.1	so	0-1
# ::root	0	wonder-01
# ::edge	good	degree	most	0.0.0	0.0.0.0	
# ::edge	thing	ARG1-of	do-02	0.0	0.0.1	
# ::edge	thing	domain	amr-unknown	0.0	0.0.2	
# ::edge	thing	mod	good	0.0	0.0.0	
# ::edge	wonder-01	ARG1	thing	0	0.0	
# ::edge	wonder-01	mod	so	0	0.1	
(w / wonder-01
      :ARG1 (t / thing
            :mod (g / good
                  :degree (m / most))
            :ARG1-of (d / do-02)
            :domain (a / amr-unknown))
      :mod (s / so))

# ::node	0	and	6-7
# ::node	0.0	speak-01	0-1
# ::node	0.0.0	you	
# ::node	0.0.1	it	5-6
# ::node	0.0.2	doctor	3-4
# ::node	0.1	see-01	7-8
# ::node	0.1.0	take-off-07	14-15
# ::node	0.1.0.0	pill	12-13
# ::node	0.1.0.0.0	counter-01	9-10
# ::node	0.1.0.0.0.0	anxiety	11-12
# ::node	0.1.0.1	edge	16-17
# ::node	0.1.0.2	possible-01	13-14
# ::node	0.1.0.2.0	interrogative	
# ::node	0.1.0.3	thing	19-20
# ::root	0	and
# ::edge	and	op1	speak-01	0	0.0	
# ::edge	and	op2	see-01	0	0.1	
# ::edge	counter-01	ARG1	anxiety	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	pill	ARG0-of	counter-01	0.1.0.0	0.1.0.0.0	
# ::edge	possible-01	mode	interrogative	0.1.0.2	0.1.0.2.0	
# ::edge	see-01	ARG0	you	0.1	0.0.0	
# ::edge	see-01	ARG1	take-off-07	0.1	0.1.0	
# ::edge	speak-01	ARG0	you	0.0	0.0.0	
# ::edge	speak-01	ARG1	it	0.0	0.0.1	
# ::edge	speak-01	ARG2	doctor	0.0	0.0.2	
# ::edge	take-off-07	ARG0	pill	0.1.0	0.1.0.0	
# ::edge	take-off-07	ARG1	edge	0.1.0	0.1.0.1	
# ::edge	take-off-07	ARG1-of	possible-01	0.1.0	0.1.0.2	
# ::edge	take-off-07	source	thing	0.1.0	0.1.0.3	
(a / and
      :op1 (s / speak-01
            :ARG0 (y / you)
            :ARG1 (i / it)
            :ARG2 (d / doctor))
      :op2 (s2 / see-01
            :ARG0 y
            :ARG1 (t / take-off-07
                  :ARG0 (p / pill
                        :ARG0-of (c / counter-01
                              :ARG1 (a2 / anxiety)))
                  :ARG1 (e / edge)
                  :ARG1-of (p2 / possible-01 :mode interrogative)
                  :source (t2 / thing))))

# ::node	0	see-01	0-1
# ::node	0.0	interrogative	
# ::node	0.1	i	
# ::node	0.2	speak-01	4-5
# ::node	0.2.0	i	2-3
# ::node	0.2.1	person	7-8
# ::node	0.2.1.0	counsel-01	7-8
# ::node	0.2.2	possible-01	3-4
# ::root	0	see-01
# ::edge	person	ARG0-of	counsel-01	0.2.1	0.2.1.0	
# ::edge	see-01	ARG0	i	0	0.1	
# ::edge	see-01	ARG1	speak-01	0	0.2	
# ::edge	see-01	mode	interrogative	0	0.0	
# ::edge	speak-01	ARG0	i	0.2	0.2.0	
# ::edge	speak-01	ARG1-of	possible-01	0.2	0.2.2	
# ::edge	speak-01	ARG2	person	0.2	0.2.1	
(s / see-01 :mode interrogative
      :ARG0 (i2 / i)
      :ARG1 (s2 / speak-01
            :ARG0 (i / i)
            :ARG2 (p / person
                  :ARG0-of (c / counsel-01))
            :ARG1-of (p2 / possible-01)))

# ::node	0	or	0-1
# ::node	0.0	recommend-01	1-2
# ::node	0.0.0	interrogative	
# ::node	0.0.1	and	13-14
# ::node	0.0.1.0	take-01	3-4
# ::node	0.0.1.0.0	i	2-3
# ::node	0.0.1.0.1	thing	5-6
# ::node	0.0.1.0.1.0	advise-01	5-6
# ::node	0.0.1.0.1.0.0	person	
# ::node	0.0.1.0.1.0.0.0	close	9-10
# ::node	0.0.1.0.1.0.0.1	around	11-12
# ::node	0.0.1.1	eye-01	17-18
# ::node	0.0.1.1.0	anxiety	
# ::node	0.0.1.1.1	until	21-22
# ::node	0.0.1.1.1.0	become-01	23-24
# ::node	0.0.1.1.1.0.0	anxiety	20-21
# ::node	0.0.1.1.1.0.1	problem	25-26
# ::node	0.0.1.1.2	just	14-15
# ::root	0	or
# ::edge	advise-01	ARG0	person	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	and	op1	take-01	0.0.1	0.0.1.0	
# ::edge	and	op2	eye-01	0.0.1	0.0.1.1	
# ::edge	around	op1	i	0.0.1.0.1.0.0.1	0.0.1.0.0	
# ::edge	become-01	ARG1	anxiety	0.0.1.1.1.0	0.0.1.1.1.0.0	
# ::edge	become-01	ARG2	problem	0.0.1.1.1.0	0.0.1.1.1.0.1	
# ::edge	eye-01	ARG0	i	0.0.1.1	0.0.1.0.0	
# ::edge	eye-01	ARG1	anxiety	0.0.1.1	0.0.1.1.0	
# ::edge	eye-01	mod	just	0.0.1.1	0.0.1.1.2	
# ::edge	eye-01	time	until	0.0.1.1	0.0.1.1.1	
# ::edge	or	op2	recommend-01	0	0.0	
# ::edge	person	location	around	0.0.1.0.1.0.0	0.0.1.0.1.0.0.1	
# ::edge	person	mod	close	0.0.1.0.1.0.0	0.0.1.0.1.0.0.0	
# ::edge	recommend-01	ARG1	and	0.0	0.0.1	
# ::edge	recommend-01	ARG2	i	0.0	0.0.1.0.0	
# ::edge	recommend-01	mode	interrogative	0.0	0.0.0	
# ::edge	take-01	ARG0	i	0.0.1.0	0.0.1.0.0	
# ::edge	take-01	ARG1	thing	0.0.1.0	0.0.1.0.1	
# ::edge	thing	ARG2-of	advise-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	until	op1	become-01	0.0.1.1.1	0.0.1.1.1.0	
(o / or
      :op2 (r / recommend-01 :mode interrogative
            :ARG1 (a / and
                  :op1 (t / take-01
                        :ARG0 (i / i)
                        :ARG1 (t2 / thing
                              :ARG2-of (a2 / advise-01
                                    :ARG0 (p / person
                                          :mod (c / close)
                                          :location (a3 / around
                                                :op1 i)))))
                  :op2 (e / eye-01
                        :ARG0 i
                        :ARG1 (a5 / anxiety)
                        :time (u / until
                              :op1 (b / become-01
                                    :ARG1 (a4 / anxiety)
                                    :ARG2 (p2 / problem)))
                        :mod (j / just)))
            :ARG2 i))

# ::node	0	contrast-01	22-23
# ::node	0.0	get-03	7-8
# ::node	0.0.0	i	1-2
# ::node	0.0.1	anxious	10-11
# ::node	0.0.1.0	very	8-9
# ::node	0.0.1.1	go-01	16-17
# ::node	0.0.1.1.0	away	17-18
# ::node	0.0.1.1.1	sort	14-15
# ::node	0.0.1.1.2	after	18-19
# ::node	0.0.1.1.2.0	or	
# ::node	0.0.1.1.2.0.0	temporal-quantity	
# ::node	0.0.1.1.2.0.0.0	15	
# ::node	0.0.1.1.2.0.0.1	minute	
# ::node	0.0.1.1.2.0.1	temporal-quantity	
# ::node	0.0.1.1.2.0.1.0	30	
# ::node	0.0.1.1.2.0.1.1	minute	
# ::node	0.0.2	check-01	4-5
# ::node	0.0.2.0	-	
# ::node	0.1	anxiety	25-26
# ::node	0.1.0	much	28-29
# ::node	0.1.0.0	cause-01	0-1
# ::node	0.1.0.0.0	possible-01	
# ::node	0.1.0.0.0.0	-	
# ::node	0.1.0.0.0.1	wait-01	33-34
# ::node	0.1.0.0.0.1.0	long-03	35-36
# ::node	0.1.0.0.0.1.0.0	that	29-30
# ::node	0.1.1	often	23-24
# ::root	0	contrast-01
# ::edge	after	op1	or	0.0.1.1.2	0.0.1.1.2.0	
# ::edge	anxiety	quant	much	0.1	0.1.0	
# ::edge	anxiety	time	often	0.1	0.1.1	
# ::edge	anxious	ARG1-of	go-01	0.0.1	0.0.1.1	
# ::edge	anxious	degree	very	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG1	possible-01	0.1.0.0	0.1.0.0.0	
# ::edge	check-01	ARG0	i	0.0.2	0.0.0	
# ::edge	check-01	polarity	-	0.0.2	0.0.2.0	
# ::edge	contrast-01	ARG1	get-03	0	0.0	
# ::edge	contrast-01	ARG2	anxiety	0	0.1	
# ::edge	get-03	ARG1	i	0.0	0.0.0	
# ::edge	get-03	ARG2	anxious	0.0	0.0.1	
# ::edge	get-03	condition	check-01	0.0	0.0.2	
# ::edge	go-01	direction	away	0.0.1.1	0.0.1.1.0	
# ::edge	go-01	mod	sort	0.0.1.1	0.0.1.1.1	
# ::edge	go-01	time	after	0.0.1.1	0.0.1.1.2	
# ::edge	long-03	degree	that	0.1.0.0.0.1.0	0.1.0.0.0.1.0.0	
# ::edge	much	ARG0-of	cause-01	0.1.0	0.1.0.0	
# ::edge	or	op1	temporal-quantity	0.0.1.1.2.0	0.0.1.1.2.0.0	
# ::edge	or	op2	temporal-quantity	0.0.1.1.2.0	0.0.1.1.2.0.1	
# ::edge	possible-01	ARG1	wait-01	0.1.0.0.0	0.1.0.0.0.1	
# ::edge	possible-01	polarity	-	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	temporal-quantity	quant	15	0.0.1.1.2.0.0	0.0.1.1.2.0.0.0	
# ::edge	temporal-quantity	quant	30	0.0.1.1.2.0.1	0.0.1.1.2.0.1.0	
# ::edge	temporal-quantity	unit	minute	0.0.1.1.2.0.0	0.0.1.1.2.0.0.1	
# ::edge	temporal-quantity	unit	minute	0.0.1.1.2.0.1	0.0.1.1.2.0.1.1	
# ::edge	wait-01	ARG1	i	0.1.0.0.0.1	0.0.0	
# ::edge	wait-01	ARG1-of	long-03	0.1.0.0.0.1	0.1.0.0.0.1.0	
(c / contrast-01
      :ARG1 (g / get-03
            :ARG1 (i / i)
            :ARG2 (a / anxious
                  :degree (v / very)
                  :ARG1-of (g2 / go-01
                        :direction (a2 / away)
                        :mod (s / sort)
                        :time (a3 / after
                              :op1 (o / or
                                    :op1 (t / temporal-quantity :quant 15
                                          :unit (m / minute))
                                    :op2 (t2 / temporal-quantity :quant 30
                                          :unit (m2 / minute))))))
            :condition (c2 / check-01 :polarity -
                  :ARG0 i))
      :ARG2 (a4 / anxiety
            :quant (m3 / much
                  :ARG0-of (c3 / cause-01
                        :ARG1 (p / possible-01 :polarity -
                              :ARG1 (w / wait-01
                                    :ARG1 i
                                    :ARG1-of (l / long-03
                                          :degree (t3 / that))))))
            :time (o2 / often)))

# ::node	0	contrast-01	6-7
# ::node	0.0	cause-01	7-8
# ::node	0.0.0	-	
# ::node	0.0.1	threaten-01	4-5
# ::node	0.0.1.0	he	
# ::node	0.1	cause-01	1-2
# ::node	0.1.0	concern-02	
# ::node	0.1.0.0	-	
# ::node	0.1.0.1	life	10-11
# ::node	0.1.0.1.0	personal-02	9-10
# ::node	0.1.0.1.0.0	you	
# ::root	0	contrast-01
# ::edge	cause-01	ARG0	concern-02	0.1	0.1.0	
# ::edge	cause-01	ARG0	threaten-01	0.0	0.0.1	
# ::edge	cause-01	polarity	-	0.0	0.0.0	
# ::edge	concern-02	ARG0	he	0.1.0	0.0.1.0	
# ::edge	concern-02	ARG1	life	0.1.0	0.1.0.1	
# ::edge	concern-02	polarity	-	0.1.0	0.1.0.0	
# ::edge	contrast-01	ARG1	cause-01	0	0.0	
# ::edge	contrast-01	ARG2	cause-01	0	0.1	
# ::edge	life	ARG1-of	personal-02	0.1.0.1	0.1.0.1.0	
# ::edge	personal-02	ARG2	you	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	threaten-01	ARG0	he	0.0.1	0.0.1.0	
(c / contrast-01
      :ARG1 (c2 / cause-01 :polarity -
            :ARG0 (t / threaten-01
                  :ARG0 (h / he)))
      :ARG2 (c3 / cause-01
            :ARG0 (c4 / concern-02 :polarity -
                  :ARG0 h
                  :ARG1 (l / life
                        :ARG1-of (p / personal-02
                              :ARG2 (y / you))))))

# ::node	0	multi-sentence	
# ::node	0.0	addict-01	2-3
# ::node	0.0.0	i	0-1
# ::node	0.1	cut-01	9-10
# ::node	0.1.0	again	10-11
# ::node	0.1.1	heal-01	7-8
# ::node	0.1.1.0	one	6-7
# ::node	0.1.1.1	ever	5-6
# ::root	0	multi-sentence
# ::edge	addict-01	ARG1	i	0.0	0.0.0	
# ::edge	cut-01	ARG0	i	0.1	0.0.0	
# ::edge	cut-01	mod	again	0.1	0.1.0	
# ::edge	cut-01	time	heal-01	0.1	0.1.1	
# ::edge	heal-01	ARG1	one	0.1.1	0.1.1.0	
# ::edge	heal-01	time	ever	0.1.1	0.1.1.1	
# ::edge	multi-sentence	snt1	addict-01	0	0.0	
# ::edge	multi-sentence	snt2	cut-01	0	0.1	
(m / multi-sentence
      :snt1 (a / addict-01
            :ARG1 (i / i))
      :snt2 (c / cut-01
            :ARG0 i
            :mod (a2 / again)
            :time (h / heal-01
                  :ARG1 (o / one)
                  :time (e / ever))))

# ::node	0	recommend-01	
# ::node	0.0	i	0-1
# ::node	0.1	go-02	4-5
# ::node	0.1.0	you	3-4
# ::node	0.1.1	see-01	6-7
# ::node	0.1.1.0	person	
# ::node	0.1.1.0.0	have-rel-role-91	8-9
# ::node	0.1.1.0.0.0	doctor	8-9
# ::node	0.1.1.1	too	9-10
# ::root	0	recommend-01
# ::edge	go-02	ARG0	you	0.1	0.1.0	
# ::edge	go-02	purpose	see-01	0.1	0.1.1	
# ::edge	have-rel-role-91	ARG1	you	0.1.1.0.0	0.1.0	
# ::edge	have-rel-role-91	ARG2	doctor	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1.0	0.1.1.0.0	
# ::edge	recommend-01	ARG0	i	0	0.0	
# ::edge	recommend-01	ARG1	go-02	0	0.1	
# ::edge	recommend-01	ARG2	you	0	0.1.0	
# ::edge	see-01	ARG0	you	0.1.1	0.1.0	
# ::edge	see-01	ARG1	person	0.1.1	0.1.1.0	
# ::edge	see-01	mod	too	0.1.1	0.1.1.1	
(r / recommend-01
      :ARG0 (i / i)
      :ARG1 (g / go-02
            :ARG0 (y / you)
            :purpose (s / see-01
                  :ARG0 y
                  :ARG1 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 y
                              :ARG2 (d / doctor)))
                  :mod (t / too)))
      :ARG2 y)

# ::node	0	think-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	become-01	3-4
# ::node	0.1.0	it	2-3
# ::node	0.1.1	problem	6-7
# ::node	0.1.1.0	real	5-6
# ::node	0.2	start-01	10-11
# ::node	0.2.0	interrupt-01	13-14
# ::node	0.2.0.0	obsess-01	9-10
# ::node	0.2.0.1	routine	16-17
# ::node	0.2.0.1.0	you	
# ::node	0.2.0.1.1	rate-entity-91	
# ::node	0.2.0.1.1.0	temporal-quantity	
# ::node	0.2.0.1.1.0.0	1	
# ::node	0.2.0.1.1.0.1	day	
# ::node	0.2.0.2	really	12-13
# ::root	0	think-01
# ::edge	become-01	ARG1	it	0.1	0.1.0	
# ::edge	become-01	ARG2	problem	0.1	0.1.1	
# ::edge	interrupt-01	ARG0	obsess-01	0.2.0	0.2.0.0	
# ::edge	interrupt-01	ARG1	routine	0.2.0	0.2.0.1	
# ::edge	interrupt-01	mod	really	0.2.0	0.2.0.2	
# ::edge	problem	mod	real	0.1.1	0.1.1.0	
# ::edge	rate-entity-91	ARG2	temporal-quantity	0.2.0.1.1	0.2.0.1.1.0	
# ::edge	routine	frequency	rate-entity-91	0.2.0.1	0.2.0.1.1	
# ::edge	routine	poss	you	0.2.0.1	0.2.0.1.0	
# ::edge	start-01	ARG1	interrupt-01	0.2	0.2.0	
# ::edge	temporal-quantity	quant	1	0.2.0.1.1.0	0.2.0.1.1.0.0	
# ::edge	temporal-quantity	unit	day	0.2.0.1.1.0	0.2.0.1.1.0.1	
# ::edge	think-01	ARG0	i	0	0.0	
# ::edge	think-01	ARG1	become-01	0	0.1	
# ::edge	think-01	time	start-01	0	0.2	
(t / think-01
      :ARG0 (i / i)
      :ARG1 (b / become-01
            :ARG1 (i2 / it)
            :ARG2 (p / problem
                  :mod (r / real)))
      :time (s / start-01
            :ARG1 (i3 / interrupt-01
                  :ARG0 (o / obsess-01)
                  :ARG1 (r2 / routine
                        :poss (y / you)
                        :frequency (r4 / rate-entity-91
                              :ARG2 (t2 / temporal-quantity :quant 1
                                    :unit (d / day))))
                  :mod (r3 / really))))

# ::node	0	and	9-10
# ::node	0.0	cause-01	
# ::node	0.0.0	crazy-03	4-5
# ::node	0.0.0.0	-	
# ::node	0.0.0.1	you	0-1
# ::node	0.0.0.2	definite	1-2
# ::node	0.0.1	worry-02	8-9
# ::node	0.0.1.0	-	
# ::node	0.0.1.1	imperative	
# ::node	0.1	sure-02	20-21
# ::node	0.1.0	i	18-19
# ::node	0.1.1	understand-01	14-15
# ::node	0.1.1.0	person	
# ::node	0.1.1.0.0	have-rel-role-91	
# ::node	0.1.1.0.0.0	practitioner	
# ::node	0.1.1.0.0.0.0	general	
# ::node	0.1.1.1	issue-02	17-18
# ::root	0	and
# ::edge	and	op1	cause-01	0	0.0	
# ::edge	and	op2	sure-02	0	0.1	
# ::edge	cause-01	ARG0	crazy-03	0.0	0.0.0	
# ::edge	cause-01	ARG1	worry-02	0.0	0.0.1	
# ::edge	crazy-03	ARG1	you	0.0.0	0.0.0.1	
# ::edge	crazy-03	mod	definite	0.0.0	0.0.0.2	
# ::edge	crazy-03	polarity	-	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG1	you	0.1.1.0.0	0.0.0.1	
# ::edge	have-rel-role-91	ARG2	practitioner	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1.0	0.1.1.0.0	
# ::edge	practitioner	mod	general	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	sure-02	ARG0	i	0.1	0.1.0	
# ::edge	sure-02	ARG1	understand-01	0.1	0.1.1	
# ::edge	understand-01	ARG0	person	0.1.1	0.1.1.0	
# ::edge	understand-01	ARG1	issue-02	0.1.1	0.1.1.1	
# ::edge	worry-02	ARG0	you	0.0.1	0.0.0.1	
# ::edge	worry-02	mode	imperative	0.0.1	0.0.1.1	
# ::edge	worry-02	polarity	-	0.0.1	0.0.1.0	
(a / and
      :op1 (c / cause-01
            :ARG0 (c2 / crazy-03 :polarity -
                  :ARG1 (y / you)
                  :mod (d / definite))
            :ARG1 (w / worry-02 :polarity - :mode imperative
                  :ARG0 y))
      :op2 (s / sure-02
            :ARG0 (i / i)
            :ARG1 (u / understand-01
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 y
                              :ARG2 (p / practitioner
                                    :mod (g / general))))
                  :ARG1 (i2 / issue-02))))

# ::node	0	and	10-11
# ::node	0.0	go-02	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	therapy	3-4
# ::node	0.0.2	reason	7-8
# ::node	0.0.2.0	other	6-7
# ::node	0.0.2.1	also	8-9
# ::node	0.1	encourage-01	13-14
# ::node	0.1.0	they	11-12
# ::node	0.1.1	and	31-32
# ::node	0.1.1.0	pick-01	16-17
# ::node	0.1.1.0.0	number	18-19
# ::node	0.1.1.0.0.0	less	27-28
# ::node	0.1.1.0.0.0.0	20	29-30
# ::node	0.1.1.0.0.0.1	obvious	24-25
# ::node	0.1.1.0.0.1	check-01	22-23
# ::node	0.1.1.1	stick-01	33-34
# ::node	0.1.1.2	cut-down-11	
# ::root	0	and
# ::edge	and	op1	go-02	0	0.0	
# ::edge	and	op1	pick-01	0.1.1	0.1.1.0	
# ::edge	and	op2	encourage-01	0	0.1	
# ::edge	and	op2	stick-01	0.1.1	0.1.1.1	
# ::edge	and	op3	cut-down-11	0.1.1	0.1.1.2	
# ::edge	check-01	ARG0	i	0.1.1.0.0.1	0.0.0	
# ::edge	cut-down-11	ARG0	i	0.1.1.2	0.0.0	
# ::edge	encourage-01	ARG0	they	0.1	0.1.0	
# ::edge	encourage-01	ARG1	i	0.1	0.0.0	
# ::edge	encourage-01	ARG2	and	0.1	0.1.1	
# ::edge	go-02	ARG0	i	0.0	0.0.0	
# ::edge	go-02	ARG4	therapy	0.0	0.0.1	
# ::edge	go-02	purpose	reason	0.0	0.0.2	
# ::edge	less	compared-to	20	0.1.1.0.0.0	0.1.1.0.0.0.0	
# ::edge	less	mod	obvious	0.1.1.0.0.0	0.1.1.0.0.0.1	
# ::edge	number	frequency-of	check-01	0.1.1.0.0	0.1.1.0.0.1	
# ::edge	number	mod	less	0.1.1.0.0	0.1.1.0.0.0	
# ::edge	pick-01	ARG0	i	0.1.1.0	0.0.0	
# ::edge	pick-01	ARG1	number	0.1.1.0	0.1.1.0.0	
# ::edge	reason	mod	also	0.0.2	0.0.2.1	
# ::edge	reason	mod	other	0.0.2	0.0.2.0	
# ::edge	stick-01	ARG1	i	0.1.1.1	0.0.0	
# ::edge	stick-01	ARG2	number	0.1.1.1	0.1.1.0.0	
(a / and
      :op1 (g / go-02
            :ARG0 (i / i)
            :ARG4 (t / therapy)
            :purpose (r / reason
                  :mod (o / other)
                  :mod (a2 / also)))
      :op2 (e / encourage-01
            :ARG0 (t2 / they)
            :ARG1 i
            :ARG2 (a3 / and
                  :op1 (p / pick-01
                        :ARG0 i
                        :ARG1 (n2 / number
                              :mod (l / less :compared-to 20
                                    :mod (o2 / obvious))
                              :frequency-of (c2 / check-01
                                    :ARG0 i)))
                  :op2 (s / stick-01
                        :ARG1 i
                        :ARG2 n2)
                  :op3 (c / cut-down-11
                        :ARG0 i))))

# ::node	0	and	
# ::node	0.0	think-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	idea	3-4
# ::node	0.0.1.0	teach-01	6-7
# ::node	0.1	okay-04	13-14
# ::node	0.1.0	still	11-12
# ::node	0.1.1	or	20-21
# ::node	0.1.1.0	check-01	
# ::node	0.1.1.0.0	5	18-19
# ::node	0.1.1.1	check-01	17-18
# ::node	0.1.1.1.0	20	21-22
# ::root	0	and
# ::edge	and	op1	think-01	0	0.0	
# ::edge	and	op2	okay-04	0	0.1	
# ::edge	check-01	ARG0	i	0.1.1.0	0.0.0	
# ::edge	check-01	ARG0	i	0.1.1.1	0.0.0	
# ::edge	check-01	frequency	20	0.1.1.1	0.1.1.1.0	
# ::edge	check-01	frequency	5	0.1.1.0	0.1.1.0.0	
# ::edge	idea	domain	teach-01	0.0.1	0.0.1.0	
# ::edge	okay-04	ARG1	i	0.1	0.0.0	
# ::edge	okay-04	condition	or	0.1	0.1.1	
# ::edge	okay-04	mod	still	0.1	0.1.0	
# ::edge	or	op1	check-01	0.1.1	0.1.1.0	
# ::edge	or	op2	check-01	0.1.1	0.1.1.1	
# ::edge	teach-01	ARG2	i	0.0.1.0	0.0.0	
# ::edge	think-01	ARG0	i	0.0	0.0.0	
# ::edge	think-01	ARG1	idea	0.0	0.0.1	
(a / and
      :op1 (t / think-01
            :ARG0 (i / i)
            :ARG1 (i2 / idea
                  :domain (t2 / teach-01
                        :ARG2 i)))
      :op2 (o / okay-04
            :ARG1 i
            :mod (s / still)
            :condition (o2 / or
                  :op1 (c / check-01 :frequency 5
                        :ARG0 i)
                  :op2 (c2 / check-01 :frequency 20
                        :ARG0 i))))

# ::node	0	decrease-01	14-15
# ::node	0.0	gradual	13-14
# ::node	0.1	cause-01	
# ::node	0.1.0	disappear-01	22-23
# ::node	0.1.0.0	disease	20-21
# ::node	0.1.0.0.0	"Obsessive–compulsive_disorder"	
# ::node	0.1.0.0.1	name	20-21
# ::node	0.1.0.0.1.0	"OCD"	20-21
# ::node	0.1.0.1	overtime	18-19
# ::node	0.1.0.2	hope-01	16-17
# ::node	0.2	increase-01	6-7
# ::node	0.2.0	level	4-5
# ::node	0.2.0.0	anxiety	3-4
# ::node	0.2.0.0.0	you	
# ::node	0.2.1	duration	9-10
# ::root	0	decrease-01
# ::edge	anxiety	poss	you	0.2.0.0	0.2.0.0.0	
# ::edge	cause-01	ARG1	disappear-01	0.1	0.1.0	
# ::edge	decrease-01	ARG0-of	cause-01	0	0.1	
# ::edge	decrease-01	ARG1	level	0	0.2.0	
# ::edge	decrease-01	concession	increase-01	0	0.2	
# ::edge	decrease-01	manner	gradual	0	0.0	
# ::edge	disappear-01	ARG1	disease	0.1.0	0.1.0.0	
# ::edge	disappear-01	ARG1-of	hope-01	0.1.0	0.1.0.2	
# ::edge	disappear-01	time	overtime	0.1.0	0.1.0.1	
# ::edge	disease	name	name	0.1.0.0	0.1.0.0.1	
# ::edge	disease	poss	you	0.1.0.0	0.2.0.0.0	
# ::edge	disease	wiki	"Obsessive–compulsive_disorder"	0.1.0.0	0.1.0.0.0	
# ::edge	increase-01	ARG1	level	0.2	0.2.0	
# ::edge	increase-01	duration	duration	0.2	0.2.1	
# ::edge	level	mod	anxiety	0.2.0	0.2.0.0	
# ::edge	name	op1	"OCD"	0.1.0.0.1	0.1.0.0.1.0	
(d2 / decrease-01
      :ARG1 l
      :manner (g / gradual)
      :ARG0-of (c2 / cause-01
            :ARG1 (d3 / disappear-01
                  :ARG1 (d4 / disease :wiki "Obsessive–compulsive_disorder" :name (n / name :op1 "OCD")
                        :poss y)
                  :time (o / overtime)
                  :ARG1-of (h / hope-01)))
      :concession (i / increase-01
            :ARG1 (l / level
                  :mod (a / anxiety
                        :poss (y / you)))
            :duration (d / duration)))

# ::node	0	sound-01	4-5
# ::node	0.0	that	2-3
# ::node	0.1	anxious	9-10
# ::node	0.1.0	over	8-9
# ::node	0.1.1	you	6-7
# ::node	0.1.2	instead-of-91	
# ::node	0.1.2.0	have-03	14-15
# ::node	0.1.2.0.0	disease	17-18
# ::node	0.1.2.0.0.0	"Obsessive–compulsive_disorder"	
# ::node	0.1.2.0.0.1	name	17-18
# ::node	0.1.2.0.0.1.0	"OCD"	17-18
# ::node	0.1.2.0.0.2	bad-05	16-17
# ::node	0.1.2.0.0.2.0	really	15-16
# ::node	0.2	i	
# ::node	0.3	just	3-4
# ::root	0	sound-01
# ::edge	anxious	ARG1-of	instead-of-91	0.1	0.1.2	
# ::edge	anxious	degree	over	0.1	0.1.0	
# ::edge	anxious	domain	you	0.1	0.1.1	
# ::edge	bad-05	degree	really	0.1.2.0.0.2	0.1.2.0.0.2.0	
# ::edge	disease	ARG1-of	bad-05	0.1.2.0.0	0.1.2.0.0.2	
# ::edge	disease	name	name	0.1.2.0.0	0.1.2.0.0.1	
# ::edge	disease	wiki	"Obsessive–compulsive_disorder"	0.1.2.0.0	0.1.2.0.0.0	
# ::edge	have-03	ARG0	you	0.1.2.0	0.1.1	
# ::edge	have-03	ARG1	disease	0.1.2.0	0.1.2.0.0	
# ::edge	instead-of-91	ARG2	have-03	0.1.2	0.1.2.0	
# ::edge	name	op1	"OCD"	0.1.2.0.0.1	0.1.2.0.0.1.0	
# ::edge	sound-01	ARG1	that	0	0.0	
# ::edge	sound-01	ARG2	anxious	0	0.1	
# ::edge	sound-01	ARG3	i	0	0.2	
# ::edge	sound-01	mod	just	0	0.3	
(s / sound-01
      :ARG1 (t / that)
      :ARG2 (a / anxious
            :degree (o / over)
            :domain (y / you)
            :ARG1-of (i2 / instead-of-91
                  :ARG2 (h / have-03
                        :ARG0 y
                        :ARG1 (d / disease :wiki "Obsessive–compulsive_disorder" :name (n / name :op1 "OCD")
                              :ARG1-of (b / bad-05
                                    :degree (r / really))))))
      :ARG3 (i / i)
      :mod (j / just))

# ::node	0	obsess-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	very	2-3
# ::node	0.2	get-up-26	
# ::node	0.2.0	rate-entity-91	
# ::node	0.2.0.0	20	11-12
# ::node	0.2.0.1	temporal-quantity	14-15
# ::node	0.2.0.1.0	1	
# ::node	0.2.0.1.1	night	14-15
# ::node	0.2.1	check-01	16-17
# ::node	0.2.1.0	lock-01	18-19
# ::node	0.2.1.0.0	lock	24-25
# ::node	0.2.1.0.0.0	house	21-22
# ::node	0.2.1.0.0.1	all	23-24
# ::node	0.2.1.0.1	particular	26-27
# ::root	0	obsess-01
# ::edge	check-01	ARG0	i	0.2.1	0.0	
# ::edge	check-01	ARG1	lock-01	0.2.1	0.2.1.0	
# ::edge	get-up-26	ARG1	i	0.2	0.0	
# ::edge	get-up-26	frequency	rate-entity-91	0.2	0.2.0	
# ::edge	get-up-26	purpose	check-01	0.2	0.2.1	
# ::edge	house	poss	i	0.2.1.0.0.0	0.0	
# ::edge	lock	location	house	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	lock	quant	all	0.2.1.0.0	0.2.1.0.0.1	
# ::edge	lock-01	ARG1	lock	0.2.1.0	0.2.1.0.0	
# ::edge	lock-01	manner	particular	0.2.1.0	0.2.1.0.1	
# ::edge	obsess-01	ARG0	i	0	0.0	
# ::edge	obsess-01	degree	very	0	0.1	
# ::edge	obsess-01	extent	get-up-26	0	0.2	
# ::edge	rate-entity-91	ARG1	20	0.2.0	0.2.0.0	
# ::edge	rate-entity-91	ARG2	temporal-quantity	0.2.0	0.2.0.1	
# ::edge	temporal-quantity	quant	1	0.2.0.1	0.2.0.1.0	
# ::edge	temporal-quantity	unit	night	0.2.0.1	0.2.0.1.1	
(o / obsess-01
      :ARG0 (i / i)
      :degree (v / very)
      :extent (g / get-up-26
            :ARG1 i
            :frequency (r / rate-entity-91
                  :ARG1 20
                  :ARG2 (t / temporal-quantity :quant 1
                        :unit (n / night)))
            :purpose (c / check-01
                  :ARG0 i
                  :ARG1 (l / lock-01
                        :ARG1 (l2 / lock
                              :location (h / house
                                    :poss i)
                              :quant (a / all))
                        :manner (p / particular)))))

# ::node	0	convince-01	9-10
# ::node	0.0	i	2-3
# ::node	0.1	lock-01	
# ::node	0.1.0	-	13-13
# ::node	0.1.1	they	4-5
# ::node	0.2	sometimes	0-1
# ::node	0.3	know-01	3-4
# ::node	0.3.0	lock-01	6-7
# ::root	0	convince-01
# ::edge	convince-01	ARG1	i	0	0.0	
# ::edge	convince-01	ARG2	lock-01	0	0.1	
# ::edge	convince-01	concession	know-01	0	0.3	
# ::edge	convince-01	time	sometimes	0	0.2	
# ::edge	know-01	ARG0	i	0.3	0.0	
# ::edge	know-01	ARG1	lock-01	0.3	0.3.0	
# ::edge	lock-01	ARG1	they	0.1	0.1.1	
# ::edge	lock-01	ARG1	they	0.3.0	0.1.1	
# ::edge	lock-01	polarity	-	0.1	0.1.0	
(c / convince-01
      :ARG1 (i / i)
      :ARG2 (l / lock-01 :polarity -
            :ARG1 (t / they))
      :time (s / sometimes)
      :concession (k / know-01
            :ARG0 i
            :ARG1 (l2 / lock-01
                  :ARG1 t)))

# ::node	0	and	
# ::node	0.0	good	7-8
# ::node	0.0.0	more	
# ::node	0.0.0.0	lot	6-7
# ::node	0.0.1	i	2-3
# ::node	0.0.2	so-far	
# ::node	0.1	think-01	10-11
# ::node	0.1.0	hopeful-03	14-15
# ::node	0.1.0.0	improve-01	16-17
# ::node	0.1.0.0.0	anyone	18-19
# ::node	0.1.0.0.0.0	want-01	20-21
# ::node	0.1.0.1	definite	13-14
# ::root	0	and
# ::edge	and	op1	good	0	0.0	
# ::edge	and	op2	think-01	0	0.1	
# ::edge	anyone	ARG0-of	want-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	good	degree	more	0.0	0.0.0	
# ::edge	good	domain	i	0.0	0.0.1	
# ::edge	good	time	so-far	0.0	0.0.2	
# ::edge	hopeful-03	ARG1	improve-01	0.1.0	0.1.0.0	
# ::edge	hopeful-03	mod	definite	0.1.0	0.1.0.1	
# ::edge	improve-01	ARG0	anyone	0.1.0.0	0.1.0.0.0	
# ::edge	more	quant	lot	0.0.0	0.0.0.0	
# ::edge	think-01	ARG0	i	0.1	0.0.1	
# ::edge	think-01	ARG1	hopeful-03	0.1	0.1.0	
# ::edge	want-01	ARG1	improve-01	0.1.0.0.0.0	0.1.0.0	
(a2 / and
      :op1 (g / good
            :degree (m / more
                  :quant (l / lot))
            :domain (i / i)
            :time (s / so-far))
      :op2 (t / think-01
            :ARG0 i
            :ARG1 (h / hopeful-03
                  :ARG1 (i2 / improve-01
                        :ARG0 (a / anyone
                              :ARG0-of (w / want-01
                                    :ARG1 i2)))
                  :mod (d / definite))))

# ::node	0	thank-01	0-1
# ::node	0.0	i	
# ::node	0.1	you	1-2
# ::node	0.2	read-01	3-4
# ::root	0	thank-01
# ::edge	read-01	ARG0	you	0.2	0.1	
# ::edge	thank-01	ARG0	i	0	0.0	
# ::edge	thank-01	ARG1	you	0	0.1	
# ::edge	thank-01	ARG2	read-01	0	0.2	
(t / thank-01
      :ARG0 (i / i)
      :ARG1 (y / you)
      :ARG2 (r / read-01
            :ARG0 y))

# ::node	0	or	5-6
# ::node	0.0	you	1-2
# ::node	0.0.0	drug	4-5
# ::node	0.0.0.0	any	7-8
# ::node	0.1	get-01	6-7
# ::node	0.1.0	therapy	8-9
# ::node	0.1.0.0	any	3-4
# ::root	0	or
# ::edge	drug	mod	any	0.0.0	0.0.0.0	
# ::edge	get-01	ARG0	drug	0.1	0.0.0	
# ::edge	get-01	ARG1	therapy	0.1	0.1.0	
# ::edge	or	op1	you	0	0.0	
# ::edge	or	op2	get-01	0	0.1	
# ::edge	therapy	mod	any	0.1.0	0.1.0.0	
# ::edge	you	prep-on	drug	0.0	0.0.0	
(o / or
      :op1 (y2 / you
            :prep-on (d / drug
                  :mod (a / any)))
      :op2 (g / get-01
            :ARG0 d
            :ARG1 (t / therapy
                  :mod (a2 / any))))

# ::node	0	multi-sentence	
# ::node	0.0	want-01	2-3
# ::node	0.0.0	-	
# ::node	0.0.1	i	0-1
# ::node	0.0.2	hurt-01	4-5
# ::node	0.0.2.0	he	
# ::node	0.1	want-01	9-10
# ::node	0.1.0	-	
# ::node	0.1.1	i	7-8
# ::node	0.1.2	hurt-01	12-13
# ::node	0.1.2.0	he	
# ::root	0	multi-sentence
# ::edge	hurt-01	ARG0	he	0.1.2	0.1.2.0	
# ::edge	hurt-01	ARG0	i	0.0.2	0.0.1	
# ::edge	hurt-01	ARG1	he	0.0.2	0.0.2.0	
# ::edge	hurt-01	ARG1	he	0.1.2	0.1.2.0	
# ::edge	multi-sentence	snt1	want-01	0	0.0	
# ::edge	multi-sentence	snt2	want-01	0	0.1	
# ::edge	want-01	ARG0	i	0.0	0.0.1	
# ::edge	want-01	ARG0	i	0.1	0.1.1	
# ::edge	want-01	ARG1	hurt-01	0.0	0.0.2	
# ::edge	want-01	ARG1	hurt-01	0.1	0.1.2	
# ::edge	want-01	polarity	-	0.0	0.0.0	
# ::edge	want-01	polarity	-	0.1	0.1.0	
(m / multi-sentence
      :snt1 (w / want-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (h / hurt-01
                  :ARG0 i
                  :ARG1 (h2 / he)))
      :snt2 (w2 / want-01 :polarity -
            :ARG0 (i2 / i)
            :ARG1 (h3 / hurt-01
                  :ARG0 (h4 / he)
                  :ARG1 h4)))

# ::node	0	do-02	1-2
# ::node	0.0	i	2-3
# ::node	0.1	amr-unknown	
# ::root	0	do-02
# ::edge	do-02	ARG0	i	0	0.0	
# ::edge	do-02	ARG1	amr-unknown	0	0.1	
(d / do-02
      :ARG0 (i / i)
      :ARG1 (a / amr-unknown))

# ::node	0	possible-01	5-6
# ::node	0.0	help-01	6-7
# ::node	0.0.0	person	
# ::node	0.0.1	you	1-2
# ::node	0.1	tell-01	2-3
# ::root	0	possible-01
# ::edge	help-01	ARG0	person	0.0	0.0.0	
# ::edge	help-01	ARG1	you	0.0	0.0.1	
# ::edge	possible-01	ARG1	help-01	0	0.0	
# ::edge	possible-01	condition	tell-01	0	0.1	
# ::edge	tell-01	ARG0	you	0.1	0.0.1	
# ::edge	tell-01	ARG2	person	0.1	0.0.0	
(p / possible-01
      :ARG1 (h / help-01
            :ARG0 (p2 / person)
            :ARG1 (y / you))
      :condition (t / tell-01
            :ARG0 y
            :ARG2 p2))

# ::node	0	likely-01	9-10
# ::node	0.0	worsen-01	13-14
# ::node	0.0.0	it	7-8
# ::node	0.0.1	only	11-12
# ::node	0.1	keep-01	2-3
# ::node	0.1.0	you	1-2
# ::node	0.1.1	it	3-4
# ::node	0.1.1.0	bottle-up-02	4-5
# ::node	0.1.1.1	inside	6-7
# ::root	0	likely-01
# ::edge	it	ARG1-of	bottle-up-02	0.1.1	0.1.1.0	
# ::edge	it	location	inside	0.1.1	0.1.1.1	
# ::edge	keep-01	ARG0	you	0.1	0.1.0	
# ::edge	keep-01	ARG1	it	0.1	0.1.1	
# ::edge	likely-01	ARG1	worsen-01	0	0.0	
# ::edge	likely-01	condition	keep-01	0	0.1	
# ::edge	worsen-01	ARG1	it	0.0	0.0.0	
# ::edge	worsen-01	mod	only	0.0	0.0.1	
(l / likely-01
      :ARG1 (w / worsen-01
            :ARG1 (i / it)
            :mod (o / only))
      :condition (k / keep-01
            :ARG0 (y / you)
            :ARG1 (i4 / it
                  :ARG1-of (b / bottle-up-02)
                  :location (i3 / inside))))

# ::node	0	recommend-01	
# ::node	0.0	and	14-15
# ::node	0.0.0	talk-01	6-7
# ::node	0.0.0.0	you	
# ::node	0.0.0.1	or	11-12
# ::node	0.0.0.1.0	person	
# ::node	0.0.0.1.0.0	have-org-role-91	10-11
# ::node	0.0.0.1.0.0.0	school	9-10
# ::node	0.0.0.1.0.0.1	nurse	10-11
# ::node	0.0.0.1.1	person	
# ::node	0.0.0.1.1.0	have-rel-role-91	
# ::node	0.0.0.1.1.0.0	practitioner	
# ::node	0.0.0.1.1.0.0.0	general	
# ::node	0.0.1	tell-01	15-16
# ::node	0.0.1.0	thing	
# ::node	0.0.1.0.0	go-on-15	
# ::root	0	recommend-01
# ::edge	and	op1	talk-01	0.0	0.0.0	
# ::edge	and	op2	tell-01	0.0	0.0.1	
# ::edge	have-org-role-91	ARG1	school	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	have-org-role-91	ARG2	nurse	0.0.0.1.0.0	0.0.0.1.0.0.1	
# ::edge	have-rel-role-91	ARG1	you	0.0.0.1.1.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	practitioner	0.0.0.1.1.0	0.0.0.1.1.0.0	
# ::edge	or	op1	person	0.0.0.1	0.0.0.1.0	
# ::edge	or	op2	person	0.0.0.1	0.0.0.1.1	
# ::edge	person	ARG0-of	have-org-role-91	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	practitioner	mod	general	0.0.0.1.1.0.0	0.0.0.1.1.0.0.0	
# ::edge	recommend-01	ARG1	and	0	0.0	
# ::edge	school	poss	you	0.0.0.1.0.0.0	0.0.0.0	
# ::edge	talk-01	ARG0	you	0.0.0	0.0.0.0	
# ::edge	talk-01	ARG2	or	0.0.0	0.0.0.1	
# ::edge	tell-01	ARG1	thing	0.0.1	0.0.1.0	
# ::edge	tell-01	ARG2	or	0.0.1	0.0.0.1	
# ::edge	thing	ARG1-of	go-on-15	0.0.1.0	0.0.1.0.0	
(r / recommend-01
      :ARG1 (a / and
            :op1 (t / talk-01
                  :ARG0 (y / you)
                  :ARG2 (o / or
                        :op1 (p / person
                              :ARG0-of (h2 / have-org-role-91
                                    :ARG1 (s / school
                                          :poss y)
                                    :ARG2 (n / nurse)))
                        :op2 (p2 / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG1 y
                                    :ARG2 (p3 / practitioner
                                          :mod (g / general))))))
            :op2 (t2 / tell-01
                  :ARG1 (t3 / thing
                        :ARG1-of (g2 / go-on-15))
                  :ARG2 o)))

# ::node	0	possible-01	11-12
# ::node	0.0	person	9-10
# ::node	0.0.0	trust-01	9-10
# ::node	0.0.0.0	you	8-9
# ::node	0.0.1	tell-01	12-13
# ::node	0.0.1.0	possible-01	
# ::node	0.0.2	have-org-role-91	6-7
# ::node	0.0.2.0	school	6-7
# ::node	0.0.2.1	teach-01	4-5
# ::root	0	possible-01
# ::edge	have-org-role-91	ARG1	school	0.0.2	0.0.2.0	
# ::edge	have-org-role-91	ARG3	teach-01	0.0.2	0.0.2.1	
# ::edge	person	ARG0-of	have-org-role-91	0.0	0.0.2	
# ::edge	person	ARG2-of	tell-01	0.0	0.0.1	
# ::edge	person	ARG2-of	trust-01	0.0	0.0.0	
# ::edge	possible-01	ARG1	person	0	0.0	
# ::edge	tell-01	ARG0	you	0.0.1	0.0.0.0	
# ::edge	tell-01	ARG1-of	possible-01	0.0.1	0.0.1.0	
# ::edge	trust-01	ARG0	you	0.0.0	0.0.0.0	
(p / possible-01
      :ARG1 (p3 / person
            :ARG2-of (t2 / trust-01
                  :ARG0 (y / you))
            :ARG2-of (t3 / tell-01
                  :ARG0 y
                  :ARG1-of (p2 / possible-01))
            :ARG0-of (h / have-org-role-91
                  :ARG1 (s / school)
                  :ARG3 (t / teach-01))))

# ::node	0	multi-sentence	
# ::node	0.0	trust-01	0-1
# ::node	0.0.0	i	
# ::node	0.1	good	5-6
# ::node	0.1.0	more	
# ::node	0.1.1	get-01	7-8
# ::node	0.1.1.0	thing	9-10
# ::node	0.1.1.0.0	this	
# ::node	0.1.1.1	early	11-12
# ::node	0.1.1.1.0	most	
# ::node	0.1.1.1.1	possible-01	13-14
# ::node	0.1.1.2	instead-of-91	
# ::node	0.1.1.2.0	let-01	16-17
# ::node	0.1.1.2.0.0	worsen-01	20-21
# ::node	0.1.1.2.0.0.0	even	19-20
# ::root	0	multi-sentence
# ::edge	early	compared-to	possible-01	0.1.1.1	0.1.1.1.1	
# ::edge	early	degree	most	0.1.1.1	0.1.1.1.0	
# ::edge	get-01	ARG1	thing	0.1.1	0.1.1.0	
# ::edge	get-01	ARG1-of	instead-of-91	0.1.1	0.1.1.2	
# ::edge	get-01	time	early	0.1.1	0.1.1.1	
# ::edge	good	degree	more	0.1	0.1.0	
# ::edge	good	domain	get-01	0.1	0.1.1	
# ::edge	instead-of-91	ARG2	let-01	0.1.1.2	0.1.1.2.0	
# ::edge	let-01	ARG1	worsen-01	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	multi-sentence	snt1	trust-01	0	0.0	
# ::edge	multi-sentence	snt2	good	0	0.1	
# ::edge	possible-01	ARG1	get-01	0.1.1.1.1	0.1.1	
# ::edge	thing	mod	this	0.1.1.0	0.1.1.0.0	
# ::edge	trust-01	ARG2	i	0.0	0.0.0	
# ::edge	worsen-01	ARG1	thing	0.1.1.2.0.0	0.1.1.0	
# ::edge	worsen-01	mod	even	0.1.1.2.0.0	0.1.1.2.0.0.0	
(m / multi-sentence
      :snt1 (t / trust-01
            :ARG2 (i / i))
      :snt2 (g / good
            :degree (m3 / more)
            :domain (g2 / get-01
                  :ARG1 (t2 / thing
                        :mod (t3 / this))
                  :time (e / early
                        :degree (m2 / most)
                        :compared-to (p / possible-01
                              :ARG1 g2))
                  :ARG1-of (i2 / instead-of-91
                        :ARG2 (l / let-01
                              :ARG1 (w / worsen-01
                                    :ARG1 t2
                                    :mod (e2 / even)))))))

# ::node	0	do-02	1-2
# ::node	0.0	-	
# ::node	0.1	imperative	
# ::node	0.2	+	
# ::node	0.3	you	
# ::node	0.4	this	4-5
# ::root	0	do-02
# ::edge	do-02	ARG0	you	0	0.3	
# ::edge	do-02	ARG1	this	0	0.4	
# ::edge	do-02	mode	imperative	0	0.1	
# ::edge	do-02	polarity	-	0	0.0	
# ::edge	do-02	polite	+	0	0.2	
(d / do-02 :polarity - :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / this))

# ::node	0	multi-sentence	
# ::node	0.0	enjoy-01	4-5
# ::node	0.0.0	-	4-4
# ::node	0.0.1	i	1-2
# ::node	0.0.2	university	5-6
# ::node	0.0.3	after	
# ::node	0.0.3.0	be-located-at-91	
# ::node	0.0.3.0.0	here	8-9
# ::node	0.0.3.0.1	or-so	
# ::node	0.0.3.0.1.0	temporal-quantity	
# ::node	0.0.3.0.1.0.0	5	
# ::node	0.0.3.0.1.0.1	month	
# ::node	0.1	and	12-13
# ::node	0.1.0	disillusion-01	15-16
# ::node	0.1.0.0	course	32-33
# ::node	0.1.1	enjoy-01	21-22
# ::node	0.1.1.0	-	4-4
# ::node	0.1.1.1	project	23-24
# ::node	0.1.1.1.0	set-14	24-25
# ::node	0.1.2	like-01	30-31
# ::node	0.1.2.0	-	4-4
# ::node	0.1.2.1	deliver-01	33-34
# ::node	0.1.2.1.0	course	18-19
# ::node	0.1.2.2	much	35-36
# ::root	0	multi-sentence
# ::edge	after	op1	be-located-at-91	0.0.3	0.0.3.0	
# ::edge	and	op1	disillusion-01	0.1	0.1.0	
# ::edge	and	op2	enjoy-01	0.1	0.1.1	
# ::edge	and	op3	like-01	0.1	0.1.2	
# ::edge	be-located-at-91	ARG1	i	0.0.3.0	0.0.1	
# ::edge	be-located-at-91	ARG2	here	0.0.3.0	0.0.3.0.0	
# ::edge	be-located-at-91	duration	or-so	0.0.3.0	0.0.3.0.1	
# ::edge	deliver-01	ARG1	course	0.1.2.1	0.1.2.1.0	
# ::edge	disillusion-01	ARG0	course	0.1.0	0.1.0.0	
# ::edge	disillusion-01	ARG1	i	0.1.0	0.0.1	
# ::edge	enjoy-01	ARG0	i	0.0	0.0.1	
# ::edge	enjoy-01	ARG0	i	0.1.1	0.0.1	
# ::edge	enjoy-01	ARG1	project	0.1.1	0.1.1.1	
# ::edge	enjoy-01	ARG1	university	0.0	0.0.2	
# ::edge	enjoy-01	polarity	-	0.0	0.0.0	
# ::edge	enjoy-01	polarity	-	0.1.1	0.1.1.0	
# ::edge	enjoy-01	time	after	0.0	0.0.3	
# ::edge	like-01	ARG0	i	0.1.2	0.0.1	
# ::edge	like-01	ARG1	deliver-01	0.1.2	0.1.2.1	
# ::edge	like-01	degree	much	0.1.2	0.1.2.2	
# ::edge	like-01	polarity	-	0.1.2	0.1.2.0	
# ::edge	multi-sentence	snt1	enjoy-01	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	or-so	op1	temporal-quantity	0.0.3.0.1	0.0.3.0.1.0	
# ::edge	project	ARG1-of	set-14	0.1.1.1	0.1.1.1.0	
# ::edge	temporal-quantity	quant	5	0.0.3.0.1.0	0.0.3.0.1.0.0	
# ::edge	temporal-quantity	unit	month	0.0.3.0.1.0	0.0.3.0.1.0.1	
(m2 / multi-sentence
      :snt1 (e / enjoy-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (u / university)
            :time (a3 / after
                  :op1 (b / be-located-at-91
                        :ARG1 i
                        :ARG2 (h / here)
                        :duration (o / or-so
                              :op1 (t / temporal-quantity :quant 5
                                    :unit (m / month))))))
      :snt2 (a / and
            :op1 (d / disillusion-01
                  :ARG0 (c / course)
                  :ARG1 i)
            :op2 (e2 / enjoy-01 :polarity -
                  :ARG0 i
                  :ARG1 (p2 / project
                        :ARG1-of (s / set-14)))
            :op3 (l / like-01 :polarity -
                  :ARG0 i
                  :ARG1 (d2 / deliver-01
                        :ARG1 (c2 / course))
                  :degree (m4 / much))))

# ::node	0	thank-01	0-1
# ::node	0.0	you	
# ::node	0.1	read-01	2-3
# ::root	0	thank-01
# ::edge	read-01	ARG0	you	0.1	0.0	
# ::edge	thank-01	ARG1	you	0	0.0	
# ::edge	thank-01	ARG2	read-01	0	0.1	
(t / thank-01
      :ARG1 (y / you)
      :ARG2 (r / read-01
            :ARG0 y))

# ::node	0	nice-01	2-3
# ::node	0.0	vent-01	4-5
# ::root	0	nice-01
# ::edge	nice-01	ARG1	vent-01	0	0.0	
(n / nice-01
      :ARG1 (v / vent-01))

# ::node	0	contrast-01	0-1
# ::node	0.0	mean-02	7-8
# ::node	0.0.0	-	
# ::node	0.0.1	interrogative	
# ::node	0.0.2	resemble-01	
# ::node	0.0.2.0	live-01	
# ::node	0.0.2.0.0	i	
# ::node	0.0.2.1	this	11-12
# ::node	0.0.3	sure-02	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	mean-02	0	0.0	
# ::edge	live-01	ARG0	i	0.0.2.0	0.0.2.0.0	
# ::edge	mean-02	ARG1	resemble-01	0.0	0.0.2	
# ::edge	mean-02	ARG1-of	sure-02	0.0	0.0.3	
# ::edge	mean-02	mode	interrogative	0.0	0.0.1	
# ::edge	mean-02	polarity	-	0.0	0.0.0	
# ::edge	resemble-01	ARG1	live-01	0.0.2	0.0.2.0	
# ::edge	resemble-01	ARG2	this	0.0.2	0.0.2.1	
(c / contrast-01
      :ARG2 (m / mean-02 :polarity - :mode interrogative
            :ARG1 (r / resemble-01
                  :ARG1 (l / live-01
                        :ARG0 (i / i))
                  :ARG2 (t / this))
            :ARG1-of (s / sure-02)))

# ::node	0	multi-sentence	
# ::node	0.0	recommend-01	1-2
# ::node	0.0.0	good	5-6
# ::node	0.0.0.0	more	
# ::node	0.0.0.0.0	much	4-5
# ::node	0.0.0.0.0.0	so	3-4
# ::node	0.0.0.1	it	0-1
# ::node	0.1	b	7-8
# ::root	0	multi-sentence
# ::edge	good	degree	more	0.0.0	0.0.0.0	
# ::edge	good	domain	it	0.0.0	0.0.0.1	
# ::edge	more	degree	much	0.0.0.0	0.0.0.0.0	
# ::edge	much	degree	so	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	multi-sentence	snt1	recommend-01	0	0.0	
# ::edge	multi-sentence	snt2	b	0	0.1	
# ::edge	recommend-01	ARG1	good	0.0	0.0.0	
(m3 / multi-sentence
      :snt1 (r / recommend-01
            :ARG1 (g / good
                  :degree (m / more
                        :degree (m2 / much
                              :degree (s / so)))
                  :domain (i / it)))
      :snt2 (b / b))

# ::node	0	contrast-01	
# ::node	0.0	feel-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	resemble-01	
# ::node	0.0.1.0	control-01	8-9
# ::node	0.0.1.0.0	-	7-8
# ::node	0.0.1.0.1	spiral	12-13
# ::node	0.0.1.0.1.0	downhill	11-12
# ::node	0.0.1.0.1.1	this	10-11
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	feel-01	0	0.0	
# ::edge	control-01	ARG0	i	0.0.1.0	0.0.0	
# ::edge	control-01	ARG1	spiral	0.0.1.0	0.0.1.0.1	
# ::edge	control-01	polarity	-	0.0.1.0	0.0.1.0.0	
# ::edge	feel-01	ARG0	i	0.0	0.0.0	
# ::edge	feel-01	ARG1-of	resemble-01	0.0	0.0.1	
# ::edge	resemble-01	ARG2	control-01	0.0.1	0.0.1.0	
# ::edge	spiral	direction	downhill	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	spiral	mod	this	0.0.1.0.1	0.0.1.0.1.1	
(c / contrast-01
      :ARG2 (f / feel-01
            :ARG0 (i / i)
            :ARG1-of (r / resemble-01
                  :ARG2 (c2 / control-01 :polarity -
                        :ARG0 i
                        :ARG1 (s / spiral
                              :direction (d / downhill)
                              :mod (t / this))))))

# ::node	0	and	0-1
# ::node	0.0	know-01	4-5
# ::node	0.0.0	-	
# ::node	0.0.1	i	1-2
# ::node	0.0.2	thing	2-3
# ::node	0.0.2.0	do-02	2-3
# ::root	0	and
# ::edge	and	op2	know-01	0	0.0	
# ::edge	do-02	ARG0	i	0.0.2.0	0.0.1	
# ::edge	know-01	ARG0	i	0.0	0.0.1	
# ::edge	know-01	ARG1	thing	0.0	0.0.2	
# ::edge	know-01	polarity	-	0.0	0.0.0	
# ::edge	thing	ARG1-of	do-02	0.0.2	0.0.2.0	
(a / and
      :op2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG1-of (d / do-02
                        :ARG0 i))))

# ::node	0	and	
# ::node	0.0	pass-07	5-6
# ::node	0.0.0	-	3-3
# ::node	0.0.1	i	0-1
# ::node	0.0.2	exam	9-10
# ::node	0.0.2.0	-	3-3
# ::node	0.0.2.1	name	7-8
# ::node	0.0.2.1.0	"A2"	7-8
# ::node	0.1	accept-01	14-15
# ::node	0.1.0	and	
# ::node	0.1.0.0	defeat-01	15-16
# ::node	0.1.0.1	make-02	26-27
# ::node	0.1.0.1.0	year	19-20
# ::node	0.1.0.1.0.0	this	18-19
# ::node	0.1.0.1.0.1	live-01	
# ::node	0.1.0.1.1	fail-01	29-30
# ::node	0.1.1	already	13-14
# ::root	0	and
# ::edge	accept-01	ARG0	i	0.1	0.0.1	
# ::edge	accept-01	ARG1	and	0.1	0.1.0	
# ::edge	accept-01	time	already	0.1	0.1.1	
# ::edge	and	op1	defeat-01	0.1.0	0.1.0.0	
# ::edge	and	op1	pass-07	0	0.0	
# ::edge	and	op2	accept-01	0	0.1	
# ::edge	and	op2	make-02	0.1.0	0.1.0.1	
# ::edge	defeat-01	ARG1	i	0.1.0.0	0.0.1	
# ::edge	exam	name	name	0.0.2	0.0.2.1	
# ::edge	exam	poss	i	0.0.2	0.0.1	
# ::edge	exam	wiki	-	0.0.2	0.0.2.0	
# ::edge	fail-01	ARG1	i	0.1.0.1.1	0.0.1	
# ::edge	live-01	ARG0	i	0.1.0.1.0.1	0.0.1	
# ::edge	make-02	ARG0	year	0.1.0.1	0.1.0.1.0	
# ::edge	make-02	ARG1	fail-01	0.1.0.1	0.1.0.1.1	
# ::edge	name	op1	"A2"	0.0.2.1	0.0.2.1.0	
# ::edge	pass-07	ARG1	i	0.0	0.0.1	
# ::edge	pass-07	ARG2	exam	0.0	0.0.2	
# ::edge	pass-07	polarity	-	0.0	0.0.0	
# ::edge	year	mod	this	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	year	part-of	live-01	0.1.0.1.0	0.1.0.1.0.1	
(a / and
      :op1 (p / pass-07 :polarity -
            :ARG1 (i / i)
            :ARG2 (e / exam :wiki -
                  :name (n / name :op1 "A2")
                  :poss i))
      :op2 (a2 / accept-01
            :ARG0 i
            :ARG1 (a3 / and
                  :op1 (d / defeat-01
                        :ARG1 i)
                  :op2 (m / make-02
                        :ARG0 (y / year
                              :mod (t / this)
                              :part-of (l / live-01
                                    :ARG0 i))
                        :ARG1 (f / fail-01
                              :ARG1 i)))
            :time (a4 / already)))

# ::node	0	multi-sentence	
# ::node	0.0	possible-01	2-3
# ::node	0.0.0	possible-01	
# ::node	0.0.0.0	come-01	3-4
# ::node	0.0.0.0.0	i	1-2
# ::node	0.0.0.0.1	this	6-7
# ::node	0.0.0.0.2	back	4-5
# ::node	0.0.1	know-01	9-10
# ::node	0.0.1.0	amr-unknown	
# ::node	0.1	contrast-01	20-21
# ::node	0.1.0	offer-01	18-19
# ::node	0.1.0.0	university	17-18
# ::node	0.1.0.1	i	11-12
# ::node	0.1.0.2	amaze-01	16-17
# ::node	0.1.0.2.0	most	15-16
# ::node	0.1.1	possible-01	
# ::node	0.1.1.0	-	
# ::node	0.1.1.1	accept-01	25-26
# ::node	0.1.1.1.0	even	24-25
# ::node	0.2	make-18	31-32
# ::node	0.2.0	-	
# ::node	0.2.1	i	21-22
# ::node	0.2.2	grade	33-34
# ::node	0.2.3	ever	
# ::root	0	multi-sentence
# ::edge	accept-01	ARG0	i	0.1.1.1	0.1.0.1	
# ::edge	accept-01	ARG1	offer-01	0.1.1.1	0.1.0	
# ::edge	accept-01	mod	even	0.1.1.1	0.1.1.1.0	
# ::edge	amaze-01	degree	most	0.1.0.2	0.1.0.2.0	
# ::edge	come-01	ARG1	i	0.0.0.0	0.0.0.0.0	
# ::edge	come-01	ARG3	this	0.0.0.0	0.0.0.0.1	
# ::edge	come-01	direction	back	0.0.0.0	0.0.0.0.2	
# ::edge	contrast-01	ARG1	offer-01	0.1	0.1.0	
# ::edge	contrast-01	ARG2	possible-01	0.1	0.1.1	
# ::edge	know-01	ARG0	amr-unknown	0.0.1	0.0.1.0	
# ::edge	make-18	ARG0	i	0.2	0.2.1	
# ::edge	make-18	ARG1	grade	0.2	0.2.2	
# ::edge	make-18	polarity	-	0.2	0.2.0	
# ::edge	make-18	time	ever	0.2	0.2.3	
# ::edge	multi-sentence	snt1	possible-01	0	0.0	
# ::edge	multi-sentence	snt2	contrast-01	0	0.1	
# ::edge	multi-sentence	snt3	make-18	0	0.2	
# ::edge	offer-01	ARG0	university	0.1.0	0.1.0.0	
# ::edge	offer-01	ARG0-of	amaze-01	0.1.0	0.1.0.2	
# ::edge	offer-01	ARG2	i	0.1.0	0.1.0.1	
# ::edge	possible-01	ARG1	accept-01	0.1.1	0.1.1.1	
# ::edge	possible-01	ARG1	come-01	0.0.0	0.0.0.0	
# ::edge	possible-01	ARG1	possible-01	0.0	0.0.0	
# ::edge	possible-01	ARG1-of	know-01	0.0	0.0.1	
# ::edge	possible-01	polarity	-	0.1.1	0.1.1.0	
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (p2 / possible-01
                  :ARG1 (c / come-01
                        :ARG1 (i / i)
                        :ARG3 (t / this)
                        :direction (b / back)))
            :ARG1-of (k / know-01
                  :ARG0 (a3 / amr-unknown)))
      :snt2 (c2 / contrast-01
            :ARG1 (o / offer-01
                  :ARG0 (u / university)
                  :ARG2 (i2 / i)
                  :ARG0-of (a / amaze-01
                        :degree (m2 / most)))
            :ARG2 (p3 / possible-01 :polarity -
                  :ARG1 (a2 / accept-01
                        :ARG0 i2
                        :ARG1 o
                        :mod (e / even))))
      :snt3 (m3 / make-18 :polarity -
            :ARG0 (i3 / i)
            :ARG1 (g / grade)
            :time (e2 / ever)))

# ::node	0	multi-sentence	
# ::node	0.0	wish-01	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	possible-01	3-4
# ::node	0.0.1.0	wipe-out-02	4-5
# ::node	0.0.1.0.0	she	
# ::node	0.0.1.0.1	live-01	
# ::node	0.1	good	16-17
# ::node	0.1.0	more	
# ::node	0.1.0.0	much	15-16
# ::node	0.1.0.0.0	so	14-15
# ::node	0.1.1	she	
# ::node	0.1.2	thing	11-12
# ::root	0	multi-sentence
# ::edge	good	degree	more	0.1	0.1.0	
# ::edge	good	domain	thing	0.1	0.1.2	
# ::edge	good	prep-without	she	0.1	0.1.1	
# ::edge	live-01	ARG0	i	0.0.1.0.1	0.0.0	
# ::edge	more	degree	much	0.1.0	0.1.0.0	
# ::edge	much	degree	so	0.1.0.0	0.1.0.0.0	
# ::edge	multi-sentence	snt1	wish-01	0	0.0	
# ::edge	multi-sentence	snt2	good	0	0.1	
# ::edge	possible-01	ARG1	wipe-out-02	0.0.1	0.0.1.0	
# ::edge	wipe-out-02	ARG0	i	0.0.1.0	0.0.0	
# ::edge	wipe-out-02	ARG1	she	0.0.1.0	0.0.1.0.0	
# ::edge	wipe-out-02	source	live-01	0.0.1.0	0.0.1.0.1	
# ::edge	wish-01	ARG0	i	0.0	0.0.0	
# ::edge	wish-01	ARG1	possible-01	0.0	0.0.1	
(m / multi-sentence
      :snt1 (w2 / wish-01
            :ARG0 (i2 / i)
            :ARG1 (p / possible-01
                  :ARG1 (w3 / wipe-out-02
                        :ARG0 i2
                        :ARG1 (s / she)
                        :source (l / live-01
                              :ARG0 i2))))
      :snt2 (g / good
            :degree (m2 / more
                  :degree (m3 / much
                        :degree (s2 / so)))
            :prep-without (s3 / she)
            :domain (t / thing)))

# ::node	0	contrast-01	0-1
# ::node	0.0	think-01	4-5
# ::node	0.0.0	i	3-4
# ::node	0.0.1	selfish	9-10
# ::node	0.0.1.0	just	7-8
# ::node	0.0.2	then	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	think-01	0	0.0	
# ::edge	selfish	domain	i	0.0.1	0.0.0	
# ::edge	selfish	mod	just	0.0.1	0.0.1.0	
# ::edge	think-01	ARG0	i	0.0	0.0.0	
# ::edge	think-01	ARG1	selfish	0.0	0.0.1	
# ::edge	think-01	mod	then	0.0	0.0.2	
(c / contrast-01
      :ARG2 (t / think-01
            :ARG0 (i / i)
            :ARG1 (s / selfish
                  :domain i
                  :mod (j / just))
            :mod (t2 / then)))

# ::node	0	recommend-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	take-up-31	3-4
# ::node	0.1.0	smoke-02	5-6
# ::node	0.2	high	1-2
# ::root	0	recommend-01
# ::edge	recommend-01	ARG0	i	0	0.0	
# ::edge	recommend-01	ARG1	take-up-31	0	0.1	
# ::edge	recommend-01	degree	high	0	0.2	
# ::edge	take-up-31	ARG1	smoke-02	0.1	0.1.0	
(r / recommend-01
      :ARG0 (i / i)
      :ARG1 (t / take-up-31
            :ARG1 (s / smoke-02))
      :degree (h / high))

# ::node	0	multi-sentence	
# ::node	0.0	care-01	2-3
# ::node	0.0.0	-	
# ::node	0.0.1	i	0-1
# ::node	0.0.2	thing	5-6
# ::node	0.0.2.0	do-02	5-6
# ::node	0.1	want-01	10-11
# ::node	0.1.0	do-02	12-13
# ::node	0.1.0.0	again-and-again	14-15
# ::node	0.1.0.1	torture-01	
# ::node	0.2	hate-01	22-23
# ::root	0	multi-sentence
# ::edge	care-01	ARG0	i	0.0	0.0.1	
# ::edge	care-01	ARG1	thing	0.0	0.0.2	
# ::edge	care-01	polarity	-	0.0	0.0.0	
# ::edge	do-02	ARG1	thing	0.1.0	0.0.2	
# ::edge	do-02	frequency	again-and-again	0.1.0	0.1.0.0	
# ::edge	do-02	prep-to	i	0.0.2.0	0.0.1	
# ::edge	do-02	purpose	torture-01	0.1.0	0.1.0.1	
# ::edge	hate-01	ARG0	i	0.2	0.0.1	
# ::edge	hate-01	ARG1	i	0.2	0.0.1	
# ::edge	multi-sentence	snt1	care-01	0	0.0	
# ::edge	multi-sentence	snt2	want-01	0	0.1	
# ::edge	multi-sentence	snt3	hate-01	0	0.2	
# ::edge	thing	ARG1-of	do-02	0.0.2	0.0.2.0	
# ::edge	torture-01	ARG0	i	0.1.0.1	0.0.1	
# ::edge	torture-01	ARG1	i	0.1.0.1	0.0.1	
# ::edge	want-01	ARG0	i	0.1	0.0.1	
# ::edge	want-01	ARG1	do-02	0.1	0.1.0	
(m / multi-sentence
      :snt1 (c / care-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG1-of (d / do-02
                        :prep-to i)))
      :snt2 (w / want-01
            :ARG0 i
            :ARG1 (d2 / do-02
                  :ARG1 t
                  :frequency (a / again-and-again)
                  :purpose (t2 / torture-01
                        :ARG0 i
                        :ARG1 i)))
      :snt3 (h / hate-01
            :ARG0 i
            :ARG1 i))

# ::node	0	want-01	
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	stop-01	4-5
# ::root	0	want-01
# ::edge	stop-01	ARG0	i	0.2	0.1	
# ::edge	want-01	ARG0	i	0	0.1	
# ::edge	want-01	ARG1	stop-01	0	0.2	
# ::edge	want-01	polarity	-	0	0.0	
(w / want-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (s / stop-01
            :ARG0 i))

# ::node	0	and	7-8
# ::node	0.0	suffer-01	3-4
# ::node	0.0.0	person	
# ::node	0.0.0.0	have-rel-role-91	2-3
# ::node	0.0.0.0.0	i	8-9
# ::node	0.0.0.0.1	mum	2-3
# ::node	0.0.1	disease	5-7
# ::node	0.0.1.0	"Bipolar_disorder"	
# ::node	0.0.1.1	name	5-7
# ::node	0.0.1.1.0	"bipolar"	5-7
# ::node	0.0.2	also	0-1
# ::node	0.1	have-03	9-10
# ::node	0.1.0	depression	10-11
# ::root	0	and
# ::edge	and	op1	suffer-01	0	0.0	
# ::edge	and	op2	have-03	0	0.1	
# ::edge	disease	name	name	0.0.1	0.0.1.1	
# ::edge	disease	wiki	"Bipolar_disorder"	0.0.1	0.0.1.0	
# ::edge	have-03	ARG0	i	0.1	0.0.0.0.0	
# ::edge	have-03	ARG1	depression	0.1	0.1.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0	0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	mum	0.0.0.0	0.0.0.0.1	
# ::edge	name	op1	"bipolar"	0.0.1.1	0.0.1.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0	
# ::edge	suffer-01	ARG0	person	0.0	0.0.0	
# ::edge	suffer-01	ARG1	disease	0.0	0.0.1	
# ::edge	suffer-01	mod	also	0.0	0.0.2	
(a / and
      :op1 (s / suffer-01
            :ARG0 (p / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 (i / i)
                        :ARG2 (m / mum)))
            :ARG1 (d2 / disease :wiki "Bipolar_disorder"
                  :name (n / name :op1 "bipolar"))
            :mod (a2 / also))
      :op2 (h / have-03
            :ARG0 i
            :ARG1 (d / depression)))

# ::node	0	and	10-11
# ::node	0.0	relation-03	
# ::node	0.0.0	i	0-1
# ::node	0.0.1	boy	6-7
# ::node	0.0.1.0	temporal-quantity	
# ::node	0.0.1.0.0	16	9-10
# ::node	0.0.1.0.1	year	
# ::node	0.1	forbid-01	13-14
# ::node	0.1.0	speak-01	15-16
# ::node	0.1.1	cause-01	18-19
# ::node	0.1.1.0	and	22-23
# ::node	0.1.1.0.0	event	
# ::node	0.1.1.0.1	differ-02	25-26
# ::node	0.1.1.0.1.0	age	24-25
# ::root	0	and
# ::edge	and	op1	event	0.1.1.0	0.1.1.0.0	
# ::edge	and	op1	relation-03	0	0.0	
# ::edge	and	op2	differ-02	0.1.1.0	0.1.1.0.1	
# ::edge	and	op2	forbid-01	0	0.1	
# ::edge	boy	age	temporal-quantity	0.0.1	0.0.1.0	
# ::edge	cause-01	ARG0	and	0.1.1	0.1.1.0	
# ::edge	differ-02	ARG1	age	0.1.1.0.1	0.1.1.0.1.0	
# ::edge	forbid-01	ARG1	speak-01	0.1	0.1.0	
# ::edge	forbid-01	ARG1-of	cause-01	0.1	0.1.1	
# ::edge	forbid-01	ARG2	i	0.1	0.0.0	
# ::edge	relation-03	ARG0	i	0.0	0.0.0	
# ::edge	relation-03	ARG2	boy	0.0	0.0.1	
# ::edge	speak-01	ARG0	i	0.1.0	0.0.0	
# ::edge	speak-01	ARG2	boy	0.1.0	0.0.1	
# ::edge	temporal-quantity	quant	16	0.0.1.0	0.0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.0.1.0	0.0.1.0.1	
(a / and
      :op1 (r / relation-03
            :ARG0 (i / i)
            :ARG2 (b / boy
                  :age (t2 / temporal-quantity :quant 16
                        :unit (y / year))))
      :op2 (f / forbid-01
            :ARG1 (s / speak-01
                  :ARG0 i
                  :ARG2 b)
            :ARG2 i
            :ARG1-of (c / cause-01
                  :ARG0 (a2 / and
                        :op1 (e / event)
                        :op2 (d / differ-02
                              :ARG1 (a3 / age))))))

# ::node	0	die-01	3-4
# ::node	0.0	person	
# ::node	0.0.0	have-rel-role-91	2-3
# ::node	0.0.0.0	i	5-6
# ::node	0.0.0.1	mate	2-3
# ::node	0.0.0.1.0	good	1-2
# ::node	0.0.0.1.0.0	most	1-2
# ::node	0.1	age-01	
# ::node	0.1.0	temporal-quantity	
# ::node	0.1.0.0	10	7-8
# ::node	0.1.0.1	year	
# ::root	0	die-01
# ::edge	age-01	ARG1	i	0.1	0.0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.1	0.1.0	
# ::edge	die-01	ARG1	person	0	0.0	
# ::edge	die-01	time	age-01	0	0.1	
# ::edge	good	degree	most	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	mate	0.0.0	0.0.0.1	
# ::edge	mate	mod	good	0.0.0.1	0.0.0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0	
# ::edge	temporal-quantity	quant	10	0.1.0	0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.1.0	0.1.0.1	
(d / die-01
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (m / mate
                        :mod (g / good
                              :degree (m2 / most)))))
      :time (a / age-01
            :ARG1 i
            :ARG2 (t / temporal-quantity :quant 10
                  :unit (y / year))))

# ::node	0	care-01	2-3
# ::node	0.0	he	0-1
# ::node	0.1	and	8-9
# ::node	0.1.0	person	
# ::node	0.1.0.0	little	6-7
# ::node	0.1.0.1	have-rel-role-91	7-8
# ::node	0.1.0.1.0	girl	7-8
# ::node	0.1.0.1.1	new	12-13
# ::node	0.1.1	person	
# ::node	0.1.1.0	have-rel-role-91	9-10
# ::node	0.1.1.0.0	wife	9-10
# ::node	0.1.2	life	13-14
# ::node	0.1.2.0	new	5-6
# ::node	0.1.2.1	want-01	18-19
# ::node	0.1.2.1.0	-	18-18
# ::node	0.1.2.1.1	i	
# ::node	0.2	just	1-2
# ::root	0	care-01
# ::edge	and	op1	person	0.1	0.1.0	
# ::edge	and	op2	person	0.1	0.1.1	
# ::edge	and	op3	life	0.1	0.1.2	
# ::edge	care-01	ARG0	he	0	0.0	
# ::edge	care-01	ARG1	and	0	0.1	
# ::edge	care-01	mod	just	0	0.2	
# ::edge	have-rel-role-91	ARG1	he	0.1.0.1	0.0	
# ::edge	have-rel-role-91	ARG1	he	0.1.1.0	0.0	
# ::edge	have-rel-role-91	ARG2	girl	0.1.0.1	0.1.0.1.0	
# ::edge	have-rel-role-91	ARG2	wife	0.1.1.0	0.1.1.0.0	
# ::edge	have-rel-role-91	mod	new	0.1.0.1	0.1.0.1.1	
# ::edge	life	location-of	want-01	0.1.2	0.1.2.1	
# ::edge	life	mod	new	0.1.2	0.1.2.0	
# ::edge	life	poss	he	0.1.2	0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0	0.1.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.1	0.1.1.0	
# ::edge	person	mod	little	0.1.0	0.1.0.0	
# ::edge	want-01	ARG1	i	0.1.2.1	0.1.2.1.1	
# ::edge	want-01	polarity	-	0.1.2.1	0.1.2.1.0	
(c / care-01
      :ARG0 (h / he)
      :ARG1 (a / and
            :op1 (p / person
                  :mod (l / little)
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 h
                        :ARG2 (g / girl)
                        :mod (n / new)))
            :op2 (p2 / person
                  :ARG0-of (h3 / have-rel-role-91
                        :ARG1 h
                        :ARG2 (w / wife)))
            :op3 (l2 / life
                  :poss h
                  :mod (n2 / new)
                  :location-of (w2 / want-01 :polarity -
                        :ARG1 (i / i))))
      :mod (j / just))

# ::node	0	source-02	1-2
# ::node	0.0	and	6-7
# ::node	0.0.0	leave-15	13-14
# ::node	0.0.0.0	person	
# ::node	0.0.0.0.0	have-rel-role-91	12-13
# ::node	0.0.0.0.0.0	i	8-9
# ::node	0.0.0.0.0.1	dad	12-13
# ::node	0.0.0.1	age-01	
# ::node	0.0.0.1.0	temporal-quantity	
# ::node	0.0.0.1.0.0	7	10-11
# ::node	0.0.0.1.0.1	year	
# ::node	0.0.1	want-01	18-19
# ::node	0.0.1.0	-	
# ::node	0.0.1.1	know-02	20-21
# ::node	0.0.1.2	anymore	22-23
# ::node	0.1	this	3-4
# ::root	0	source-02
# ::edge	age-01	ARG1	i	0.0.0.1	0.0.0.0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0.0.1	0.0.0.1.0	
# ::edge	and	op1	leave-15	0.0	0.0.0	
# ::edge	and	op2	want-01	0.0	0.0.1	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	dad	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	know-02	ARG0	person	0.0.1.1	0.0.0.0	
# ::edge	know-02	ARG1	i	0.0.1.1	0.0.0.0.0.0	
# ::edge	leave-15	ARG0	person	0.0.0	0.0.0.0	
# ::edge	leave-15	time	age-01	0.0.0	0.0.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.0	
# ::edge	source-02	ARG0	and	0	0.0	
# ::edge	source-02	ARG1	this	0	0.1	
# ::edge	temporal-quantity	quant	7	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	temporal-quantity	unit	year	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	want-01	ARG0	person	0.0.1	0.0.0.0	
# ::edge	want-01	ARG1	know-02	0.0.1	0.0.1.1	
# ::edge	want-01	polarity	-	0.0.1	0.0.1.0	
# ::edge	want-01	time	anymore	0.0.1	0.0.1.2	
(s / source-02
      :ARG0 (a / and
            :op1 (l / leave-15
                  :ARG0 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 (i / i)
                              :ARG2 (d / dad)))
                  :time (a2 / age-01
                        :ARG1 i
                        :ARG2 (t2 / temporal-quantity :quant 7
                              :unit (y / year))))
            :op2 (w / want-01 :polarity -
                  :ARG0 p
                  :ARG1 (k / know-02
                        :ARG0 p
                        :ARG1 i)
                  :time (a3 / anymore)))
      :ARG1 (t / this))

# ::node	0	and	3-4
# ::node	0.0	age-01	
# ::node	0.0.0	i	0-1
# ::node	0.0.1	temporal-quantity	
# ::node	0.0.1.0	12	2-3
# ::node	0.0.1.1	year	
# ::node	0.1	sick-04	7-8
# ::node	0.1.0	life	10-11
# ::node	0.1.1	already	6-7
# ::root	0	and
# ::edge	age-01	ARG1	i	0.0	0.0.0	
# ::edge	age-01	ARG2	temporal-quantity	0.0	0.0.1	
# ::edge	and	op1	age-01	0	0.0	
# ::edge	and	op2	sick-04	0	0.1	
# ::edge	life	poss	i	0.1.0	0.0.0	
# ::edge	sick-04	ARG0	life	0.1	0.1.0	
# ::edge	sick-04	ARG1	i	0.1	0.0.0	
# ::edge	sick-04	time	already	0.1	0.1.1	
# ::edge	temporal-quantity	quant	12	0.0.1	0.0.1.0	
# ::edge	temporal-quantity	unit	year	0.0.1	0.0.1.1	
(a / and
      :op1 (a2 / age-01
            :ARG1 (i / i)
            :ARG2 (t / temporal-quantity :quant 12
                  :unit (y / year)))
      :op2 (s / sick-04
            :ARG0 (l / life
                  :poss i)
            :ARG1 i
            :time (a3 / already)))

# ::node	0	or	7-8
# ::node	0.0	feel-02	17-18
# ::node	0.0.0	i	0-1
# ::node	0.0.1	have-condition-91	
# ::node	0.0.1.0	doom-01	13-14
# ::node	0.0.1.1	lose-02	4-5
# ::node	0.0.1.1.0	or	14-15
# ::node	0.0.1.1.0.0	wallet	6-7
# ::node	0.0.1.1.0.1	phone	8-9
# ::node	0.1	feel-02	1-2
# ::root	0	or
# ::edge	doom-01	ARG1	i	0.0.1.0	0.0.0	
# ::edge	feel-02	ARG0	i	0.0	0.0.0	
# ::edge	feel-02	ARG0	i	0.1	0.0.0	
# ::edge	feel-02	ARG1	doom-01	0.1	0.0.1.0	
# ::edge	feel-02	ARG1	have-condition-91	0.0	0.0.1	
# ::edge	have-condition-91	ARG1	doom-01	0.0.1	0.0.1.0	
# ::edge	have-condition-91	ARG2	lose-02	0.0.1	0.0.1.1	
# ::edge	lose-02	ARG0	i	0.0.1.1	0.0.0	
# ::edge	lose-02	ARG1	or	0.0.1.1	0.0.1.1.0	
# ::edge	or	op1	feel-02	0	0.0	
# ::edge	or	op1	wallet	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	or	op2	feel-02	0	0.1	
# ::edge	or	op2	phone	0.0.1.1.0	0.0.1.1.0.1	
# ::edge	phone	poss	i	0.0.1.1.0.1	0.0.0	
# ::edge	wallet	poss	i	0.0.1.1.0.0	0.0.0	
(o / or
      :op1 (f / feel-02
            :ARG0 (i / i)
            :ARG1 (h / have-condition-91
                  :ARG1 (d / doom-01
                        :ARG1 i)
                  :ARG2 (l / lose-02
                        :ARG0 i
                        :ARG1 (o2 / or
                              :op1 (w / wallet
                                    :poss i)
                              :op2 (p / phone
                                    :poss i)))))
      :op2 (f2 / feel-02
            :ARG0 i
            :ARG1 d))

# ::node	0	tell-01	2-3
# ::node	0.0	-	
# ::node	0.1	i	0-1
# ::node	0.2	he	5-6
# ::node	0.3	find-out-03	6-7
# ::root	0	tell-01
# ::edge	find-out-03	ARG0	he	0.3	0.2	
# ::edge	tell-01	ARG0	i	0	0.1	
# ::edge	tell-01	ARG2	he	0	0.2	
# ::edge	tell-01	concession-of	find-out-03	0	0.3	
# ::edge	tell-01	polarity	-	0	0.0	
(t / tell-01 :polarity -
      :ARG0 (i / i)
      :ARG2 (h / he)
      :concession-of (f / find-out-03
            :ARG0 h))

# ::node	0	contrast-01	
# ::node	0.0	and	18-19
# ::node	0.0.0	love-01	7-8
# ::node	0.0.0.0	i	6-7
# ::node	0.0.0.1	person	
# ::node	0.0.0.1.0	have-rel-role-91	4-5
# ::node	0.0.0.1.0.0	mate	4-5
# ::node	0.0.0.1.0.0.0	good	3-4
# ::node	0.0.0.1.0.0.0.0	most	3-4
# ::node	0.0.0.2	load	10-11
# ::node	0.0.1	mean-01	13-14
# ::node	0.0.1.0	he	12-13
# ::node	0.0.1.1	world	15-16
# ::node	0.0.2	have-condition-91	
# ::node	0.0.2.0	do-02	21-22
# ::node	0.0.2.1	do-02	
# ::node	0.0.2.1.0	anything	22-23
# ::root	0	contrast-01
# ::edge	and	op1	love-01	0.0	0.0.0	
# ::edge	and	op2	mean-01	0.0	0.0.1	
# ::edge	and	op3	have-condition-91	0.0	0.0.2	
# ::edge	contrast-01	ARG2	and	0	0.0	
# ::edge	do-02	ARG0	he	0.0.2.0	0.0.1.0	
# ::edge	do-02	ARG0	i	0.0.2.1	0.0.0.0	
# ::edge	do-02	ARG1	anything	0.0.2.0	0.0.2.1.0	
# ::edge	do-02	ARG1	anything	0.0.2.1	0.0.2.1.0	
# ::edge	good	degree	most	0.0.0.1.0.0.0	0.0.0.1.0.0.0.0	
# ::edge	have-condition-91	ARG1	do-02	0.0.2	0.0.2.0	
# ::edge	have-condition-91	ARG2	do-02	0.0.2	0.0.2.1	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.1.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	mate	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	love-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	love-01	ARG1	person	0.0.0	0.0.0.1	
# ::edge	love-01	degree	load	0.0.0	0.0.0.2	
# ::edge	mate	mod	good	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	mean-01	ARG1	he	0.0.1	0.0.1.0	
# ::edge	mean-01	ARG2	world	0.0.1	0.0.1.1	
# ::edge	mean-01	ARG3	i	0.0.1	0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.1	0.0.0.1.0	
(c / contrast-01
      :ARG2 (a / and
            :op1 (l / love-01
                  :ARG0 (i / i)
                  :ARG1 (p / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 i
                              :ARG2 (m / mate
                                    :mod (g / good
                                          :degree (m3 / most)))))
                  :degree (l2 / load))
            :op2 (m2 / mean-01
                  :ARG1 (h / he)
                  :ARG2 (w / world)
                  :ARG3 i)
            :op3 (h2 / have-condition-91
                  :ARG1 (d / do-02
                        :ARG0 h
                        :ARG1 a3)
                  :ARG2 (d2 / do-02
                        :ARG0 i
                        :ARG1 (a3 / anything)))))

# ::node	0	multi-sentence	
# ::node	0.0	and	15-16
# ::node	0.0.0	it	0-1
# ::node	0.0.0.0	often	3-4
# ::node	0.0.0.0.0	most	2-3
# ::node	0.0.0.0.1	carry-01	7-8
# ::node	0.0.0.0.1.0	thing	9-10
# ::node	0.0.0.0.1.0.0	many	22-23
# ::node	0.0.0.0.1.1	contrast-01	11-12
# ::node	0.0.0.0.1.1.0	carry-01	
# ::node	0.0.0.0.1.1.0.0	rare-02	14-15
# ::node	0.0.1	check-01	21-22
# ::node	0.0.1.0	rate-entity-91	
# ::node	0.0.1.0.0	many	8-9
# ::node	0.0.1.0.1	temporal-quantity	
# ::node	0.0.1.0.1.0	1	
# ::node	0.0.1.0.1.1	day	
# ::node	0.0.1.0.2	still	17-18
# ::node	0.0.1.0.3	even	16-17
# ::node	0.1	disease	28-29
# ::node	0.1.0	interrogative	
# ::node	0.1.1	"Obsessive–compulsive_disorder"	
# ::node	0.1.2	name	28-29
# ::node	0.1.2.0	"OCD"	28-29
# ::node	0.1.3	this	27-28
# ::node	0.1.4	extent	31-32
# ::node	0.1.4.0	any	30-31
# ::root	0	multi-sentence
# ::edge	and	op1	it	0.0	0.0.0	
# ::edge	and	op2	check-01	0.0	0.0.1	
# ::edge	carry-01	ARG0	it	0.0.0.0.1	0.0.0	
# ::edge	carry-01	ARG0	it	0.0.0.0.1.1.0	0.0.0	
# ::edge	carry-01	ARG1	thing	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	carry-01	ARG1	thing	0.0.0.0.1.1.0	0.0.0.0.1.0	
# ::edge	carry-01	ARG1-of	contrast-01	0.0.0.0.1	0.0.0.0.1.1	
# ::edge	carry-01	ARG1-of	rare-02	0.0.0.0.1.1.0	0.0.0.0.1.1.0.0	
# ::edge	check-01	ARG0	it	0.0.1	0.0.0	
# ::edge	check-01	frequency	rate-entity-91	0.0.1	0.0.1.0	
# ::edge	contrast-01	ARG2	carry-01	0.0.0.0.1.1	0.0.0.0.1.1.0	
# ::edge	disease	degree	extent	0.1	0.1.4	
# ::edge	disease	domain	this	0.1	0.1.3	
# ::edge	disease	mode	interrogative	0.1	0.1.0	
# ::edge	disease	name	name	0.1	0.1.2	
# ::edge	disease	wiki	"Obsessive–compulsive_disorder"	0.1	0.1.1	
# ::edge	extent	mod	any	0.1.4	0.1.4.0	
# ::edge	it	frequency	often	0.0.0	0.0.0.0	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	disease	0	0.1	
# ::edge	name	op1	"OCD"	0.1.2	0.1.2.0	
# ::edge	often	degree	most	0.0.0.0	0.0.0.0.0	
# ::edge	often	time-of	carry-01	0.0.0.0	0.0.0.0.1	
# ::edge	rate-entity-91	ARG1	many	0.0.1.0	0.0.1.0.0	
# ::edge	rate-entity-91	ARG2	temporal-quantity	0.0.1.0	0.0.1.0.1	
# ::edge	rate-entity-91	mod	even	0.0.1.0	0.0.1.0.3	
# ::edge	rate-entity-91	mod	still	0.0.1.0	0.0.1.0.2	
# ::edge	temporal-quantity	quant	1	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	temporal-quantity	unit	day	0.0.1.0.1	0.0.1.0.1.1	
# ::edge	thing	quant	many	0.0.0.0.1.0	0.0.0.0.1.0.0	
(m / multi-sentence
      :snt1 (a / and
            :op1 (i / it
                  :frequency (o / often
                        :degree (m2 / most)
                        :time-of (c / carry-01
                              :ARG0 i
                              :ARG1 (t / thing
                                    :quant (m3 / many))
                              :ARG1-of (c3 / contrast-01
                                    :ARG2 (c4 / carry-01
                                          :ARG0 i
                                          :ARG1 t
                                          :ARG1-of (r / rare-02))))))
            :op2 (c2 / check-01
                  :ARG0 i
                  :frequency (r2 / rate-entity-91
                        :ARG1 (m5 / many)
                        :ARG2 (t4 / temporal-quantity :quant 1
                              :unit (d / day))
                        :mod (s / still)
                        :mod (e / even))))
      :snt2 (d2 / disease :mode interrogative :wiki "Obsessive–compulsive_disorder" :name (n / name :op1 "OCD")
            :domain (t3 / this)
            :degree (e2 / extent
                  :mod (a2 / any))))

# ::node	0	or	4-5
# ::node	0.0	interrogative	
# ::node	0.1	craze-01	3-4
# ::node	0.1.0	i	1-2
# ::node	0.2	something	5-6
# ::root	0	or
# ::edge	craze-01	ARG1	i	0.1	0.1.0	
# ::edge	or	mode	interrogative	0	0.0	
# ::edge	or	op1	craze-01	0	0.1	
# ::edge	or	op2	something	0	0.2	
(o / or :mode interrogative
      :op1 (c / craze-01
            :ARG1 (i / i))
      :op2 (s / something))

# ::node	0	concentrate-01	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	bit	3-4
# ::node	0.2.0	1	
# ::node	0.2.1	thing	5-6
# ::node	0.2.1.0	work-01	5-6
# ::node	0.2.2	mean-01	
# ::node	0.2.2.0	thing	14-15
# ::node	0.2.2.0.0	assign-01	14-15
# ::node	0.2.2.0.1	urgent	13-14
# ::node	0.2.2.0.1.0	most	12-13
# ::node	0.2.2.0.2	ordinal-entity	
# ::node	0.2.2.0.2.0	1	2-3
# ::node	0.2.2.0.3	obvious-01	
# ::node	0.2.3	time	8-9
# ::root	0	concentrate-01
# ::edge	bit	ARG1-of	mean-01	0.2	0.2.2	
# ::edge	bit	frequency	time	0.2	0.2.3	
# ::edge	bit	part-of	thing	0.2	0.2.1	
# ::edge	bit	quant	1	0.2	0.2.0	
# ::edge	concentrate-01	ARG0	you	0	0.1	
# ::edge	concentrate-01	ARG1	bit	0	0.2	
# ::edge	concentrate-01	mode	imperative	0	0.0	
# ::edge	mean-01	ARG2	thing	0.2.2	0.2.2.0	
# ::edge	ordinal-entity	value	1	0.2.2.0.2	0.2.2.0.2.0	
# ::edge	thing	ARG1-of	assign-01	0.2.2.0	0.2.2.0.0	
# ::edge	thing	ARG1-of	obvious-01	0.2.2.0	0.2.2.0.3	
# ::edge	thing	ARG1-of	work-01	0.2.1	0.2.1.0	
# ::edge	thing	mod	urgent	0.2.2.0	0.2.2.0.1	
# ::edge	thing	time	ordinal-entity	0.2.2.0	0.2.2.0.2	
# ::edge	urgent	degree	most	0.2.2.0.1	0.2.2.0.1.0	
(c / concentrate-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / bit :quant 1
            :part-of (t2 / thing
                  :ARG1-of (w / work-01))
            :ARG1-of (m2 / mean-01
                  :ARG2 (t3 / thing
                        :ARG1-of (a / assign-01)
                        :mod (u / urgent
                              :degree (m / most))
                        :time (o2 / ordinal-entity :value 1)
                        :ARG1-of (o / obvious-01)))
            :frequency (t / time)))

# ::node	0	break-01	0-1
# ::node	0.0	imperative	
# ::node	0.1	you	
# ::node	0.2	thing	2-3
# ::node	0.2.0	work-01	2-3
# ::node	0.3	chunk	5-6
# ::node	0.3.0	manage-01	4-5
# ::node	0.3.0.0	possible-01	
# ::root	0	break-01
# ::edge	break-01	ARG0	you	0	0.1	
# ::edge	break-01	ARG1	thing	0	0.2	
# ::edge	break-01	ARG3	chunk	0	0.3	
# ::edge	break-01	mode	imperative	0	0.0	
# ::edge	chunk	ARG1-of	manage-01	0.3	0.3.0	
# ::edge	manage-01	ARG0	you	0.3.0	0.1	
# ::edge	manage-01	ARG1-of	possible-01	0.3.0	0.3.0.0	
# ::edge	thing	ARG1-of	work-01	0.2	0.2.0	
# ::edge	work-01	ARG0	you	0.2.0	0.1	
(b / break-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (w / work-01
                  :ARG0 y))
      :ARG3 (c / chunk
            :ARG1-of (m / manage-01
                  :ARG0 y
                  :ARG1-of (p / possible-01))))

# ::node	0	well-off-06	18-19
# ::node	0.0	you	15-16
# ::node	0.1	have-03	
# ::node	0.1.0	-	
# ::node	0.2	more	
# ::node	0.3	probable	17-18
# ::node	0.4	price-01	2-3
# ::node	0.4.0	walk-01	7-8
# ::node	0.4.0.0	he	5-6
# ::node	0.4.0.1	out-05	8-9
# ::node	0.4.0.1.0	life	13-14
# ::node	0.4.0.1.0.0	you	
# ::node	0.4.0.1.0.0.0	both	10-11
# ::node	0.4.0.2	volunteer-01	6-7
# ::root	0	well-off-06
# ::edge	have-03	ARG0	you	0.1	0.0	
# ::edge	have-03	ARG1	he	0.1	0.4.0.0	
# ::edge	have-03	polarity	-	0.1	0.1.0	
# ::edge	life	poss	you	0.4.0.1.0	0.4.0.1.0.0	
# ::edge	out-05	ARG2	life	0.4.0.1	0.4.0.1.0	
# ::edge	price-01	ARG2	walk-01	0.4	0.4.0	
# ::edge	volunteer-01	ARG0	he	0.4.0.2	0.4.0.0	
# ::edge	walk-01	ARG0	he	0.4.0	0.4.0.0	
# ::edge	walk-01	ARG1-of	volunteer-01	0.4.0	0.4.0.2	
# ::edge	walk-01	direction	out-05	0.4.0	0.4.0.1	
# ::edge	well-off-06	ARG1	you	0	0.0	
# ::edge	well-off-06	ARG2	have-03	0	0.1	
# ::edge	well-off-06	condition	price-01	0	0.4	
# ::edge	well-off-06	degree	more	0	0.2	
# ::edge	well-off-06	mod	probable	0	0.3	
# ::edge	you	mod	both	0.4.0.1.0.0	0.4.0.1.0.0.0	
(w2 / well-off-06
      :ARG1 (y / you)
      :ARG2 (h4 / have-03 :polarity -
            :ARG0 y
            :ARG1 h)
      :degree (m / more)
      :mod (p / probable)
      :condition (p2 / price-01
            :ARG2 (w / walk-01
                  :ARG0 (h / he)
                  :direction (o / out-05
                        :ARG2 (l / life
                              :poss (y2 / you
                                    :mod (b / both))))
                  :ARG1-of (v / volunteer-01
                        :ARG0 h))))

# ::node	0	multi-sentence	
# ::node	0.0	and	9-10
# ::node	0.0.0	shut-off-03	2-3
# ::node	0.0.0.0	-	
# ::node	0.0.0.1	imperative	
# ::node	0.0.0.2	you	
# ::node	0.0.0.3	person	
# ::node	0.0.0.3.0	have-rel-role-91	7-8
# ::node	0.0.0.3.0.0	housemate	7-8
# ::node	0.0.1	do-02	0-1
# ::node	0.0.1.0	imperative	
# ::node	0.0.1.1	well	10-11
# ::node	0.0.1.2	cause-01	
# ::node	0.0.1.2.0	try-01	13-14
# ::node	0.0.1.2.0.0	thing	15-16
# ::node	0.0.1.2.0.0.0	new	14-15
# ::node	0.0.1.2.0.1	from	5-6
# ::node	0.0.1.2.0.1.0	begin-01	19-20
# ::node	0.0.1.2.0.1.0.0	very	18-19
# ::node	0.1	keep-02	21-22
# ::node	0.1.0	imperative	
# ::node	0.1.1	you	
# ::node	0.1.2	it	23-24
# ::node	0.1.3	now	20-21
# ::root	0	multi-sentence
# ::edge	and	op1	shut-off-03	0.0	0.0.0	
# ::edge	and	op2	do-02	0.0	0.0.1	
# ::edge	begin-01	mod	very	0.0.1.2.0.1.0	0.0.1.2.0.1.0.0	
# ::edge	cause-01	ARG0	try-01	0.0.1.2	0.0.1.2.0	
# ::edge	do-02	ARG0	you	0.0.1	0.1.1	
# ::edge	do-02	ARG1-of	cause-01	0.0.1	0.0.1.2	
# ::edge	do-02	degree	well	0.0.1	0.0.1.1	
# ::edge	do-02	mode	imperative	0.0.1	0.0.1.0	
# ::edge	from	op1	begin-01	0.0.1.2.0.1	0.0.1.2.0.1.0	
# ::edge	have-rel-role-91	ARG1	you	0.0.0.3.0	0.1.1	
# ::edge	have-rel-role-91	ARG2	housemate	0.0.0.3.0	0.0.0.3.0.0	
# ::edge	keep-02	ARG0	you	0.1	0.1.1	
# ::edge	keep-02	ARG1	it	0.1	0.1.2	
# ::edge	keep-02	mode	imperative	0.1	0.1.0	
# ::edge	keep-02	time	now	0.1	0.1.3	
# ::edge	multi-sentence	snt1	and	0	0.0	
# ::edge	multi-sentence	snt2	keep-02	0	0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.3	0.0.0.3.0	
# ::edge	shut-off-03	ARG0	you	0.0.0	0.0.0.2	
# ::edge	shut-off-03	ARG1	you	0.0.0	0.1.1	
# ::edge	shut-off-03	ARG2	person	0.0.0	0.0.0.3	
# ::edge	shut-off-03	mode	imperative	0.0.0	0.0.0.1	
# ::edge	shut-off-03	polarity	-	0.0.0	0.0.0.0	
# ::edge	thing	mod	new	0.0.1.2.0.0	0.0.1.2.0.0.0	
# ::edge	try-01	ARG0	you	0.0.1.2.0	0.1.1	
# ::edge	try-01	ARG1	thing	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	try-01	time	from	0.0.1.2.0	0.0.1.2.0.1	
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / shut-off-03 :polarity - :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 y
                  :ARG2 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 y
                              :ARG2 (h2 / housemate))))
            :op2 (d / do-02 :mode imperative
                  :ARG0 y
                  :degree (w / well)
                  :ARG1-of (c / cause-01
                        :ARG0 (t / try-01
                              :ARG0 y
                              :ARG1 (t2 / thing
                                    :mod (n2 / new))
                              :time (f / from
                                    :op1 (b2 / begin-01
                                          :mod (v / very)))))))
      :snt2 (k / keep-02 :mode imperative
            :ARG0 (y / you)
            :ARG1 (i / it)
            :time (n / now)))

# ::node	0	multi-sentence	
# ::node	0.0	sure-02	13-14
# ::node	0.0.0	i	11-12
# ::node	0.0.1	allow-01	17-18
# ::node	0.0.1.0	university	
# ::node	0.0.1.0.0	you	8-9
# ::node	0.0.1.1	it	18-19
# ::node	0.0.2	honest	10-11
# ::node	0.1	and	0-1
# ::node	0.1.0	try-01	1-2
# ::node	0.1.0.0	imperative	
# ::node	0.1.0.1	you	
# ::node	0.1.0.2	get-04	3-4
# ::node	0.1.0.2.0	extend-01	5-6
# ::node	0.1.0.2.0.0	deadline	4-5
# ::root	0	multi-sentence
# ::edge	allow-01	ARG0	university	0.0.1	0.0.1.0	
# ::edge	allow-01	ARG1	it	0.0.1	0.0.1.1	
# ::edge	and	op1	try-01	0.1	0.1.0	
# ::edge	extend-01	ARG1	deadline	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	get-04	ARG0	you	0.1.0.2	0.1.0.1	
# ::edge	get-04	ARG1	extend-01	0.1.0.2	0.1.0.2.0	
# ::edge	honest	domain	you	0.0.2	0.1.0.1	
# ::edge	multi-sentence	snt1	and	0	0.1	
# ::edge	multi-sentence	snt2	sure-02	0	0.0	
# ::edge	sure-02	ARG0	i	0.0	0.0.0	
# ::edge	sure-02	ARG1	allow-01	0.0	0.0.1	
# ::edge	sure-02	condition	honest	0.0	0.0.2	
# ::edge	try-01	ARG0	you	0.1.0	0.1.0.1	
# ::edge	try-01	ARG1	get-04	0.1.0	0.1.0.2	
# ::edge	try-01	mode	imperative	0.1.0	0.1.0.0	
# ::edge	university	poss	you	0.0.1.0	0.0.1.0.0	
(m / multi-sentence
      :snt2 (s / sure-02
            :ARG0 (i / i)
            :ARG1 (a / allow-01
                  :ARG0 (u / university
                        :poss (y2 / you))
                  :ARG1 (i2 / it))
            :condition (h / honest
                  :domain y))
      :snt1 (a2 / and
            :op1 (t / try-01 :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (g / get-04
                        :ARG0 y
                        :ARG1 (e / extend-01
                              :ARG1 (d / deadline))))))

# ::node	0	multi-sentence	
# ::node	0.0	possible-01	
# ::node	0.0.0	benefit-01	10-11
# ::node	0.0.0.0	speak-01	12-13
# ::node	0.0.0.0.0	someone	14-15
# ::node	0.0.0.1	you	1-2
# ::node	0.0.0.2	person	7-8
# ::node	0.0.0.2.0	anxious	6-7
# ::node	0.0.0.2.1	always	3-4
# ::node	0.1	get-01	18-19
# ::node	0.1.0	person	
# ::node	0.1.0.0	have-rel-role-91	17-18
# ::node	0.1.0.0.0	i	
# ::node	0.1.0.0.1	friend	17-18
# ::node	0.1.1	therapy	19-20
# ::node	0.1.2	organization	22-23
# ::node	0.1.2.0	"National_Health_Service_(England)"	
# ::node	0.1.2.1	name	22-23
# ::node	0.1.2.1.0	"NHS"	22-23
# ::node	0.1.3	cause-01	
# ::node	0.1.3.0	normal-02	29-30
# ::node	0.1.3.0.0	it	27-28
# ::node	0.1.3.0.1	real	28-29
# ::node	0.1.4	cause-01	0-1
# ::node	0.1.4.0	anxiety	24-25
# ::root	0	multi-sentence
# ::edge	benefit-01	ARG0	speak-01	0.0.0	0.0.0.0	
# ::edge	benefit-01	ARG1	you	0.0.0	0.0.0.1	
# ::edge	benefit-01	condition	person	0.0.0	0.0.0.2	
# ::edge	cause-01	ARG0	anxiety	0.1.4	0.1.4.0	
# ::edge	cause-01	ARG1	normal-02	0.1.3	0.1.3.0	
# ::edge	get-01	ARG0	person	0.1	0.1.0	
# ::edge	get-01	ARG0-of	cause-01	0.1	0.1.3	
# ::edge	get-01	ARG1	therapy	0.1	0.1.1	
# ::edge	get-01	ARG1-of	cause-01	0.1	0.1.4	
# ::edge	get-01	ARG2	organization	0.1	0.1.2	
# ::edge	have-rel-role-91	ARG1	i	0.1.0.0	0.1.0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.1.0.0	0.1.0.0.1	
# ::edge	multi-sentence	snt1	possible-01	0	0.0	
# ::edge	multi-sentence	snt2	get-01	0	0.1	
# ::edge	name	op1	"NHS"	0.1.2.1	0.1.2.1.0	
# ::edge	normal-02	ARG1	it	0.1.3.0	0.1.3.0.0	
# ::edge	normal-02	degree	real	0.1.3.0	0.1.3.0.1	
# ::edge	organization	name	name	0.1.2	0.1.2.1	
# ::edge	organization	wiki	"National_Health_Service_(England)"	0.1.2	0.1.2.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1.0	0.1.0.0	
# ::edge	person	domain	you	0.0.0.2	0.0.0.1	
# ::edge	person	mod	anxious	0.0.0.2	0.0.0.2.0	
# ::edge	person	time	always	0.0.0.2	0.0.0.2.1	
# ::edge	possible-01	ARG1	benefit-01	0.0	0.0.0	
# ::edge	speak-01	ARG0	you	0.0.0.0	0.0.0.1	
# ::edge	speak-01	ARG2	someone	0.0.0.0	0.0.0.0.0	
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (b / benefit-01
                  :ARG0 (s / speak-01
                        :ARG0 y
                        :ARG2 (s2 / someone))
                  :ARG1 (y / you)
                  :condition (p2 / person
                        :mod (a2 / anxious)
                        :domain y
                        :time (a3 / always))))
      :snt2 (g / get-01
            :ARG0 (p3 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (i / i)
                        :ARG2 (f / friend)))
            :ARG1 (t / therapy)
            :ARG2 (o / organization :wiki "National_Health_Service_(England)" :name (n / name :op1 "NHS"))
            :ARG0-of (c / cause-01
                  :ARG1 (n2 / normal-02
                        :ARG1 (i2 / it)
                        :degree (r / real)))
            :ARG1-of (c2 / cause-01
                  :ARG0 (a4 / anxiety))))

# ::node	0	multi-sentence	
# ::node	0.0	start-01	5-6
# ::node	0.0.0	i	1-2
# ::node	0.0.1	term	9-10
# ::node	0.0.1.0	ordinal-entity	
# ::node	0.0.1.0.0	1	
# ::node	0.0.2	bad-07	4-5
# ::node	0.1	and	10-11
# ::node	0.1.0	delay-01	14-15
# ::node	0.1.0.0	finance-01	12-13
# ::node	0.1.0.0.0	person	11-12
# ::node	0.1.0.0.0.0	study-01	11-12
# ::node	0.1.0.1	add-02	16-17
# ::node	0.1.0.1.0	level	20-21
# ::node	0.1.0.1.0.0	stress-02	19-20
# ::node	0.1.1	worry-01	25-26
# ::node	0.1.1.0	so	24-25
# ::node	0.1.1.1	cause-01	
# ::node	0.1.1.1.0	capable-01	
# ::node	0.1.1.1.0.0	-	
# ::node	0.1.1.1.0.1	progress-01	30-31
# ::node	0.1.1.1.0.1.0	work-01	32-33
# ::node	0.1.2	cause-01	
# ::node	0.1.2.0	pile-01	37-38
# ::node	0.1.2.0.0	all	36-37
# ::node	0.1.2.1	conclude-01	34-35
# ::root	0	multi-sentence
# ::edge	add-02	ARG2	level	0.1.0.1	0.1.0.1.0	
# ::edge	and	ARG1-of	cause-01	0.1	0.1.2	
# ::edge	and	op1	delay-01	0.1	0.1.0	
# ::edge	and	op2	worry-01	0.1	0.1.1	
# ::edge	capable-01	ARG2	progress-01	0.1.1.1.0	0.1.1.1.0.1	
# ::edge	capable-01	polarity	-	0.1.1.1.0	0.1.1.1.0.0	
# ::edge	cause-01	ARG0	pile-01	0.1.2	0.1.2.0	
# ::edge	cause-01	ARG1	capable-01	0.1.1.1	0.1.1.1.0	
# ::edge	cause-01	ARG1-of	conclude-01	0.1.2	0.1.2.1	
# ::edge	delay-01	ARG0-of	add-02	0.1.0	0.1.0.1	
# ::edge	delay-01	ARG1	finance-01	0.1.0	0.1.0.0	
# ::edge	finance-01	ARG1	person	0.1.0.0	0.1.0.0.0	
# ::edge	level	degree-of	stress-02	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	multi-sentence	snt1	start-01	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	ordinal-entity	value	1	0.0.1.0	0.0.1.0.0	
# ::edge	person	ARG0-of	study-01	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	pile-01	ARG1	all	0.1.2.0	0.1.2.0.0	
# ::edge	progress-01	ARG1	work-01	0.1.1.1.0.1	0.1.1.1.0.1.0	
# ::edge	start-01	ARG0	i	0.0	0.0.0	
# ::edge	start-01	ARG1	term	0.0	0.0.1	
# ::edge	start-01	ARG1-of	bad-07	0.0	0.0.2	
# ::edge	stress-02	ARG1	i	0.1.0.1.0.0	0.0.0	
# ::edge	term	ord	ordinal-entity	0.0.1	0.0.1.0	
# ::edge	work-01	ARG0	i	0.1.1.1.0.1.0	0.0.0	
# ::edge	worry-01	ARG0-of	cause-01	0.1.1	0.1.1.1	
# ::edge	worry-01	ARG1	i	0.1.1	0.0.0	
# ::edge	worry-01	degree	so	0.1.1	0.1.1.0	
(m / multi-sentence
      :snt1 (s2 / start-01
            :ARG0 (i / i)
            :ARG1 (t / term
                  :ord (o / ordinal-entity :value 1))
            :ARG1-of (b / bad-07))
      :snt2 (a / and
            :op1 (d / delay-01
                  :ARG1 (f / finance-01
                        :ARG1 (p4 / person
                              :ARG0-of (s / study-01)))
                  :ARG0-of (a3 / add-02
                        :ARG2 (l / level
                              :degree-of (s3 / stress-02
                                    :ARG1 i))))
            :op2 (w / worry-01
                  :ARG1 i
                  :degree (s4 / so)
                  :ARG0-of (c2 / cause-01
                        :ARG1 (c3 / capable-01 :polarity -
                              :ARG2 (p3 / progress-01
                                    :ARG1 (w2 / work-01
                                          :ARG0 i)))))
            :ARG1-of (c4 / cause-01
                  :ARG0 (p2 / pile-01
                        :ARG1 (a2 / all))
                  :ARG1-of (c5 / conclude-01))))

# ::node	0	and	
# ::node	0.0	obligate-01	
# ::node	0.0.0	i	0-1
# ::node	0.0.1	check-01	4-5
# ::node	0.0.1.0	rate-entity-91	
# ::node	0.0.1.0.0	2	
# ::node	0.0.1.0.1	go	8-9
# ::node	0.0.1.0.1.0	1	7-8
# ::node	0.0.2	often	1-2
# ::node	0.1	possible-01	
# ::node	0.1.0	-	
# ::node	0.1.1	resist-01	19-20
# ::node	0.1.1.0	check-01	20-21
# ::node	0.1.1.0.0	again	21-22
# ::node	0.1.2	after	11-12
# ::node	0.1.2.0	temporal-quantity	13-14
# ::node	0.1.2.0.0	30	12-13
# ::node	0.1.2.0.1	second	13-14
# ::node	0.1.3	then	10-11
# ::node	0.1.4	cause-01	
# ::node	0.1.4.0	reason	16-17
# ::node	0.1.4.0.0	some	15-16
# ::root	0	and
# ::edge	after	op1	temporal-quantity	0.1.2	0.1.2.0	
# ::edge	and	op1	obligate-01	0	0.0	
# ::edge	and	op2	possible-01	0	0.1	
# ::edge	cause-01	ARG0	reason	0.1.4	0.1.4.0	
# ::edge	check-01	ARG0	i	0.0.1	0.0.0	
# ::edge	check-01	ARG0	i	0.1.1.0	0.0.0	
# ::edge	check-01	frequency	rate-entity-91	0.0.1	0.0.1.0	
# ::edge	check-01	mod	again	0.1.1.0	0.1.1.0.0	
# ::edge	go	quant	1	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	obligate-01	ARG1	i	0.0	0.0.0	
# ::edge	obligate-01	ARG2	check-01	0.0	0.0.1	
# ::edge	obligate-01	frequency	often	0.0	0.0.2	
# ::edge	possible-01	ARG1	resist-01	0.1	0.1.1	
# ::edge	possible-01	ARG1-of	cause-01	0.1	0.1.4	
# ::edge	possible-01	polarity	-	0.1	0.1.0	
# ::edge	possible-01	time	after	0.1	0.1.2	
# ::edge	possible-01	time	then	0.1	0.1.3	
# ::edge	rate-entity-91	ARG1	2	0.0.1.0	0.0.1.0.0	
# ::edge	rate-entity-91	ARG4	go	0.0.1.0	0.0.1.0.1	
# ::edge	reason	mod	some	0.1.4.0	0.1.4.0.0	
# ::edge	resist-01	ARG0	i	0.1.1	0.0.0	
# ::edge	resist-01	ARG1	check-01	0.1.1	0.1.1.0	
# ::edge	temporal-quantity	quant	30	0.1.2.0	0.1.2.0.0	
# ::edge	temporal-quantity	unit	second	0.1.2.0	0.1.2.0.1	
(a3 / and
      :op1 (o / obligate-01
            :ARG1 (i / i)
            :ARG2 (c / check-01
                  :ARG0 i
                  :frequency (r3 / rate-entity-91
                        :ARG1 2
                        :ARG4 (g / go :quant 1)))
            :frequency (o2 / often))
      :op2 (p / possible-01 :polarity -
            :ARG1 (r / resist-01
                  :ARG0 i
                  :ARG1 (c3 / check-01
                        :ARG0 i
                        :mod (a / again)))
            :time (a2 / after
                  :op1 (t / temporal-quantity :quant 30
                        :unit (s / second)))
            :time (t2 / then)
            :ARG1-of (c4 / cause-01
                  :ARG0 (r2 / reason
                        :mod (s2 / some)))))

# ::node	0	amr-unknown	
# ::node	0.0	do-02	3-4
# ::node	0.0.0	i	2-3
# ::node	0.0.1	this	5-6
# ::node	0.0.2	possible-01	1-2
# ::root	0	amr-unknown
# ::edge	amr-unknown	ARG1-of	do-02	0	0.0	
# ::edge	do-02	ARG0	i	0.0	0.0.0	
# ::edge	do-02	ARG1-of	possible-01	0.0	0.0.2	
# ::edge	do-02	ARG2	this	0.0	0.0.1	
(a / amr-unknown
      :ARG1-of (d / do-02
            :ARG0 (i / i)
            :ARG2 (t / this)
            :ARG1-of (p / possible-01)))

# ::node	0	cause-01	9-10
# ::node	0.0	find-01	17-18
# ::node	0.0.0	i	1-2
# ::node	0.0.1	check-01	31-32
# ::node	0.0.1.0	thing	33-34
# ::node	0.0.1.0.0	belong-01	33-34
# ::node	0.0.1.1	always	30-31
# ::node	0.0.1.2	ensure-01	
# ::node	0.0.1.2.0	or	41-42
# ::node	0.0.1.2.0.0	lose-02	40-41
# ::node	0.0.1.2.0.0.0	-	
# ::node	0.0.1.2.0.0.1	anything	43-44
# ::node	0.0.1.2.0.1	leave-behind-18	42-43
# ::node	0.0.1.2.0.1.0	-	
# ::node	0.0.1.3	rate-entity-91	
# ::node	0.0.1.3.0	go-out-17	
# ::node	0.0.1.3.0.0	university	
# ::node	0.0.1.3.0.0.0	especially	24-25
# ::node	0.0.2	year	13-14
# ::node	0.0.2.0	past	12-13
# ::node	0.1	think-01	2-3
# ::node	0.1.0	get-02	4-5
# ::node	0.1.0.0	disease	8-9
# ::node	0.1.0.0.0	"Obsessive–compulsive_disorder"	
# ::node	0.1.0.0.1	name	8-9
# ::node	0.1.0.0.1.0	"OCD"	8-9
# ::node	0.1.0.0.2	form	6-7
# ::node	0.1.1	so	0-1
# ::root	0	cause-01
# ::edge	belong-01	ARG1	i	0.0.1.0.0	0.0.0	
# ::edge	cause-01	ARG0	find-01	0	0.0	
# ::edge	cause-01	ARG1	think-01	0	0.1	
# ::edge	check-01	ARG0	i	0.0.1	0.0.0	
# ::edge	check-01	ARG1	thing	0.0.1	0.0.1.0	
# ::edge	check-01	frequency	rate-entity-91	0.0.1	0.0.1.3	
# ::edge	check-01	purpose	ensure-01	0.0.1	0.0.1.2	
# ::edge	check-01	time	always	0.0.1	0.0.1.1	
# ::edge	disease	mod	form	0.1.0.0	0.1.0.0.2	
# ::edge	disease	name	name	0.1.0.0	0.1.0.0.1	
# ::edge	disease	wiki	"Obsessive–compulsive_disorder"	0.1.0.0	0.1.0.0.0	
# ::edge	ensure-01	ARG0	i	0.0.1.2	0.0.0	
# ::edge	ensure-01	ARG1	or	0.0.1.2	0.0.1.2.0	
# ::edge	find-01	ARG0	i	0.0	0.0.0	
# ::edge	find-01	ARG1	check-01	0.0	0.0.1	
# ::edge	find-01	time	year	0.0	0.0.2	
# ::edge	get-02	ARG0	i	0.1.0	0.0.0	
# ::edge	get-02	ARG1	disease	0.1.0	0.1.0.0	
# ::edge	go-out-17	ARG0	i	0.0.1.3.0	0.0.0	
# ::edge	go-out-17	direction	university	0.0.1.3.0	0.0.1.3.0.0	
# ::edge	leave-behind-18	ARG0	i	0.0.1.2.0.1	0.0.0	
# ::edge	leave-behind-18	ARG1	anything	0.0.1.2.0.1	0.0.1.2.0.0.1	
# ::edge	leave-behind-18	polarity	-	0.0.1.2.0.1	0.0.1.2.0.1.0	
# ::edge	lose-02	ARG0	i	0.0.1.2.0.0	0.0.0	
# ::edge	lose-02	ARG1	anything	0.0.1.2.0.0	0.0.1.2.0.0.1	
# ::edge	lose-02	polarity	-	0.0.1.2.0.0	0.0.1.2.0.0.0	
# ::edge	name	op1	"OCD"	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	or	op1	lose-02	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	or	op2	leave-behind-18	0.0.1.2.0	0.0.1.2.0.1	
# ::edge	rate-entity-91	ARG4	go-out-17	0.0.1.3	0.0.1.3.0	
# ::edge	thing	ARG0-of	belong-01	0.0.1.0	0.0.1.0.0	
# ::edge	think-01	ARG0	i	0.1	0.0.0	
# ::edge	think-01	ARG1	get-02	0.1	0.1.0	
# ::edge	think-01	mod	so	0.1	0.1.1	
# ::edge	university	mod	especially	0.0.1.3.0.0	0.0.1.3.0.0.0	
# ::edge	year	mod	past	0.0.2	0.0.2.0	
(c / cause-01
      :ARG0 (f / find-01
            :ARG0 (i / i)
            :ARG1 (c2 / check-01
                  :ARG0 i
                  :ARG1 (t / thing
                        :ARG0-of (b / belong-01
                              :ARG1 i))
                  :time (a / always)
                  :purpose (e2 / ensure-01
                        :ARG0 i
                        :ARG1 (o / or
                              :op1 (l / lose-02 :polarity -
                                    :ARG0 i
                                    :ARG1 (a2 / anything))
                              :op2 (l2 / leave-behind-18 :polarity -
                                    :ARG0 i
                                    :ARG1 a2)))
                  :frequency (r / rate-entity-91
                        :ARG4 (g2 / go-out-17
                              :ARG0 i
                              :direction (u / university
                                    :mod (e / especially)))))
            :time (y / year
                  :mod (p / past)))
      :ARG1 (t3 / think-01
            :ARG0 i
            :ARG1 (g / get-02
                  :ARG0 i
                  :ARG1 (d / disease :wiki "Obsessive–compulsive_disorder" :name (n / name :op1 "OCD")
                        :mod (f2 / form)))
            :mod (s / so)))

# ::node	0	multi-sentence	
# ::node	0.0	use-02	1-2
# ::node	0.0.0	i	0-1
# ::node	0.0.1	do-02	3-4
# ::node	0.0.1.0	this	4-5
# ::node	0.0.1.1	way	7-8
# ::node	0.0.1.1.0	college	9-10
# ::node	0.1	and	23-24
# ::node	0.1.0	have-03	12-13
# ::node	0.1.0.0	thing	14-15
# ::node	0.1.0.0.0	list-01	14-15
# ::node	0.1.0.0.0.0	item	16-17
# ::node	0.1.0.0.0.0.0	have-03	20-21
# ::node	0.1.0.0.0.0.0.0	know-01	18-19
# ::node	0.1.1	use-02	24-25
# ::node	0.1.1.0	check-01	26-27
# ::node	0.1.1.0.0	compulsive	27-28
# ::node	0.1.1.0.1	bus	30-31
# ::root	0	multi-sentence
# ::edge	and	op1	have-03	0.1	0.1.0	
# ::edge	and	op2	use-02	0.1	0.1.1	
# ::edge	check-01	ARG0	i	0.1.1.0	0.0.0	
# ::edge	check-01	location	bus	0.1.1.0	0.1.1.0.1	
# ::edge	check-01	manner	compulsive	0.1.1.0	0.1.1.0.0	
# ::edge	do-02	ARG0	i	0.0.1	0.0.0	
# ::edge	do-02	ARG1	this	0.0.1	0.0.1.0	
# ::edge	do-02	time	way	0.0.1	0.0.1.1	
# ::edge	have-03	ARG0	i	0.1.0.0.0.0.0	0.0.0	
# ::edge	have-03	ARG1	thing	0.1.0	0.1.0.0	
# ::edge	have-03	ARG1-of	know-01	0.1.0.0.0.0.0	0.1.0.0.0.0.0.0	
# ::edge	have-03	prep-on	i	0.1.0.0.0.0.0	0.0.0	
# ::edge	item	ARG1-of	have-03	0.1.0.0.0.0	0.1.0.0.0.0.0	
# ::edge	know-01	ARG0	i	0.1.0.0.0.0.0.0	0.0.0	
# ::edge	list-01	ARG1	item	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	multi-sentence	snt1	use-02	0	0.0	
# ::edge	multi-sentence	snt2	and	0	0.1	
# ::edge	thing	ARG2-of	list-01	0.1.0.0	0.1.0.0.0	
# ::edge	use-02	ARG0	i	0.0	0.0.0	
# ::edge	use-02	ARG0	i	0.1.1	0.0.0	
# ::edge	use-02	ARG1	check-01	0.1.1	0.1.1.0	
# ::edge	use-02	ARG1	do-02	0.0	0.0.1	
# ::edge	way	destination	college	0.0.1.1	0.0.1.1.0	
# ::edge	way	poss	i	0.0.1.1	0.0.0	
(m / multi-sentence
      :snt1 (u / use-02
            :ARG0 (i / i)
            :ARG1 (d / do-02
                  :ARG0 i
                  :ARG1 (t / this)
                  :time (w / way
                        :destination (c / college)
                        :poss i)))
      :snt2 (a / and
            :op1 (h / have-03
                  :ARG1 (t2 / thing
                        :ARG2-of (l / list-01
                              :ARG1 (i2 / item
                                    :ARG1-of (h2 / have-03
                                          :ARG0 i
                                          :ARG1-of (k / know-01
                                                :ARG0 i)
                                          :prep-on i)))))
            :op2 (u2 / use-02
                  :ARG0 i
                  :ARG1 (c2 / check-01
                        :ARG0 i
                        :manner (c3 / compulsive)
                        :location (b / bus)))))

