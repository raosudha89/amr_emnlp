# ::node	0	go-02	8-9
# ::node	0.0	person	2-3
# ::node	0.0.0	have-rel-role-91	2-3
# ::node	0.0.0.0	i	
# ::node	0.0.0.1	friend	7-8
# ::node	0.1	away	9-10
# ::node	0.2	sheep	15-16
# ::node	0.3	before	
# ::node	0.3.0	now	
# ::node	0.3.1	temporal-quantity	1-2
# ::node	0.3.1.0	6	0-1
# ::node	0.3.1.1	year	1-2
# ::node	0.4	already	3-4
# ::root	0	go-02
# ::edge	away	op1	i	0.1	0.0.0.0	
# ::edge	before	op1	now	0.3	0.3.0	
# ::edge	before	quant	temporal-quantity	0.3	0.3.1	
# ::edge	go-02	ARG0	person	0	0.0	
# ::edge	go-02	accompanier	sheep	0	0.2	
# ::edge	go-02	direction	away	0	0.1	
# ::edge	go-02	time	already	0	0.4	
# ::edge	go-02	time	before	0	0.3	
# ::edge	have-rel-role-91	ARG1	i	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.0	0.0.0.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0	
# ::edge	sheep	poss	person	0.2	0.0	
# ::edge	temporal-quantity	quant	6	0.3.1	0.3.1.0	
# ::edge	temporal-quantity	unit	year	0.3.1	0.3.1.1	
(g / go-02
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (f / friend)))
      :direction (a / away
            :op1 i)
      :accompanier (s / sheep
            :poss p)
      :time (b / before
            :op1 (n / now)
            :quant (t / temporal-quantity :quant 6
                  :unit (y / year)))
      :time (a3 / already))

# ::node	0	recommend-01	1-2
# ::node	0.0	show-01	3-4
# ::node	0.0.0	child	0-1
# ::node	0.0.1	forbearance	5-6
# ::node	0.0.1.0	great	4-5
# ::node	0.0.2	grown-up	7-8
# ::node	0.0.3	always	2-3
# ::root	0	recommend-01
# ::edge	forbearance	mod	great	0.0.1	0.0.1.0	
# ::edge	recommend-01	ARG1	show-01	0	0.0	
# ::edge	show-01	ARG0	child	0.0	0.0.0	
# ::edge	show-01	ARG1	forbearance	0.0	0.0.1	
# ::edge	show-01	ARG2	grown-up	0.0	0.0.2	
# ::edge	show-01	time	always	0.0	0.0.3	
(r / recommend-01
      :ARG1 (s / show-01
            :ARG0 (c / child)
            :ARG1 (f / forbearance
                  :mod (g / great))
            :ARG2 (g2 / grown-up)
            :time (a / always)))

# ::node	0	obligate-01	
# ::node	0.0	one	0-1
# ::node	0.1	hold-01	3-4
# ::node	0.1.0	-	3-3
# ::node	0.1.1	it	4-5
# ::node	0.1.2	against	5-6
# ::node	0.1.2.0	they	
# ::root	0	obligate-01
# ::edge	against	op1	they	0.1.2	0.1.2.0	
# ::edge	hold-01	ARG0	one	0.1	0.0	
# ::edge	hold-01	ARG1	it	0.1	0.1.1	
# ::edge	hold-01	ARG2	against	0.1	0.1.2	
# ::edge	hold-01	polarity	-	0.1	0.1.0	
# ::edge	obligate-01	ARG1	one	0	0.0	
# ::edge	obligate-01	ARG2	hold-01	0	0.1	
(o / obligate-01
      :ARG1 (o2 / one)
      :ARG2 (h / hold-01 :polarity -
            :ARG0 o2
            :ARG1 (i / it)
            :ARG2 (a / against
                  :op1 (t / they))))

# ::node	0	like-02	3-4
# ::node	0.0	i	0-1
# ::node	0.1	begin-01	5-6
# ::node	0.1.0	story	7-8
# ::node	0.1.0.0	this	6-7
# ::node	0.1.1	fashion	10-11
# ::node	0.1.1.0	tale	15-16
# ::node	0.1.1.0.0	fairy	13-14
# ::root	0	like-02
# ::edge	begin-01	ARG0	i	0.1	0.0	
# ::edge	begin-01	ARG1	story	0.1	0.1.0	
# ::edge	begin-01	manner	fashion	0.1	0.1.1	
# ::edge	fashion	mod	tale	0.1.1	0.1.1.0	
# ::edge	like-02	ARG0	i	0	0.0	
# ::edge	like-02	ARG1	begin-01	0	0.1	
# ::edge	story	mod	this	0.1.0	0.1.0.0	
# ::edge	tale	mod	fairy	0.1.1.0	0.1.1.0.0	
(l / like-02
  :ARG0 (i / i)
  :ARG1 (b / begin-01
          :ARG0 i
          :ARG1 (s / story
                  :mod (t / this))
          :manner (f / fashion
                    :mod (t2 / tale
                           :mod (f2 / fairy)))))

# ::node	0	contrast-01	0-1
# ::node	0.0	certain	1-2
# ::node	0.0.0	indifferent-41	14-15
# ::node	0.0.0.0	we	
# ::node	0.0.0.0.0	understand-01	6-7
# ::node	0.0.0.0.0.0	life	7-8
# ::node	0.0.0.1	figure	9-10
# ::root	0	contrast-01
# ::edge	certain	domain	indifferent-41	0.0	0.0.0	
# ::edge	contrast-01	ARG2	certain	0	0.0	
# ::edge	indifferent-41	ARG1	we	0.0.0	0.0.0.0	
# ::edge	indifferent-41	ARG2	figure	0.0.0	0.0.0.1	
# ::edge	understand-01	ARG1	life	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	we	ARG0-of	understand-01	0.0.0.0	0.0.0.0.0	
(c2 / contrast-01
  :ARG2 (c / certain
          :domain (i2 / indifferent-41
                    :ARG1 (w2 / we
                            :ARG0-of (u / understand-01
                                       :ARG1 (l / life)))
                    :ARG2 (f2 / figure))))

# ::node	0	give-01	9-10
# ::node	0.0	that	6-7
# ::node	0.1	truth	15-16
# ::node	0.1.0	air	13-14
# ::node	0.1.0.0	great	12-13
# ::node	0.1.0.0.0	more	
# ::node	0.1.0.0.0.0	much	11-12
# ::node	0.2	story	18-19
# ::node	0.2.0	i	
# ::node	0.3	person	3-4
# ::node	0.3.0	understand-01	3-4
# ::node	0.3.0.0	life	4-5
# ::root	0	give-01
# ::edge	air	mod	great	0.1.0	0.1.0.0	
# ::edge	give-01	ARG0	that	0	0.0	
# ::edge	give-01	ARG1	truth	0	0.1	
# ::edge	give-01	ARG2	story	0	0.2	
# ::edge	give-01	beneficiary	person	0	0.3	
# ::edge	great	degree	more	0.1.0.0	0.1.0.0.0	
# ::edge	more	degree	much	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	person	ARG0-of	understand-01	0.3	0.3.0	
# ::edge	story	poss	i	0.2	0.2.0	
# ::edge	truth	quant	air	0.1	0.1.0	
# ::edge	understand-01	ARG1	life	0.3.0	0.3.0.0	
(g / give-01
  :ARG0 (t / that)
  :ARG1 (t3 / truth
          :quant (a / air
                   :mod (g2 / great
                          :degree (m / more
                                    :degree (m2 / much)))))
  :ARG2 (s / story
          :poss (i / i))
  :beneficiary (p / person
                 :ARG0-of (u / understand-01
                            :ARG1 (l / life))))

# ::node	0	like-02	3-4
# ::node	0.0	i	0-1
# ::node	0.1	say-01	5-6
# ::node	0.1.0	prince	16-17
# ::node	0.1.0.0	little	15-16
# ::node	0.1.0.1	live-01	18-19
# ::node	0.1.0.1.0	planet	21-22
# ::node	0.1.0.1.0.0	big	26-27
# ::node	0.1.0.1.0.0.0	more	
# ::node	0.1.0.1.0.0.0.0	scarce	24-25
# ::node	0.1.0.2	need-01	33-34
# ::node	0.1.0.2.0	sheep	36-37
# ::node	0.1.0.3	once-upon-a-time	8-9
# ::root	0	like-02
# ::edge	big	compared-to	prince	0.1.0.1.0.0	0.1.0	
# ::edge	big	degree	more	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	like-02	ARG0	i	0	0.0	
# ::edge	like-02	ARG1	say-01	0	0.1	
# ::edge	live-01	location	planet	0.1.0.1	0.1.0.1.0	
# ::edge	more	quant	scarce	0.1.0.1.0.0.0	0.1.0.1.0.0.0.0	
# ::edge	need-01	ARG1	sheep	0.1.0.2	0.1.0.2.0	
# ::edge	planet	mod	big	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	prince	ARG0-of	live-01	0.1.0	0.1.0.1	
# ::edge	prince	ARG0-of	need-01	0.1.0	0.1.0.2	
# ::edge	prince	mod	little	0.1.0	0.1.0.0	
# ::edge	prince	time	once-upon-a-time	0.1.0	0.1.0.3	
# ::edge	say-01	ARG0	i	0.1	0.0	
# ::edge	say-01	ARG1	prince	0.1	0.1.0	
(l / like-02
      :ARG0 (i / i)
      :ARG1 (s / say-01
            :ARG0 i
            :ARG1 (p / prince
                  :mod (l2 / little)
                  :ARG0-of (l3 / live-01
                        :location (p2 / planet
                              :mod (b / big
                                    :degree (m / more
                                          :quant (s2 / scarce))
                                    :compared-to p)))
                  :ARG0-of (n / need-01
                        :ARG1 (s3 / sheep))
                  :time (o / once-upon-a-time))))

# ::node	0	suffer-01	2-3
# ::node	0.0	i	0-1
# ::node	0.1	grief	5-6
# ::node	0.1.0	much	4-5
# ::node	0.1.0.0	too	3-4
# ::node	0.2	set-09	7-8
# ::node	0.2.0	memory	10-11
# ::node	0.2.0.0	this	
# ::root	0	suffer-01
# ::edge	grief	quant	much	0.1	0.1.0	
# ::edge	memory	mod	this	0.2.0	0.2.0.0	
# ::edge	much	degree	too	0.1.0	0.1.0.0	
# ::edge	set-09	ARG0	i	0.2	0.0	
# ::edge	set-09	ARG1	memory	0.2	0.2.0	
# ::edge	suffer-01	ARG0	i	0	0.0	
# ::edge	suffer-01	ARG1	grief	0	0.1	
# ::edge	suffer-01	time	set-09	0	0.2	
(s / suffer-01
      :ARG0 (i / i)
      :ARG1 (g / grief
            :quant (m / much
                  :degree (t / too)))
      :time (s2 / set-09
            :ARG0 i
            :ARG1 (m2 / memory
                  :mod (t2 / this))))

# ::node	0	cause-01	
# ::node	0.0	want-01	4-5
# ::node	0.0.0	i	1-2
# ::node	0.0.1	read-01	8-9
# ::node	0.0.1.0	anyone	
# ::node	0.0.1.1	book	10-11
# ::node	0.0.1.2	careless	11-12
# ::node	0.0.2	-	4-4
# ::root	0	cause-01
# ::edge	book	poss	i	0.0.1.1	0.0.0	
# ::edge	cause-01	ARG0	want-01	0	0.0	
# ::edge	read-01	ARG0	anyone	0.0.1	0.0.1.0	
# ::edge	read-01	ARG1	book	0.0.1	0.0.1.1	
# ::edge	read-01	manner	careless	0.0.1	0.0.1.2	
# ::edge	want-01	ARG0	i	0.0	0.0.0	
# ::edge	want-01	ARG1	read-01	0.0	0.0.1	
# ::edge	want-01	polarity	-	0.0	0.0.2	
(c / cause-01
      :ARG0 (w / want-01
            :ARG0 (i / i)
            :ARG1 (r / read-01
                  :ARG0 (a / anyone)
                  :ARG1 (b / book
                        :poss i)
                  :manner (c2 / careless))
            :polarity -))

# ::node	0	ensure-01	
# ::node	0.0	forget-01	17-18
# ::node	0.0.0	he	
# ::node	0.0.1	-	17-17
# ::node	0.1	try-01	2-3
# ::node	0.1.0	i	1-2
# ::node	0.1.1	describe-01	4-5
# ::node	0.1.1.0	he	
# ::node	0.1.1.1	here	6-7
# ::root	0	ensure-01
# ::edge	describe-01	ARG0	i	0.1.1	0.1.0	
# ::edge	describe-01	ARG1	he	0.1.1	0.1.1.0	
# ::edge	describe-01	location	here	0.1.1	0.1.1.1	
# ::edge	ensure-01	ARG1	forget-01	0	0.0	
# ::edge	ensure-01	condition	try-01	0	0.1	
# ::edge	forget-01	ARG0	i	0.0	0.1.0	
# ::edge	forget-01	ARG1	he	0.0	0.0.0	
# ::edge	forget-01	polarity	-	0.0	0.0.1	
# ::edge	try-01	ARG0	i	0.1	0.1.0	
# ::edge	try-01	ARG1	describe-01	0.1	0.1.1	
(e / ensure-01
  :ARG1 (f / forget-01
          :ARG0 i
          :ARG1 (h3 / he)
          :polarity -)
  :condition (t / try-01
               :ARG0 (i / i)
               :ARG1 (d / describe-01
                       :ARG0 i
                       :ARG1 (h / he)
                       :location (h2 / here))))

# ::node	0	contrast-01	0-1
# ::node	0.0	succeed-01	8-9
# ::node	0.0.0	-	7-7
# ::node	0.0.1	i	4-5
# ::node	0.0.2	other	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	succeed-01	0	0.0	
# ::edge	succeed-01	ARG0	i	0.0	0.0.1	
# ::edge	succeed-01	ARG1	other	0.0	0.0.2	
# ::edge	succeed-01	polarity	-	0.0	0.0.0	
(c / contrast-01
      :ARG2 (s / succeed-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (o / other)))

# ::node	0	carry-01	10-11
# ::node	0.0	force-01	16-17
# ::node	0.0.0	necessity	19-20
# ::node	0.0.0.0	urgent	18-19
# ::node	0.0.1	inspire-01	15-16
# ::node	0.1	i	1-2
# ::node	0.2	beyond	11-12
# ::node	0.3	draw-01	4-5
# ::node	0.3.0	baobab	7-8
# ::root	0	carry-01
# ::edge	beyond	op1	i	0.2	0.1	
# ::edge	carry-01	ARG0	force-01	0	0.0	
# ::edge	carry-01	ARG1	i	0	0.1	
# ::edge	carry-01	destination	beyond	0	0.2	
# ::edge	carry-01	time	draw-01	0	0.3	
# ::edge	draw-01	ARG0	i	0.3	0.1	
# ::edge	draw-01	ARG1	baobab	0.3	0.3.0	
# ::edge	force-01	ARG0	necessity	0.0	0.0.0	
# ::edge	force-01	ARG0-of	inspire-01	0.0	0.0.1	
# ::edge	necessity	mod	urgent	0.0.0	0.0.0.0	
(c / carry-01
      :ARG0 (f / force-01
            :ARG0 (n / necessity
                  :mod (u / urgent))
            :ARG0-of (i2 / inspire-01))
      :ARG1 (i / i)
      :destination (b / beyond
            :op1 i)
      :time (d / draw-01
            :ARG0 i
            :ARG1 (b2 / baobab)))

# ::node	0	chapter	0-1
# ::node	0.0	6	1-2
# ::root	0	chapter
# ::edge	chapter	mod	6	0	0.0	
(c / chapter :mod 6)

# ::node	0	prince	3-4
# ::node	0.0	little	2-3
# ::root	0	prince
# ::edge	prince	mod	little	0	0.0	
(p / prince
      :mod (l / little))

# ::node	0	understand-01	6-7
# ::node	0.0	i	3-4
# ::node	0.1	secret	8-9
# ::node	0.1.0	life	13-14
# ::node	0.1.0.0	you	
# ::node	0.1.0.1	little	12-13
# ::node	0.1.0.2	sad	11-12
# ::node	0.2	bit-by-bit	
# ::root	0	understand-01
# ::edge	life	mod	little	0.1.0	0.1.0.1	
# ::edge	life	mod	sad	0.1.0	0.1.0.2	
# ::edge	life	poss	you	0.1.0	0.1.0.0	
# ::edge	secret	poss	life	0.1	0.1.0	
# ::edge	understand-01	ARG0	i	0	0.0	
# ::edge	understand-01	ARG1	secret	0	0.1	
# ::edge	understand-01	manner	bit-by-bit	0	0.2	
(u / understand-01
      :ARG0 (i / i)
      :ARG1 (s / secret
            :poss (l / life
                  :poss (y / you)
                  :mod (l2 / little)
                  :mod (s2 / sad)))
      :manner (b / bit-by-bit))

# ::node	0	find-01	6-7
# ::node	0.0	you	4-5
# ::node	0.1	entertain-01	9-10
# ::node	0.1.0	look-01	15-16
# ::node	0.1.0.0	sunset	18-19
# ::node	0.1.0.1	pleasure	13-14
# ::node	0.1.0.1.0	quiet	12-13
# ::node	0.1.1	only	8-9
# ::node	0.2	time	3-4
# ::node	0.2.0	long	2-3
# ::root	0	find-01
# ::edge	entertain-01	ARG0	look-01	0.1	0.1.0	
# ::edge	entertain-01	ARG1	you	0.1	0.0	
# ::edge	entertain-01	mod	only	0.1	0.1.1	
# ::edge	find-01	ARG0	you	0	0.0	
# ::edge	find-01	ARG1	entertain-01	0	0.1	
# ::edge	find-01	duration	time	0	0.2	
# ::edge	look-01	ARG0	you	0.1.0	0.0	
# ::edge	look-01	ARG1	sunset	0.1.0	0.1.0.0	
# ::edge	look-01	mod	pleasure	0.1.0	0.1.0.1	
# ::edge	pleasure	mod	quiet	0.1.0.1	0.1.0.1.0	
# ::edge	time	mod	long	0.2	0.2.0	
(f / find-01
      :ARG0 (y / you)
      :ARG1 (e / entertain-01
            :ARG0 (l2 / look-01
                  :ARG0 y
                  :ARG1 (s / sunset)
                  :mod (p / pleasure
                        :mod (q / quiet)))
            :ARG1 y
            :mod (o / only))
      :duration (t / time
            :mod (l / long)))

# ::node	0	learn-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	detail	4-5
# ::node	0.1.0	new	3-4
# ::node	0.1.1	that	2-3
# ::node	0.2	morning	7-8
# ::node	0.2.0	day	11-12
# ::node	0.2.0.0	ordinal-entity	
# ::node	0.2.0.0.0	4	
# ::node	0.3	say-01	15-16
# ::node	0.3.0	you	14-15
# ::node	0.3.1	like-01	
# ::node	0.3.1.0	sunset	25-26
# ::node	0.3.1.1	very	22-23
# ::root	0	learn-01
# ::edge	day	ord	ordinal-entity	0.2.0	0.2.0.0	
# ::edge	detail	mod	new	0.1	0.1.0	
# ::edge	detail	mod	that	0.1	0.1.1	
# ::edge	learn-01	ARG0	i	0	0.0	
# ::edge	learn-01	ARG1	detail	0	0.1	
# ::edge	learn-01	time	morning	0	0.2	
# ::edge	learn-01	time	say-01	0	0.3	
# ::edge	like-01	ARG0	you	0.3.1	0.3.0	
# ::edge	like-01	ARG1	sunset	0.3.1	0.3.1.0	
# ::edge	like-01	degree	very	0.3.1	0.3.1.1	
# ::edge	morning	time	day	0.2	0.2.0	
# ::edge	ordinal-entity	value	4	0.2.0.0	0.2.0.0.0	
# ::edge	say-01	ARG0	you	0.3	0.3.0	
# ::edge	say-01	ARG1	like-01	0.3	0.3.1	
# ::edge	say-01	ARG2	i	0.3	0.0	
(l / learn-01
      :ARG0 (i / i)
      :ARG1 (d / detail
            :mod (n / new)
            :mod (t / that))
      :time (m / morning
            :time (d2 / day
                  :ord (o / ordinal-entity :value 4)))
      :time (s / say-01
            :ARG0 (y / you)
            :ARG1 (l2 / like-01
                  :ARG0 y
                  :ARG1 (s2 / sunset)
                  :degree (v / very))
            :ARG2 i))

# ::node	0	know-01	1-2
# ::node	0.0	everybody	0-1
# ::node	0.1	set-11	14-15
# ::node	0.1.0	sun	12-13
# ::node	0.1.1	country	16-17
# ::node	0.1.1.0	"France"	
# ::node	0.1.1.1	name	16-17
# ::node	0.1.1.1.0	"France"	16-17
# ::node	0.1.2	date-entity	
# ::node	0.1.2.0	"12:00"	
# ::node	0.1.2.1	country	9-11
# ::node	0.1.2.1.0	"United_States"	
# ::node	0.1.2.1.1	name	9-11
# ::node	0.1.2.1.1.0	"United"	9-11
# ::node	0.1.2.1.1.1	"States"	9-11
# ::root	0	know-01
# ::edge	country	name	name	0.1.1	0.1.1.1	
# ::edge	country	name	name	0.1.2.1	0.1.2.1.1	
# ::edge	country	wiki	"France"	0.1.1	0.1.1.0	
# ::edge	country	wiki	"United_States"	0.1.2.1	0.1.2.1.0	
# ::edge	date-entity	location	country	0.1.2	0.1.2.1	
# ::edge	date-entity	time	"12:00"	0.1.2	0.1.2.0	
# ::edge	know-01	ARG0	everybody	0	0.0	
# ::edge	know-01	ARG1	set-11	0	0.1	
# ::edge	name	op1	"France"	0.1.1.1	0.1.1.1.0	
# ::edge	name	op1	"United"	0.1.2.1.1	0.1.2.1.1.0	
# ::edge	name	op2	"States"	0.1.2.1.1	0.1.2.1.1.1	
# ::edge	set-11	ARG1	sun	0.1	0.1.0	
# ::edge	set-11	location	country	0.1	0.1.1	
# ::edge	set-11	time	date-entity	0.1	0.1.2	
(k / know-01
      :ARG0 (e / everybody)
      :ARG1 (s / set-11
            :ARG1 (s2 / sun)
            :location (c2 / country :wiki "France"
                  :name (n3 / name :op1 "France"))
            :time (d / date-entity :time "12:00"
                  :location (c / country :wiki "United_States"
                        :name (n2 / name :op1 "United" :op2 "States")))))

# ::node	0	so	1-2
# ::node	0.0	just	0-1
# ::root	0	so
# ::edge	so	mod	just	0	0.0	
(s / so
  :mod (j / just))

# ::node	0	wait-01	
# ::node	0.0	sunset	3-4
# ::root	0	wait-01
# ::edge	wait-01	ARG2	sunset	0	0.0	
(w / wait-01
      :ARG2 (s / sunset))

# ::node	0	wait-01	
# ::node	0.0	amr-unknown	
# ::root	0	wait-01
# ::edge	wait-01	ARG2	amr-unknown	0	0.0	
(w / wait-01
      :ARG2 (a / amr-unknown))

# ::node	0	wait-01	1-2
# ::node	0.0	interrogative	
# ::root	0	wait-01
# ::edge	wait-01	mode	interrogative	0	0.0	
(w / wait-01 :mode interrogative)

# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
(s / say-01
  :ARG0 (i / i))

# ::node	0	say-01	1-2
# ::node	0.0	you	0-1
# ::node	0.1	think-01	9-10
# ::node	0.1.0	be-located-at-91	
# ::node	0.1.0.0	home	14-15
# ::node	0.1.1	always	8-9
# ::node	0.2	i	6-7
# ::root	0	say-01
# ::edge	be-located-at-91	ARG1	you	0.1.0	0.0	
# ::edge	be-located-at-91	ARG2	home	0.1.0	0.1.0.0	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	think-01	0	0.1	
# ::edge	say-01	ARG2	i	0	0.2	
# ::edge	think-01	ARG0	you	0.1	0.0	
# ::edge	think-01	ARG1	be-located-at-91	0.1	0.1.0	
# ::edge	think-01	time	always	0.1	0.1.1	
(s / say-01
      :ARG0 (y / you)
      :ARG1 (t / think-01
            :ARG0 y
            :ARG1 (b / be-located-at-91
                  :ARG1 y
                  :ARG2 (h / home))
            :time (a / always))
      :ARG2 (i / i))

# ::node	0	and	0-1
# ::node	0.0	laugh-01	3-4
# ::node	0.0.0	you	2-3
# ::node	0.0.1	then	1-2
# ::root	0	and
# ::edge	and	op1	laugh-01	0	0.0	
# ::edge	laugh-01	ARG0	you	0.0	0.0.0	
# ::edge	laugh-01	ARG2	you	0.0	0.0.0	
# ::edge	laugh-01	time	then	0.0	0.0.1	
(a / and
      :op1 (l / laugh-01
            :ARG0 (y / you)
            :ARG2 y
            :time (t / then)))

# ::node	0	seem-01	3-4
# ::node	0.0	surprise-01	8-9
# ::node	0.0.0	you	2-3
# ::node	0.0.1	much	7-8
# ::node	0.0.1.0	very	6-7
# ::node	0.1	at-first	
# ::root	0	seem-01
# ::edge	much	degree	very	0.0.1	0.0.1.0	
# ::edge	seem-01	ARG1	surprise-01	0	0.0	
# ::edge	seem-01	time	at-first	0	0.1	
# ::edge	surprise-01	ARG1	you	0.0	0.0.0	
# ::edge	surprise-01	degree	much	0.0	0.0.1	
(s / seem-01
      :ARG1 (s2 / surprise-01
            :ARG1 (y / you)
            :degree (m / much
                  :degree (v / very)))
      :time (a / at-first))

# ::node	0	obligate-01	
# ::node	0.0	wait-01	2-3
# ::node	0.0.0	we	0-1
# ::node	0.0.1	until	3-4
# ::node	0.0.1.0	time	6-7
# ::root	0	obligate-01
# ::edge	obligate-01	ARG2	wait-01	0	0.0	
# ::edge	until	op1	time	0.0.1	0.0.1.0	
# ::edge	wait-01	ARG1	we	0.0	0.0.0	
# ::edge	wait-01	duration	until	0.0	0.0.1	
(o / obligate-01
      :ARG2 (w2 / wait-01
            :ARG1 (w / we)
            :duration (u / until
                  :op1 (t / time))))

# ::node	0	and	
# ::node	0.0	come-01	0-1
# ::node	0.0.0	imperative	
# ::node	0.0.1	you	
# ::node	0.1	go-05	4-5
# ::node	0.1.0	imperative	
# ::node	0.1.1	look-01	5-6
# ::node	0.1.1.0	we	
# ::node	0.1.1.1	sunset	8-9
# ::node	0.1.1.2	now	9-10
# ::root	0	and
# ::edge	and	op1	come-01	0	0.0	
# ::edge	and	op2	go-05	0	0.1	
# ::edge	come-01	ARG1	you	0.0	0.0.1	
# ::edge	come-01	mode	imperative	0.0	0.0.0	
# ::edge	go-05	ARG0	we	0.1	0.1.1.0	
# ::edge	go-05	ARG1	look-01	0.1	0.1.1	
# ::edge	go-05	mode	imperative	0.1	0.1.0	
# ::edge	look-01	ARG0	we	0.1.1	0.1.1.0	
# ::edge	look-01	ARG1	sunset	0.1.1	0.1.1.1	
# ::edge	look-01	time	now	0.1.1	0.1.1.2	
(a / and
      :op1 (c / come-01 :mode imperative
            :ARG1 (y / you))
      :op2 (g / go-05 :mode imperative
            :ARG0 w
            :ARG1 (l / look-01
                  :ARG0 (w / we)
                  :ARG1 (s / sunset)
                  :time (n / now))))

# ::node	0	try-01	2-3
# ::node	0.0	i	0-1
# ::root	0	try-01
# ::edge	try-01	ARG0	i	0	0.0	
(t / try-01
  :ARG0 (i / i))

# ::node	0	contrast-01	1-2
# ::node	0.0	obligate-01	
# ::node	0.0.0	wait-01	4-5
# ::node	0.0.0.0	we	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	obligate-01	0	0.0	
# ::edge	obligate-01	ARG2	wait-01	0.0	0.0.0	
# ::edge	wait-01	ARG1	we	0.0.0	0.0.0.0	
(c / contrast-01
      :ARG2 (o / obligate-01
            :ARG2 (w2 / wait-01
                  :ARG1 (w / we))))

# ::node	0	contrast-01	0-1
# ::node	0.0	and	26-27
# ::node	0.0.0	convince-01	24-25
# ::node	0.0.0.0	they	21-22
# ::node	0.0.1	leave-01	27-28
# ::node	0.0.1.0	peace	30-31
# ::node	0.0.1.0.0	question-01	33-34
# ::node	0.0.1.0.0.0	-	
# ::node	0.0.2	say-01	3-4
# ::node	0.0.2.0	you	2-3
# ::node	0.0.2.1	come-01	11-12
# ::node	0.0.2.1.0	he	10-11
# ::node	0.0.2.1.1	planet	9-10
# ::node	0.0.2.1.1.0	-	
# ::node	0.0.2.1.1.1	name	14-16
# ::node	0.0.2.1.1.1.0	"Asteroid"	14-16
# ::node	0.0.2.1.1.1.1	"B-612"	14-16
# ::root	0	contrast-01
# ::edge	and	condition	say-01	0.0	0.0.2	
# ::edge	and	op1	convince-01	0.0	0.0.0	
# ::edge	and	op2	leave-01	0.0	0.0.1	
# ::edge	come-01	ARG1	he	0.0.2.1	0.0.2.1.0	
# ::edge	come-01	ARG3	planet	0.0.2.1	0.0.2.1.1	
# ::edge	contrast-01	ARG2	and	0	0.0	
# ::edge	convince-01	ARG1	they	0.0.0	0.0.0.0	
# ::edge	leave-01	ARG0	they	0.0.1	0.0.0.0	
# ::edge	leave-01	ARG1	you	0.0.1	0.0.2.0	
# ::edge	leave-01	ARG2	peace	0.0.1	0.0.1.0	
# ::edge	name	op1	"Asteroid"	0.0.2.1.1.1	0.0.2.1.1.1.0	
# ::edge	name	op2	"B-612"	0.0.2.1.1.1	0.0.2.1.1.1.1	
# ::edge	peace	topic	question-01	0.0.1.0	0.0.1.0.0	
# ::edge	planet	name	name	0.0.2.1.1	0.0.2.1.1.1	
# ::edge	planet	wiki	-	0.0.2.1.1	0.0.2.1.1.0	
# ::edge	question-01	ARG0	they	0.0.1.0.0	0.0.0.0	
# ::edge	question-01	polarity	-	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	say-01	ARG0	you	0.0.2	0.0.2.0	
# ::edge	say-01	ARG1	come-01	0.0.2	0.0.2.1	
# ::edge	say-01	ARG2	they	0.0.2	0.0.0.0	
(c3 / contrast-01
      :ARG2 (a / and
            :op1 (c / convince-01
                  :ARG1 (t / they))
            :op2 (l / leave-01
                  :ARG0 t
                  :ARG1 y
                  :ARG2 (p2 / peace
                        :topic (q2 / question-01 :polarity -
                              :ARG0 t)))
            :condition (s / say-01
                  :ARG0 (y / you)
                  :ARG1 (c2 / come-01
                        :ARG1 (h / he)
                        :ARG3 (p / planet :wiki - :name (n / name :op1 "Asteroid" :op2 "B-612")))
                  :ARG2 t)))

# ::node	0	resemble-01	
# ::node	0.0	they	0-1
# ::node	0.1	that	3-4
# ::root	0	resemble-01
# ::edge	resemble-01	ARG1	they	0	0.0	
# ::edge	resemble-01	ARG2	that	0	0.1	
(r / resemble-01
      :ARG1 (t / they)
      :ARG2 (t2 / that))

# ::node	0	possible	
# ::node	0.0	say-01	5-6
# ::node	0.0.0	you	3-4
# ::node	0.0.1	prove-01	
# ::node	0.0.1.0	and	27-28
# ::node	0.0.1.0.0	charming	21-22
# ::node	0.0.1.0.0.0	he	19-20
# ::node	0.0.1.0.1	laugh-01	25-26
# ::node	0.0.1.0.2	look-01	31-32
# ::node	0.0.1.0.2.0	sheep	34-35
# ::node	0.0.1.1	exist-01	16-17
# ::node	0.0.1.1.0	prince	15-16
# ::node	0.0.1.1.0.0	little	14-15
# ::node	0.0.2	they	
# ::node	0.0.3	just-so	0-1
# ::root	0	possible
# ::edge	and	op1	charming	0.0.1.0	0.0.1.0.0	
# ::edge	and	op2	laugh-01	0.0.1.0	0.0.1.0.1	
# ::edge	and	op3	look-01	0.0.1.0	0.0.1.0.2	
# ::edge	charming	domain	he	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	exist-01	ARG1	prince	0.0.1.1	0.0.1.1.0	
# ::edge	laugh-01	ARG0	he	0.0.1.0.1	0.0.1.0.0.0	
# ::edge	look-01	ARG0	he	0.0.1.0.2	0.0.1.0.0.0	
# ::edge	look-01	ARG1	sheep	0.0.1.0.2	0.0.1.0.2.0	
# ::edge	possible	domain	say-01	0	0.0	
# ::edge	prince	mod	little	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	prove-01	ARG0	and	0.0.1	0.0.1.0	
# ::edge	prove-01	ARG1	exist-01	0.0.1	0.0.1.1	
# ::edge	say-01	ARG0	you	0.0	0.0.0	
# ::edge	say-01	ARG1	prove-01	0.0	0.0.1	
# ::edge	say-01	ARG2	they	0.0	0.0.2	
# ::edge	say-01	manner	just-so	0.0	0.0.3	
(p / possible
      :domain (s2 / say-01
            :ARG0 (y / you)
            :ARG1 (p2 / prove-01
                  :ARG0 (a / and
                        :op1 (c / charming
                              :domain (h / he))
                        :op2 (l / laugh-01
                              :ARG0 h)
                        :op3 (l2 / look-01
                              :ARG0 h
                              :ARG1 (s3 / sheep)))
                  :ARG1 (e / exist-01
                        :ARG1 (p3 / prince
                              :mod (l3 / little))))
            :ARG2 (t / they)
            :manner (j / just-so)))

# ::node	0	prove-01	
# ::node	0.0	want-01	2-3
# ::node	0.0.0	anybody	1-2
# ::node	0.0.1	sheep	4-5
# ::node	0.1	exist-01	12-13
# ::root	0	prove-01
# ::edge	exist-01	ARG1	anybody	0.1	0.0.0	
# ::edge	prove-01	ARG0	want-01	0	0.0	
# ::edge	prove-01	ARG1	exist-01	0	0.1	
# ::edge	want-01	ARG0	anybody	0.0	0.0.0	
# ::edge	want-01	ARG1	sheep	0.0	0.0.1	
(p / prove-01
  :ARG0 (w / want-01
          :ARG0 (a / anybody)
          :ARG1 (s / sheep))
  :ARG1 (e / exist-01
          :ARG1 a))

# ::node	0	and	0-1
# ::node	0.0	do-02	5-6
# ::node	0.0.0	tell-01	7-8
# ::node	0.0.0.0	that	9-10
# ::node	0.0.0.1	they	
# ::node	0.0.1	good	2-3
# ::node	0.0.1.0	amr-unknown	
# ::root	0	and
# ::edge	and	op2	do-02	0	0.0	
# ::edge	do-02	ARG0	tell-01	0.0	0.0.0	
# ::edge	do-02	ARG1	good	0.0	0.0.1	
# ::edge	good	quant	amr-unknown	0.0.1	0.0.1.0	
# ::edge	tell-01	ARG1	that	0.0.0	0.0.0.0	
# ::edge	tell-01	ARG2	they	0.0.0	0.0.0.1	
(a / and
  :op2 (d / do-02
         :ARG0 (t / tell-01
                 :ARG1 (t3 / that)
                 :ARG2 (t2 / they))
         :ARG1 (g / good
                 :quant (a2 / amr-unknown))))

# ::node	0	and	6-7
# ::node	0.0	shrug-01	2-3
# ::node	0.0.0	they	0-1
# ::node	0.0.1	shoulder	4-5
# ::node	0.1	treat-01	7-8
# ::node	0.1.0	you	8-9
# ::node	0.1.1	child	11-12
# ::root	0	and
# ::edge	and	op1	shrug-01	0	0.0	
# ::edge	and	op2	treat-01	0	0.1	
# ::edge	shoulder	poss	they	0.0.1	0.0.0	
# ::edge	shrug-01	ARG0	they	0.0	0.0.0	
# ::edge	shrug-01	ARG1	shoulder	0.0	0.0.1	
# ::edge	treat-01	ARG0	they	0.1	0.0.0	
# ::edge	treat-01	ARG1	you	0.1	0.1.0	
# ::edge	treat-01	ARG2	child	0.1	0.1.1	
(a / and
      :op1 (s / shrug-01
            :ARG0 (t / they)
            :ARG1 (s2 / shoulder
                  :poss t))
      :op2 (t2 / treat-01
            :ARG0 t
            :ARG1 (y / you)
            :ARG2 (c / child)))

# ::node	0	think-01	6-7
# ::node	0.0	they	5-6
# ::node	0.1	learn-01	9-10
# ::node	0.1.0	anything	10-11
# ::node	0.1.0.0	he	
# ::node	0.1.1	figure	3-4
# ::node	0.1.1.0	this	
# ::node	0.1.1.0.0	only	0-1
# ::root	0	think-01
# ::edge	anything	topic	he	0.1.0	0.1.0.0	
# ::edge	figure	mod	this	0.1.1	0.1.1.0	
# ::edge	learn-01	ARG0	they	0.1	0.0	
# ::edge	learn-01	ARG1	anything	0.1	0.1.0	
# ::edge	learn-01	source	figure	0.1	0.1.1	
# ::edge	think-01	ARG0	they	0	0.0	
# ::edge	think-01	ARG1	learn-01	0	0.1	
# ::edge	this	mod	only	0.1.1.0	0.1.1.0.0	
(t / think-01
      :ARG0 (t2 / they)
      :ARG1 (l / learn-01
            :ARG0 t2
            :ARG1 (a / anything
                  :topic (h / he))
            :source (f / figure
                  :mod (t3 / this
                        :mod (o / only)))))

# ::node	0	possible	38-39
# ::node	0.0	-	37-37
# ::node	0.1	get-01	40-41
# ::node	0.1.0	idea	42-43
# ::node	0.1.0.0	any	41-42
# ::node	0.1.0.1	at	46-47
# ::node	0.1.0.1.0	all	47-48
# ::node	0.2	say-01	4-5
# ::node	0.2.0	you	1-2
# ::node	0.2.1	see-01	13-14
# ::node	0.2.1.0	house	16-17
# ::node	0.2.1.0.0	make-01	17-18
# ::node	0.2.1.0.0.0	brick	20-21
# ::node	0.2.1.0.0.0.0	rosy	19-20
# ::node	0.2.1.0.1	and	27-28
# ::node	0.2.1.0.1.0	geranium	23-24
# ::node	0.2.1.0.1.0.0	window	26-27
# ::node	0.2.1.0.1.1	dove	28-29
# ::node	0.2.1.0.1.1.0	roof	31-32
# ::node	0.2.1.0.2	beautiful	15-16
# ::node	0.2.2	grown-up	7-8
# ::root	0	possible
# ::edge	and	op1	geranium	0.2.1.0.1	0.2.1.0.1.0	
# ::edge	and	op2	dove	0.2.1.0.1	0.2.1.0.1.1	
# ::edge	at	mod	all	0.1.0.1	0.1.0.1.0	
# ::edge	brick	mod	rosy	0.2.1.0.0.0	0.2.1.0.0.0.0	
# ::edge	dove	location	roof	0.2.1.0.1.1	0.2.1.0.1.1.0	
# ::edge	geranium	location	window	0.2.1.0.1.0	0.2.1.0.1.0.0	
# ::edge	get-01	ARG0	grown-up	0.1	0.2.2	
# ::edge	get-01	ARG1	idea	0.1	0.1.0	
# ::edge	house	ARG1-of	make-01	0.2.1.0	0.2.1.0.0	
# ::edge	house	accompanier	and	0.2.1.0	0.2.1.0.1	
# ::edge	house	mod	beautiful	0.2.1.0	0.2.1.0.2	
# ::edge	idea	mod	any	0.1.0	0.1.0.0	
# ::edge	idea	mod	at	0.1.0	0.1.0.1	
# ::edge	idea	topic	house	0.1.0	0.2.1.0	
# ::edge	make-01	ARG2	brick	0.2.1.0.0	0.2.1.0.0.0	
# ::edge	possible	condition	say-01	0	0.2	
# ::edge	possible	domain	get-01	0	0.1	
# ::edge	possible	polarity	-	0	0.0	
# ::edge	say-01	ARG0	you	0.2	0.2.0	
# ::edge	say-01	ARG1	see-01	0.2	0.2.1	
# ::edge	say-01	ARG2	grown-up	0.2	0.2.2	
# ::edge	see-01	ARG0	you	0.2.1	0.2.0	
# ::edge	see-01	ARG1	house	0.2.1	0.2.1.0	
(p / possible :polarity -
      :domain (g / get-01
            :ARG0 g2
            :ARG1 (i / idea
                  :mod (a / any)
                  :mod (a2 / at
                        :mod (a3 / all))
                  :topic h2))
      :condition (s / say-01
            :ARG0 (y / you)
            :ARG1 (s2 / see-01
                  :ARG0 y
                  :ARG1 (h2 / house
                        :ARG1-of (m / make-01
                              :ARG2 (b / brick
                                    :mod (r / rosy)))
                        :accompanier (a4 / and
                              :op1 (g3 / geranium
                                    :location (w / window))
                              :op2 (d / dove
                                    :location (r2 / roof)))
                        :mod (b3 / beautiful)))
            :ARG2 (g2 / grown-up)))

# ::node	0	obligate-01	
# ::node	0.0	say-01	4-5
# ::node	0.0.0	you	0-1
# ::node	0.0.1	see-01	10-11
# ::node	0.0.1.0	house	12-13
# ::node	0.0.1.0.0	cost-01	14-15
# ::node	0.0.1.0.0.0	monetary-quantity	
# ::node	0.0.1.0.0.0.0	dollar	
# ::node	0.0.1.0.0.0.1	20000	
# ::node	0.0.2	they	
# ::root	0	obligate-01
# ::edge	cost-01	ARG2	monetary-quantity	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	house	ARG1-of	cost-01	0.0.1.0	0.0.1.0.0	
# ::edge	monetary-quantity	quant	20000	0.0.1.0.0.0	0.0.1.0.0.0.1	
# ::edge	monetary-quantity	unit	dollar	0.0.1.0.0.0	0.0.1.0.0.0.0	
# ::edge	obligate-01	ARG1	you	0	0.0.0	
# ::edge	obligate-01	ARG2	say-01	0	0.0	
# ::edge	say-01	ARG0	you	0.0	0.0.0	
# ::edge	say-01	ARG1	see-01	0.0	0.0.1	
# ::edge	say-01	ARG2	they	0.0	0.0.2	
# ::edge	see-01	ARG0	you	0.0.1	0.0.0	
# ::edge	see-01	ARG1	house	0.0.1	0.0.1.0	
(o / obligate-01
  :ARG1 y
  :ARG2 (s / say-01
          :ARG0 (y / you)
          :ARG1 (s2 / see-01
                  :ARG0 y
                  :ARG1 (h / house
                          :ARG1-of (c / cost-01
                                     :ARG2 (m / monetary-quantity
                                             :unit (d / dollar)
                                             :quant 20000))))
          :ARG2 (t / they)))

# ::node	0	exclaim-01	3-4
# ::node	0.0	they	1-2
# ::node	0.1	pretty	10-11
# ::node	0.1.0	house	11-12
# ::node	0.1.0.0	that	12-13
# ::node	0.2	then	0-1
# ::root	0	exclaim-01
# ::edge	exclaim-01	ARG0	they	0	0.0	
# ::edge	exclaim-01	ARG1	pretty	0	0.1	
# ::edge	exclaim-01	time	then	0	0.2	
# ::edge	house	mod	that	0.1.0	0.1.0.0	
# ::edge	pretty	domain	house	0.1	0.1.0	
(e / exclaim-01
  :ARG0 (t / they)
  :ARG1 (p2 / pretty
          :domain (h2 / house
                    :mod (t4 / that)))
  :time (t3 / then))

# ::node	0	useful	4-5
# ::node	0.0	very	3-4
# ::node	0.1	they	8-9
# ::node	0.2	that	0-1
# ::node	0.3	travel-01	11-12
# ::node	0.3.0	day	13-14
# ::node	0.3.0.0	some	12-13
# ::root	0	useful
# ::edge	day	mod	some	0.3.0	0.3.0.0	
# ::edge	travel-01	ARG0	they	0.3	0.1	
# ::edge	travel-01	time	day	0.3	0.3.0	
# ::edge	useful	beneficiary	they	0	0.1	
# ::edge	useful	condition	travel-01	0	0.3	
# ::edge	useful	degree	very	0	0.0	
# ::edge	useful	domain	that	0	0.2	
(u / useful
      :degree (v / very)
      :beneficiary (t2 / they)
      :domain (t / that)
      :condition (t3 / travel-01
            :ARG0 t2
            :time (d / day
                  :mod (s / some))))

# ::node	0	add-01	4-5
# ::node	0.0	he	3-4
# ::node	0.1	harm-01	10-11
# ::node	0.1.0	-	9-10
# ::node	0.1.1	put-06	12-13
# ::node	0.1.1.0	thing	17-18
# ::node	0.1.1.0.0	work-01	17-18
# ::node	0.1.1.0.1	piece	15-16
# ::node	0.1.1.1	day	20-21
# ::node	0.1.1.1.0	another	19-20
# ::node	0.1.2	sometimes	0-1
# ::root	0	add-01
# ::edge	add-01	ARG0	he	0	0.0	
# ::edge	add-01	ARG1	harm-01	0	0.1	
# ::edge	day	mod	another	0.1.1.1	0.1.1.1.0	
# ::edge	harm-01	ARG0	put-06	0.1	0.1.1	
# ::edge	harm-01	polarity	-	0.1	0.1.0	
# ::edge	harm-01	time	sometimes	0.1	0.1.2	
# ::edge	put-06	ARG1	thing	0.1.1	0.1.1.0	
# ::edge	put-06	ARG2	day	0.1.1	0.1.1.1	
# ::edge	thing	ARG1-of	work-01	0.1.1.0	0.1.1.0.0	
# ::edge	thing	quant	piece	0.1.1.0	0.1.1.0.1	
(a / add-01
      :ARG0 (h / he)
      :ARG1 (h2 / harm-01 :polarity -
            :ARG0 (p / put-06
                  :ARG1 (t / thing
                        :ARG1-of (w / work-01)
                        :quant (p3 / piece))
                  :ARG2 (d / day
                        :mod (a2 / another)))
            :time (s / sometimes)))

# ::node	0	add-01	10-11
# ::node	0.0	prince	9-10
# ::node	0.0.0	little	8-9
# ::node	0.1	contrast-01	13-14
# ::node	0.1.0	tedious	3-4
# ::node	0.1.0.0	very	14-15
# ::node	0.1.0.1	work-01	4-5
# ::node	0.1.1	easy	15-16
# ::node	0.1.1.0	very	2-3
# ::root	0	add-01
# ::edge	add-01	ARG0	prince	0	0.0	
# ::edge	add-01	ARG1	contrast-01	0	0.1	
# ::edge	contrast-01	ARG1	tedious	0.1	0.1.0	
# ::edge	contrast-01	ARG2	easy	0.1	0.1.1	
# ::edge	easy	degree	very	0.1.1	0.1.1.0	
# ::edge	easy	domain	work-01	0.1.1	0.1.0.1	
# ::edge	prince	mod	little	0.0	0.0.0	
# ::edge	tedious	degree	very	0.1.0	0.1.0.0	
# ::edge	tedious	domain	work-01	0.1.0	0.1.0.1	
(a / add-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (c / contrast-01
            :ARG1 (t / tedious
                  :degree (v / very)
                  :domain (w / work-01))
            :ARG2 (e / easy
                  :degree (v2 / very)
                  :domain w)))

# ::node	0	and	0-1
# ::node	0.0	say-01	4-5
# ::node	0.0.0	he	3-4
# ::node	0.0.1	recommend-01	
# ::node	0.0.1.0	draw-01	15-16
# ::node	0.0.1.0.0	picture	
# ::node	0.0.1.0.0.0	beautiful	14-15
# ::node	0.0.1.0.1	possible	24-25
# ::node	0.0.1.0.1.0	see-01	25-26
# ::node	0.0.1.0.1.0.0	child	20-21
# ::node	0.0.1.0.1.0.0.0	live-01	23-24
# ::node	0.0.1.0.1.0.1	this	29-30
# ::node	0.0.1.0.1.0.1.0	all	28-29
# ::node	0.0.1.0.1.0.2	exact	26-27
# ::node	0.0.2	i	
# ::node	0.0.3	day	2-3
# ::node	0.0.3.0	one	1-2
# ::root	0	and
# ::edge	and	op1	say-01	0	0.0	
# ::edge	child	location	live-01	0.0.1.0.1.0.0	0.0.1.0.1.0.0.0	
# ::edge	day	mod	one	0.0.3	0.0.3.0	
# ::edge	draw-01	ARG0	i	0.0.1.0	0.0.2	
# ::edge	draw-01	ARG1	picture	0.0.1.0	0.0.1.0.0	
# ::edge	draw-01	purpose	possible	0.0.1.0	0.0.1.0.1	
# ::edge	live-01	ARG0	i	0.0.1.0.1.0.0.0	0.0.2	
# ::edge	picture	mod	beautiful	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	possible	domain	see-01	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	recommend-01	ARG0	he	0.0.1	0.0.0	
# ::edge	recommend-01	ARG1	draw-01	0.0.1	0.0.1.0	
# ::edge	recommend-01	ARG2	i	0.0.1	0.0.2	
# ::edge	say-01	ARG0	he	0.0	0.0.0	
# ::edge	say-01	ARG1	recommend-01	0.0	0.0.1	
# ::edge	say-01	ARG2	i	0.0	0.0.2	
# ::edge	say-01	time	day	0.0	0.0.3	
# ::edge	see-01	ARG0	child	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	see-01	ARG1	this	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	see-01	manner	exact	0.0.1.0.1.0	0.0.1.0.1.0.2	
# ::edge	this	mod	all	0.0.1.0.1.0.1	0.0.1.0.1.0.1.0	
(a / and
      :op1 (s / say-01
            :ARG0 (h / he)
            :ARG1 (r / recommend-01
                  :ARG0 h
                  :ARG1 (d3 / draw-01
                        :ARG0 i
                        :ARG1 (p2 / picture
                              :mod (b / beautiful))
                        :purpose (p / possible
                              :domain (s2 / see-01
                                    :ARG0 (c / child
                                          :location (l / live-01
                                                :ARG0 i))
                                    :ARG1 (t / this
                                          :mod (a2 / all))
                                    :manner (e / exact))))
                  :ARG2 i)
            :ARG2 (i / i)
            :time (d / day
                  :mod (o / one))))

# ::node	0	attend-01	17-18
# ::node	0.0	you	
# ::node	0.1	toilet	20-21
# ::node	0.1.0	planet	23-24
# ::node	0.1.1	resemble-01	
# ::node	0.2	care-01	31-32
# ::node	0.2.0	great	30-31
# ::node	0.2.0.0	most	30-31
# ::node	0.3	finish-01	4-5
# ::node	0.3.0	you	2-3
# ::node	0.3.1	toilet	7-8
# ::node	0.3.2	morning	10-11
# ::root	0	attend-01
# ::edge	attend-01	ARG0	you	0	0.0	
# ::edge	attend-01	ARG1	toilet	0	0.1	
# ::edge	attend-01	manner	care-01	0	0.2	
# ::edge	attend-01	time	finish-01	0	0.3	
# ::edge	care-01	extent	great	0.2	0.2.0	
# ::edge	finish-01	ARG0	you	0.3	0.3.0	
# ::edge	finish-01	ARG1	toilet	0.3	0.3.1	
# ::edge	finish-01	time	morning	0.3	0.3.2	
# ::edge	great	degree	most	0.2.0	0.2.0.0	
# ::edge	planet	poss	you	0.1.0	0.3.0	
# ::edge	resemble-01	ARG2	toilet	0.1.1	0.3.1	
# ::edge	toilet	ARG1-of	resemble-01	0.1	0.1.1	
# ::edge	toilet	poss	planet	0.1	0.1.0	
# ::edge	toilet	poss	you	0.3.1	0.3.0	
(a / attend-01
      :ARG0 (y2 / you)
      :ARG1 (t2 / toilet
            :poss (p / planet
                  :poss y)
            :ARG1-of (r / resemble-01
                  :ARG2 t))
      :manner (c / care-01
            :extent (g / great
                  :degree (m2 / most)))
      :time (f / finish-01
            :ARG0 (y / you)
            :ARG1 (t / toilet
                  :poss y)
            :time (m / morning)))

# ::node	0	obligate-01	
# ::node	0.0	pull-01	7-8
# ::node	0.0.0	you	0-1
# ::node	0.0.1	baobab	12-13
# ::node	0.0.1.0	all	10-11
# ::node	0.0.2	regular	9-10
# ::node	0.0.3	moment	18-19
# ::node	0.0.3.0	ordinal-entity	
# ::node	0.0.3.0.0	1	
# ::node	0.0.3.0.1	very	16-17
# ::node	0.0.3.1	possible	21-22
# ::node	0.0.3.1.0	distinguish-01	23-24
# ::node	0.0.3.1.0.0	rosebush	26-27
# ::node	0.0.3.1.0.0.0	resemble-01	29-30
# ::node	0.0.3.1.0.0.0.0	close	31-32
# ::node	0.0.3.1.0.0.0.0.0	so	30-31
# ::node	0.0.3.1.0.0.0.1	youth	35-36
# ::node	0.0.3.1.0.0.0.1.0	early	34-35
# ::node	0.0.3.1.0.0.0.1.0.0	most	
# ::root	0	obligate-01
# ::edge	baobab	quant	all	0.0.1	0.0.1.0	
# ::edge	close	degree	so	0.0.3.1.0.0.0.0	0.0.3.1.0.0.0.0.0	
# ::edge	distinguish-01	ARG1	baobab	0.0.3.1.0	0.0.1	
# ::edge	distinguish-01	ARG2	rosebush	0.0.3.1.0	0.0.3.1.0.0	
# ::edge	early	mod	most	0.0.3.1.0.0.0.1.0	0.0.3.1.0.0.0.1.0.0	
# ::edge	moment	ord	ordinal-entity	0.0.3	0.0.3.0	
# ::edge	moment	time-of	possible	0.0.3	0.0.3.1	
# ::edge	obligate-01	ARG1	pull-01	0	0.0	
# ::edge	ordinal-entity	degree	very	0.0.3.0	0.0.3.0.1	
# ::edge	ordinal-entity	value	1	0.0.3.0	0.0.3.0.0	
# ::edge	possible	domain	distinguish-01	0.0.3.1	0.0.3.1.0	
# ::edge	pull-01	ARG0	you	0.0	0.0.0	
# ::edge	pull-01	ARG1	baobab	0.0	0.0.1	
# ::edge	pull-01	manner	regular	0.0	0.0.2	
# ::edge	pull-01	time	moment	0.0	0.0.3	
# ::edge	resemble-01	ARG1	baobab	0.0.3.1.0.0.0	0.0.1	
# ::edge	resemble-01	manner	close	0.0.3.1.0.0.0	0.0.3.1.0.0.0.0	
# ::edge	resemble-01	time	youth	0.0.3.1.0.0.0	0.0.3.1.0.0.0.1	
# ::edge	rosebush	ARG2-of	resemble-01	0.0.3.1.0.0	0.0.3.1.0.0.0	
# ::edge	youth	poss	baobab	0.0.3.1.0.0.0.1	0.0.1	
# ::edge	youth	time	early	0.0.3.1.0.0.0.1	0.0.3.1.0.0.0.1.0	
(o2 / obligate-01
      :ARG1 (p / pull-01
            :ARG0 (y / you)
            :ARG1 (b / baobab
                  :quant (a / all))
            :manner (r / regular)
            :time (m / moment
                  :ord (o / ordinal-entity :value 1
                        :degree (v / very))
                  :time-of (p2 / possible
                        :domain (d / distinguish-01
                              :ARG1 b
                              :ARG2 (r2 / rosebush
                                    :ARG2-of (r3 / resemble-01
                                          :ARG1 b
                                          :manner (c / close
                                                :degree (s / so))
                                          :time (y2 / youth
                                                :time (e / early
                                                      :mod (m2 / most))
                                                :poss b))))))))

# ::node	0	and	0-1
# ::node	0.0	split-01	16-17
# ::node	0.0.0	piece	19-20
# ::node	0.0.1	and	8-9
# ::node	0.0.1.0	small	6-7
# ::node	0.0.1.0.0	too	12-13
# ::node	0.0.1.0.1	planet	3-4
# ::node	0.0.1.1	baobab	10-11
# ::node	0.0.1.1.0	many	13-14
# ::node	0.0.1.1.0.0	too	5-6
# ::root	0	and
# ::edge	and	op1	small	0.0.1	0.0.1.0	
# ::edge	and	op1	split-01	0	0.0	
# ::edge	and	op2	baobab	0.0.1	0.0.1.1	
# ::edge	baobab	quant	many	0.0.1.1	0.0.1.1.0	
# ::edge	many	degree	too	0.0.1.1.0	0.0.1.1.0.0	
# ::edge	small	degree	too	0.0.1.0	0.0.1.0.0	
# ::edge	small	domain	planet	0.0.1.0	0.0.1.0.1	
# ::edge	split-01	ARG0	baobab	0.0	0.0.1.1	
# ::edge	split-01	ARG1	planet	0.0	0.0.1.0.1	
# ::edge	split-01	ARG2	piece	0.0	0.0.0	
# ::edge	split-01	condition	and	0.0	0.0.1	
(a / and
      :op1 (s / split-01
            :ARG0 b
            :ARG1 p2
            :ARG2 (p / piece)
            :condition (a2 / and
                  :op1 (s2 / small
                        :degree (t2 / too)
                        :domain (p2 / planet))
                  :op2 (b / baobab
                        :quant (m / many
                              :degree (t3 / too))))))

# ::node	0	say-01	12-13
# ::node	0.0	prince	11-12
# ::node	0.0.0	little	10-11
# ::node	0.1	question	4-5
# ::node	0.1.0	discipline	6-7
# ::node	0.1.1	it	1-2
# ::node	0.2	i	
# ::node	0.3	late	15-16
# ::node	0.3.0	more	
# ::root	0	say-01
# ::edge	late	degree	more	0.3	0.3.0	
# ::edge	prince	mod	little	0.0	0.0.0	
# ::edge	question	domain	it	0.1	0.1.1	
# ::edge	question	topic	discipline	0.1	0.1.0	
# ::edge	say-01	ARG0	prince	0	0.0	
# ::edge	say-01	ARG1	question	0	0.1	
# ::edge	say-01	ARG2	i	0	0.2	
# ::edge	say-01	time	late	0	0.3	
(s / say-01
      :ARG0 (p / prince
            :mod (l / little))
      :ARG1 (q / question
            :topic (d / discipline)
            :domain (i / it))
      :ARG2 (i2 / i)
      :time (l2 / late
            :degree (m / more)))

# ::node	0	contrast-01	0-1
# ::node	0.0	mean-01	11-12
# ::node	0.0.0	that	9-10
# ::node	0.0.1	catastrophe	13-14
# ::node	0.0.2	always	10-11
# ::node	0.0.3	baobab	7-8
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	mean-01	0	0.0	
# ::edge	mean-01	ARG0	that	0.0	0.0.0	
# ::edge	mean-01	ARG1	catastrophe	0.0	0.0.1	
# ::edge	mean-01	condition	baobab	0.0	0.0.3	
# ::edge	mean-01	time	always	0.0	0.0.2	
(c2 / contrast-01
      :ARG2 (m3 / mean-01
            :ARG0 (t / that)
            :ARG1 (c / catastrophe)
            :time (a / always)
            :condition (b / baobab)))

# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	planet	3-4
# ::node	0.1.0	inhabit-01	6-7
# ::node	0.1.0.0	man	10-11
# ::node	0.1.0.0.0	lazy	9-10
# ::root	0	know-01
# ::edge	inhabit-01	ARG0	man	0.1.0	0.1.0.0	
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	planet	0	0.1	
# ::edge	man	mod	lazy	0.1.0.0	0.1.0.0.0	
# ::edge	planet	ARG1-of	inhabit-01	0.1	0.1.0	
(k / know-01
  :ARG0 (i / i)
  :ARG1 (p / planet
          :ARG1-of (i2 / inhabit-01
                     :ARG0 (m / man
                             :mod (l / lazy)))))

# ::node	0	make-05	6-7
# ::node	0.0	person	
# ::node	0.0.0	have-rel-role-91	5-6
# ::node	0.0.0.0	he	
# ::node	0.0.0.1	father	5-6
# ::node	0.1	monetary-quantity	2-3
# ::node	0.1.0	amr-unknown	
# ::root	0	make-05
# ::edge	have-rel-role-91	ARG1	he	0.0.0	0.0.0.0	
# ::edge	have-rel-role-91	ARG2	father	0.0.0	0.0.0.1	
# ::edge	make-05	ARG0	person	0	0.0	
# ::edge	make-05	ARG1	monetary-quantity	0	0.1	
# ::edge	monetary-quantity	quant	amr-unknown	0.1	0.1.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0	0.0.0	
(m / make-05
      :ARG0 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (h / he)
                  :ARG2 (f / father)))
      :ARG1 (m2 / monetary-quantity
            :quant (a / amr-unknown)))

# ::node	0	weigh-01	4-5
# ::node	0.0	he	3-4
# ::node	0.1	amr-unknown	
# ::root	0	weigh-01
# ::edge	weigh-01	ARG1	he	0	0.0	
# ::edge	weigh-01	ARG3	amr-unknown	0	0.1	
(w / weigh-01
      :ARG1 (h / he)
      :ARG3 (a / amr-unknown))

# ::node	0	have-rel-role-91	3-4
# ::node	0.0	person	
# ::node	0.0.0	amr-unknown	
# ::node	0.1	he	4-5
# ::node	0.2	brother	2-3
# ::root	0	have-rel-role-91
# ::edge	have-rel-role-91	ARG0	person	0	0.0	
# ::edge	have-rel-role-91	ARG1	he	0	0.1	
# ::edge	have-rel-role-91	ARG2	brother	0	0.2	
# ::edge	person	quant	amr-unknown	0.0	0.0.0	
(h / have-rel-role-91
      :ARG0 (p / person
            :quant (a / amr-unknown))
      :ARG1 (h2 / he)
      :ARG2 (b / brother))

# ::node	0	demand-01	3-4
# ::node	0.0	they	2-3
# ::node	0.1	age-01	
# ::node	0.1.0	he	9-10
# ::node	0.1.1	amr-unknown	
# ::node	0.2	instead-of-91	0-1
# ::root	0	demand-01
# ::edge	age-01	ARG1	he	0.1	0.1.0	
# ::edge	age-01	ARG2	amr-unknown	0.1	0.1.1	
# ::edge	demand-01	ARG0	they	0	0.0	
# ::edge	demand-01	ARG1	age-01	0	0.1	
# ::edge	demand-01	ARG1-of	instead-of-91	0	0.2	
(d / demand-01
      :ARG0 (t / they)
      :ARG1 (a2 / age-01
            :ARG1 (h2 / he)
            :ARG2 (a3 / amr-unknown))
      :ARG1-of (i2 / instead-of-91))

# ::node	0	collect-01	2-3
# ::node	0.0	he	1-2
# ::node	0.1	butterfly	3-4
# ::node	0.2	interrogative	
# ::root	0	collect-01
# ::edge	collect-01	ARG0	he	0	0.0	
# ::edge	collect-01	ARG1	butterfly	0	0.1	
# ::edge	collect-01	mode	interrogative	0	0.2	
(c / collect-01
      :ARG0 (h / he)
      :ARG1 (b / butterfly)
      :mode interrogative)

# ::node	0	love-01	4-5
# ::node	0.0	he	3-4
# ::node	0.1	amr-unknown	
# ::node	0.1.0	game	1-2
# ::node	0.2	good	5-6
# ::node	0.2.0	most	5-6
# ::root	0	love-01
# ::edge	amr-unknown	domain	game	0.1	0.1.0	
# ::edge	good	degree	most	0.2	0.2.0	
# ::edge	love-01	ARG0	he	0	0.0	
# ::edge	love-01	ARG1	amr-unknown	0	0.1	
# ::edge	love-01	mod	good	0	0.2	
(l / love-01
      :ARG0 (h / he)
      :ARG1 (a2 / amr-unknown
            :domain (g2 / game))
      :mod (g / good
            :degree (m / most)))

# ::node	0	say-01	2-3
# ::node	0.0	they	0-1
# ::node	0.1	sound-01	11-12
# ::node	0.1.0	voice	10-11
# ::node	0.1.0.0	he	
# ::node	0.1.1	amr-unknown	
# ::node	0.2	you	4-5
# ::node	0.3	ever	
# ::node	0.4	-	
# ::root	0	say-01
# ::edge	say-01	ARG0	they	0	0.0	
# ::edge	say-01	ARG1	sound-01	0	0.1	
# ::edge	say-01	ARG2	you	0	0.2	
# ::edge	say-01	polarity	-	0	0.4	
# ::edge	say-01	time	ever	0	0.3	
# ::edge	sound-01	ARG1	voice	0.1	0.1.0	
# ::edge	sound-01	ARG2	amr-unknown	0.1	0.1.1	
# ::edge	voice	poss	he	0.1.0	0.1.0.0	
(s / say-01
  :ARG0 (t / they)
  :ARG1 (s2 / sound-01
          :ARG1 (v / voice
                  :poss (h / he))
          :ARG2 (a2 / amr-unknown))
  :ARG2 (y / you)
  :time (e / ever)
  :polarity -)

# ::node	0	ask-01	14-15
# ::node	0.0	-	
# ::node	0.1	they	
# ::node	0.2	question	17-18
# ::node	0.2.0	any	16-17
# ::node	0.2.1	matter	20-21
# ::node	0.2.1.0	essential	19-20
# ::node	0.3	you	1-2
# ::node	0.4	tell-01	2-3
# ::node	0.4.0	make-01	7-8
# ::node	0.4.0.0	have-rel-role-91	6-7
# ::node	0.4.0.0.0	person	
# ::node	0.4.0.0.1	friend	10-11
# ::node	0.4.0.0.2	new	9-10
# ::node	0.4.1	they	12-13
# ::node	0.5	ever	
# ::root	0	ask-01
# ::edge	ask-01	ARG0	they	0	0.1	
# ::edge	ask-01	ARG1	question	0	0.2	
# ::edge	ask-01	ARG2	you	0	0.3	
# ::edge	ask-01	polarity	-	0	0.0	
# ::edge	ask-01	time	ever	0	0.5	
# ::edge	ask-01	time	tell-01	0	0.4	
# ::edge	have-rel-role-91	ARG0	person	0.4.0.0	0.4.0.0.0	
# ::edge	have-rel-role-91	ARG1	you	0.4.0.0	0.3	
# ::edge	have-rel-role-91	ARG2	friend	0.4.0.0	0.4.0.0.1	
# ::edge	have-rel-role-91	mod	new	0.4.0.0	0.4.0.0.2	
# ::edge	make-01	ARG0	you	0.4.0	0.3	
# ::edge	make-01	ARG1	have-rel-role-91	0.4.0	0.4.0.0	
# ::edge	matter	mod	essential	0.2.1	0.2.1.0	
# ::edge	question	mod	any	0.2	0.2.0	
# ::edge	question	topic	matter	0.2	0.2.1	
# ::edge	tell-01	ARG0	you	0.4	0.3	
# ::edge	tell-01	ARG1	make-01	0.4	0.4.0	
# ::edge	tell-01	ARG2	they	0.4	0.4.1	
(a / ask-01 :polarity -
      :ARG0 (t2 / they)
      :ARG1 (q / question
            :mod (a2 / any)
            :topic (m / matter
                  :mod (e / essential)))
      :ARG2 (y / you)
      :time (t3 / tell-01
            :ARG0 y
            :ARG1 (m2 / make-01
                  :ARG0 y
                  :ARG1 (h / have-rel-role-91
                        :ARG0 (p / person)
                        :ARG1 y
                        :ARG2 (f / friend)
                        :mod (n / new)))
            :ARG2 (t / they))
      :time (e2 / ever))

# ::node	0	account-01	24-25
# ::node	0.0	and	30-31
# ::node	0.0.0	grown-up	27-28
# ::node	0.0.1	way	32-33
# ::node	0.1	and	11-12
# ::node	0.1.0	tell-01	3-4
# ::node	0.1.0.0	i	1-2
# ::node	0.1.0.1	detail	6-7
# ::node	0.1.0.1.0	this	
# ::node	0.1.0.1.1	asteroid	9-10
# ::node	0.1.0.2	you	4-5
# ::node	0.1.1	note-01	14-15
# ::node	0.1.1.0	number	17-18
# ::root	0	account-01
# ::edge	account-01	ARG1	and	0	0.1	
# ::edge	account-01	ARG2	and	0	0.0	
# ::edge	account-01	condition	and	0	0.1	
# ::edge	and	op1	grown-up	0.0	0.0.0	
# ::edge	and	op1	tell-01	0.1	0.1.0	
# ::edge	and	op2	note-01	0.1	0.1.1	
# ::edge	and	op2	way	0.0	0.0.1	
# ::edge	detail	mod	this	0.1.0.1	0.1.0.1.0	
# ::edge	detail	topic	asteroid	0.1.0.1	0.1.0.1.1	
# ::edge	note-01	ARG0	i	0.1.1	0.1.0.0	
# ::edge	note-01	ARG1	number	0.1.1	0.1.1.0	
# ::edge	note-01	ARG2	you	0.1.1	0.1.0.2	
# ::edge	number	poss	asteroid	0.1.1.0	0.1.0.1.1	
# ::edge	tell-01	ARG0	i	0.1.0	0.1.0.0	
# ::edge	tell-01	ARG1	detail	0.1.0	0.1.0.1	
# ::edge	tell-01	ARG2	you	0.1.0	0.1.0.2	
# ::edge	way	poss	grown-up	0.0.1	0.0.0	
(a / account-01
  :ARG1 a3
  :ARG2 (a2 / and
          :op1 (g / grown-up)
          :op2 (w / way
                 :poss g))
  :condition (a3 / and
               :op1 (t / tell-01
                      :ARG0 (i / i)
                      :ARG1 (d / detail
                              :mod (t2 / this)
                              :topic (a4 / asteroid))
                      :ARG2 (y / you))
               :op2 (n3 / note-01
                      :ARG0 i
                      :ARG1 (n4 / number
                              :poss a4)
                      :ARG2 y)))

# ::node	0	and	0-1
# ::node	0.0	accept-01	4-5
# ::node	0.0.0	everybody	3-4
# ::node	0.0.1	thing	6-7
# ::node	0.0.1.0	report-01	6-7
# ::node	0.0.1.0.0	he	
# ::node	0.0.2	time	2-3
# ::node	0.0.2.0	this	1-2
# ::root	0	and
# ::edge	accept-01	ARG0	everybody	0.0	0.0.0	
# ::edge	accept-01	ARG1	thing	0.0	0.0.1	
# ::edge	accept-01	time	time	0.0	0.0.2	
# ::edge	and	op2	accept-01	0	0.0	
# ::edge	report-01	ARG0	he	0.0.1.0	0.0.1.0.0	
# ::edge	thing	ARG1-of	report-01	0.0.1	0.0.1.0	
# ::edge	time	mod	this	0.0.2	0.0.2.0	
(a / and
  :op2 (a2 / accept-01
         :ARG0 (e / everybody)
         :ARG1 (t3 / thing
                 :ARG1-of (r / report-01
                            :ARG0 (h2 / he)))
         :time (t / time
                 :mod (t2 / this))))

# ::node	0	draw-01	15-16
# ::node	0.0	i	11-12
# ::node	0.1	planet	18-19
# ::node	0.1.0	that	17-18
# ::node	0.2	describe-01	6-7
# ::node	0.2.0	prince	5-6
# ::node	0.2.0.0	little	4-5
# ::node	0.3	cause-01	
# ::root	0	draw-01
# ::edge	describe-01	ARG0	prince	0.2	0.2.0	
# ::edge	describe-01	ARG1	planet	0.2	0.1	
# ::edge	describe-01	beneficiary	i	0.2	0.0	
# ::edge	draw-01	ARG0	i	0	0.0	
# ::edge	draw-01	ARG1	planet	0	0.1	
# ::edge	draw-01	ARG1-of	cause-01	0	0.3	
# ::edge	draw-01	manner	describe-01	0	0.2	
# ::edge	planet	mod	that	0.1	0.1.0	
# ::edge	prince	mod	little	0.2.0	0.2.0.0	
(d / draw-01
      :ARG0 (i / i)
      :ARG1 (p / planet
            :mod (t / that))
      :manner (d2 / describe-01
            :ARG0 (p2 / prince
                  :mod (l / little))
            :ARG1 p
            :beneficiary i)
      :ARG1-of (c / cause-01))

# ::node	0	neglect-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	bush	4-5
# ::node	0.1.0	little	3-4
# ::node	0.1.1	3	2-3
# ::root	0	neglect-01
# ::edge	bush	mod	little	0.1	0.1.0	
# ::edge	bush	quant	3	0.1	0.1.1	
# ::edge	neglect-01	ARG0	he	0	0.0	
# ::edge	neglect-01	ARG1	bush	0	0.1	
(n / neglect-01
  :ARG0 (h / he)
  :ARG1 (b / bush
          :mod (l / little)
          :quant 3))

# ::node	0	contrast-01	0-1
# ::node	0.0	cause-01	
# ::node	0.0.0	and	11-12
# ::node	0.0.0.0	understand-01	9-10
# ::node	0.0.0.0.0	danger	2-3
# ::node	0.0.0.0.0.0	baobab	5-6
# ::node	0.0.0.0.1	little	8-9
# ::node	0.0.0.0.1.0	so	7-8
# ::node	0.0.0.1	risk-01	14-15
# ::node	0.0.0.1.0	anyone	19-20
# ::node	0.0.0.1.0.0	lose-02	23-24
# ::node	0.0.0.1.0.0.0	asteroid	26-27
# ::node	0.0.0.1.0.0.1	possible	
# ::node	0.0.0.1.1	considerable	13-14
# ::node	0.0.0.1.1.0	such	12-13
# ::node	0.0.1	break-14	33-34
# ::node	0.0.1.0	i	31-32
# ::node	0.0.1.1	reserve	36-37
# ::node	0.0.1.2	for-once	
# ::root	0	contrast-01
# ::edge	and	op1	understand-01	0.0.0	0.0.0.0	
# ::edge	and	op2	risk-01	0.0.0	0.0.0.1	
# ::edge	anyone	ARG1-of	lose-02	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	break-14	ARG0	i	0.0.1	0.0.1.0	
# ::edge	break-14	ARG1	reserve	0.0.1	0.0.1.1	
# ::edge	break-14	mod	for-once	0.0.1	0.0.1.2	
# ::edge	cause-01	ARG0	and	0.0	0.0.0	
# ::edge	cause-01	ARG1	break-14	0.0	0.0.1	
# ::edge	considerable	mod	such	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	contrast-01	ARG2	cause-01	0	0.0	
# ::edge	danger	poss	baobab	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	little	degree	so	0.0.0.0.1	0.0.0.0.1.0	
# ::edge	lose-02	location	asteroid	0.0.0.1.0.0	0.0.0.1.0.0.0	
# ::edge	lose-02	mod	possible	0.0.0.1.0.0	0.0.0.1.0.0.1	
# ::edge	reserve	poss	i	0.0.1.1	0.0.1.0	
# ::edge	risk-01	ARG0	anyone	0.0.0.1	0.0.0.1.0	
# ::edge	risk-01	degree	considerable	0.0.0.1	0.0.0.1.1	
# ::edge	understand-01	ARG1	danger	0.0.0.0	0.0.0.0.0	
# ::edge	understand-01	degree	little	0.0.0.0	0.0.0.0.1	
(c2 / contrast-01
      :ARG2 (c3 / cause-01
            :ARG0 (a / and
                  :op1 (u / understand-01
                        :ARG1 (d / danger
                              :poss (b2 / baobab))
                        :degree (l / little
                              :degree (s / so)))
                  :op2 (r / risk-01
                        :ARG0 (a2 / anyone
                              :ARG1-of (l2 / lose-02
                                    :location (a3 / asteroid)
                                    :mod (p / possible)))
                        :degree (c / considerable
                              :mod (s2 / such))))
            :ARG1 (b3 / break-14
                  :ARG0 (i / i)
                  :ARG1 (r3 / reserve
                        :poss i)
                  :mod (f / for-once))))

# ::node	0	like-02	4-5
# ::node	0.0	-	3-3
# ::node	0.1	i	0-1
# ::node	0.2	take-01	6-7
# ::node	0.2.0	tone	8-9
# ::node	0.2.0.0	moralist	11-12
# ::node	0.3	much	3-4
# ::root	0	like-02
# ::edge	like-02	ARG0	i	0	0.1	
# ::edge	like-02	ARG1	take-01	0	0.2	
# ::edge	like-02	degree	much	0	0.3	
# ::edge	like-02	polarity	-	0	0.0	
# ::edge	take-01	ARG0	i	0.2	0.1	
# ::edge	take-01	ARG1	tone	0.2	0.2.0	
# ::edge	tone	poss	moralist	0.2.0	0.2.0.0	
(l / like-02 :polarity -
      :ARG0 (i / i)
      :ARG1 (t / take-01
            :ARG0 i
            :ARG1 (t2 / tone
                  :poss (m2 / moralist)))
      :degree (m / much))

# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	watch-02	5-6
# ::node	0.1.0	imperative	
# ::node	0.1.1	you	
# ::node	0.1.2	baobab	9-10
# ::node	0.2	plain	2-3
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
# ::edge	say-01	ARG1	watch-02	0	0.1	
# ::edge	say-01	manner	plain	0	0.2	
# ::edge	watch-02	ARG0	you	0.1	0.1.1	
# ::edge	watch-02	ARG1	baobab	0.1	0.1.2	
# ::edge	watch-02	mode	imperative	0.1	0.1.0	
(s / say-01
      :ARG0 (i / i)
      :ARG1 (w / watch-02 :mode imperative
            :ARG0 (y / you)
            :ARG1 (b / baobab))
      :manner (p / plain))

# ::node	0	child	1-2
# ::root	0	child
(c2 / child)

# ::node	0	worth	10-11
# ::node	0.0	trouble	13-14
# ::node	0.0.0	cost-01	16-17
# ::node	0.0.1	all	11-12
# ::node	0.1	lesson	1-2
# ::node	0.1.0	pass-09	4-5
# ::node	0.1.0.0	i	3-4
# ::node	0.1.0.1	this	7-8
# ::root	0	worth
# ::edge	cost-01	ARG1	lesson	0.0.0	0.1	
# ::edge	cost-01	ARG3	i	0.0.0	0.1.0.0	
# ::edge	lesson	ARG1-of	pass-09	0.1	0.1.0	
# ::edge	pass-09	ARG0	i	0.1.0	0.1.0.0	
# ::edge	pass-09	manner	this	0.1.0	0.1.0.1	
# ::edge	trouble	ARG2-of	cost-01	0.0	0.0.0	
# ::edge	trouble	mod	all	0.0	0.0.1	
# ::edge	worth	domain	lesson	0	0.1	
# ::edge	worth	extent	trouble	0	0.0	
(w / worth
      :extent (t / trouble
            :ARG2-of (c / cost-01
                  :ARG1 l
                  :ARG3 i)
            :mod (a / all))
      :domain (l / lesson
            :ARG1-of (p / pass-09
                  :ARG0 (i / i)
                  :manner (t2 / this))))

# ::node	0	cause-01	
# ::node	0.0	skirt-02	8-9
# ::node	0.0.0	and	20-21
# ::node	0.0.0.0	person	6-7
# ::node	0.0.0.0.0	have-rel-role-91	6-7
# ::node	0.0.0.0.0.0	i	28-29
# ::node	0.0.0.0.0.1	friend	1-2
# ::node	0.0.1	danger	10-11
# ::node	0.0.1.0	this	9-10
# ::node	0.0.2	time	14-15
# ::node	0.0.2.0	long	13-14
# ::node	0.0.3	know-01	18-19
# ::node	0.0.3.0	-	
# ::node	0.0.3.1	ever	17-18
# ::node	0.1	work-01	30-31
# ::node	0.1.0	picture	
# ::node	0.1.0.0	draw-01	35-36
# ::node	0.1.0.1	this	34-35
# ::node	0.1.1	hard	32-33
# ::node	0.1.1.0	so	22-23
# ::root	0	cause-01
# ::edge	and	op1	person	0.0.0	0.0.0.0	
# ::edge	and	op2	i	0.0.0	0.0.0.0.0.0	
# ::edge	cause-01	ARG0	skirt-02	0	0.0	
# ::edge	cause-01	ARG1	work-01	0	0.1	
# ::edge	danger	mod	this	0.0.1	0.0.1.0	
# ::edge	hard	degree	so	0.1.1	0.1.1.0	
# ::edge	have-rel-role-91	ARG1	i	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	know-01	ARG0	person	0.0.3	0.0.0.0	
# ::edge	know-01	polarity	-	0.0.3	0.0.3.0	
# ::edge	know-01	time	ever	0.0.3	0.0.3.1	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0.0	0.0.0.0.0	
# ::edge	picture	ARG1-of	draw-01	0.1.0	0.1.0.0	
# ::edge	picture	mod	this	0.1.0	0.1.0.1	
# ::edge	skirt-02	ARG0	and	0.0	0.0.0	
# ::edge	skirt-02	ARG1	danger	0.0	0.0.1	
# ::edge	skirt-02	ARG1-of	know-01	0.0	0.0.3	
# ::edge	skirt-02	duration	time	0.0	0.0.2	
# ::edge	time	mod	long	0.0.2	0.0.2.0	
# ::edge	work-01	ARG0	i	0.1	0.0.0.0.0.0	
# ::edge	work-01	ARG1	picture	0.1	0.1.0	
# ::edge	work-01	beneficiary	person	0.1	0.0.0.0	
# ::edge	work-01	manner	hard	0.1	0.1.1	
(c / cause-01
      :ARG0 (s / skirt-02
            :ARG0 (a / and
                  :op1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 (i / i)
                              :ARG2 (f / friend)))
                  :op2 i)
            :ARG1 (d / danger
                  :mod (t / this))
            :duration (t2 / time
                  :mod (l / long))
            :ARG1-of (k / know-01 :polarity -
                  :ARG0 p2
                  :time (e / ever)))
      :ARG1 (w / work-01
            :ARG0 i
            :ARG1 (p / picture
                  :ARG1-of (d2 / draw-01)
                  :mod (t3 / this))
            :manner (h / hard
                  :degree (s2 / so))
            :beneficiary p2))

# ::node	0	simple	3-4
# ::node	0.0	thing	1-2
# ::node	0.0.0	reply-01	1-2
# ::root	0	simple
# ::edge	simple	domain	thing	0	0.0	
# ::edge	thing	ARG2-of	reply-01	0.0	0.0.0	
(s / simple
      :domain (t / thing
            :ARG2-of (r / reply-01)))

# ::node	0	possible	
# ::node	0.0	ask-01	3-4
# ::node	0.0.0	you	1-2
# ::node	0.0.1	thing	
# ::node	0.0.1.0	cause-01	
# ::node	0.0.1.0.0	picture	
# ::node	0.0.1.0.0.0	-	10-11
# ::node	0.0.1.0.0.1	draw-01	12-13
# ::node	0.0.1.0.0.2	other	11-12
# ::node	0.0.1.0.0.3	book	15-16
# ::node	0.0.1.0.0.3.0	this	14-15
# ::node	0.0.1.0.0.4	magnificent	17-18
# ::node	0.0.1.0.0.4.0	equal	
# ::node	0.0.1.0.0.4.1	picture	
# ::node	0.0.1.0.0.4.1.0	draw-01	22-23
# ::node	0.0.1.0.0.4.1.1	this	21-22
# ::node	0.0.1.0.0.4.1.2	baobab	25-26
# ::node	0.0.1.0.0.5	impress-01	19-20
# ::node	0.0.1.0.0.5.0	equal	
# ::node	0.0.2	i	
# ::root	0	possible
# ::edge	ask-01	ARG0	you	0.0	0.0.0	
# ::edge	ask-01	ARG1	thing	0.0	0.0.1	
# ::edge	ask-01	ARG2	i	0.0	0.0.2	
# ::edge	book	mod	this	0.0.1.0.0.3	0.0.1.0.0.3.0	
# ::edge	cause-01	ARG1	picture	0.0.1.0	0.0.1.0.0	
# ::edge	impress-01	compared-to	picture	0.0.1.0.0.5	0.0.1.0.0.4.1	
# ::edge	impress-01	degree	equal	0.0.1.0.0.5	0.0.1.0.0.5.0	
# ::edge	magnificent	compared-to	picture	0.0.1.0.0.4	0.0.1.0.0.4.1	
# ::edge	magnificent	degree	equal	0.0.1.0.0.4	0.0.1.0.0.4.0	
# ::edge	picture	ARG0-of	impress-01	0.0.1.0.0	0.0.1.0.0.5	
# ::edge	picture	ARG1-of	draw-01	0.0.1.0.0	0.0.1.0.0.1	
# ::edge	picture	ARG1-of	draw-01	0.0.1.0.0.4.1	0.0.1.0.0.4.1.0	
# ::edge	picture	location	book	0.0.1.0.0	0.0.1.0.0.3	
# ::edge	picture	mod	magnificent	0.0.1.0.0	0.0.1.0.0.4	
# ::edge	picture	mod	other	0.0.1.0.0	0.0.1.0.0.2	
# ::edge	picture	mod	this	0.0.1.0.0.4.1	0.0.1.0.0.4.1.1	
# ::edge	picture	polarity	-	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	picture	topic	baobab	0.0.1.0.0.4.1	0.0.1.0.0.4.1.2	
# ::edge	possible	domain	ask-01	0	0.0	
# ::edge	thing	ARG0-of	cause-01	0.0.1	0.0.1.0	
(p / possible
      :domain (a / ask-01
            :ARG0 (y / you)
            :ARG1 (t3 / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (p2 / picture :polarity -
                              :ARG1-of (d / draw-01)
                              :mod (o / other)
                              :location (b / book
                                    :mod (t / this))
                              :mod (m / magnificent
                                    :degree (e / equal)
                                    :compared-to (p3 / picture
                                          :ARG1-of (d2 / draw-01)
                                          :mod (t2 / this)
                                          :topic (b2 / baobab)))
                              :ARG0-of (i / impress-01
                                    :degree (e2 / equal)
                                    :compared-to p3))))
            :ARG2 (i2 / i)))

# ::node	0	contrast-01	
# ::node	0.0	make-01	16-17
# ::node	0.0.0	person	
# ::node	0.0.0.0	have-org-role-91	15-16
# ::node	0.0.0.0.0	country	14-15
# ::node	0.0.0.0.0.0	"Turkey"	
# ::node	0.0.0.0.0.1	name	14-15
# ::node	0.0.0.0.0.1.0	"Turkey"	14-15
# ::node	0.0.0.0.1	dictator	15-16
# ::node	0.0.1	law	18-19
# ::node	0.0.1.0	change-01	29-30
# ::node	0.0.1.0.0	subject	21-22
# ::node	0.0.1.0.1	costume	32-33
# ::node	0.0.1.0.1.0	continent	31-32
# ::node	0.0.1.0.1.0.0	"Europe"	
# ::node	0.0.1.0.1.0.1	name	31-32
# ::node	0.0.1.0.1.0.1.0	"Europe"	31-32
# ::node	0.0.1.0.2	threaten-01	
# ::node	0.0.1.0.2.0	penalize-01	
# ::node	0.0.1.0.2.0.0	die-01	26-27
# ::node	0.0.2	fortunate-41	0-1
# ::node	0.0.2.0	reputation	6-7
# ::node	0.0.2.0.0	planet	8-10
# ::node	0.0.2.0.0.0	-	
# ::node	0.0.2.0.0.1	name	8-10
# ::node	0.0.2.0.0.1.0	"Asteroid"	8-10
# ::node	0.0.2.0.0.1.1	"B-612"	8-10
# ::root	0	contrast-01
# ::edge	change-01	ARG0	subject	0.0.1.0	0.0.1.0.0	
# ::edge	change-01	ARG3	costume	0.0.1.0	0.0.1.0.1	
# ::edge	change-01	manner	threaten-01	0.0.1.0	0.0.1.0.2	
# ::edge	continent	name	name	0.0.1.0.1.0	0.0.1.0.1.0.1	
# ::edge	continent	wiki	"Europe"	0.0.1.0.1.0	0.0.1.0.1.0.0	
# ::edge	contrast-01	ARG2	make-01	0	0.0	
# ::edge	costume	mod	continent	0.0.1.0.1	0.0.1.0.1.0	
# ::edge	country	name	name	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	country	wiki	"Turkey"	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	die-01	ARG1	subject	0.0.1.0.2.0.0	0.0.1.0.0	
# ::edge	fortunate-41	ARG1	reputation	0.0.2	0.0.2.0	
# ::edge	have-org-role-91	ARG1	country	0.0.0.0	0.0.0.0.0	
# ::edge	have-org-role-91	ARG2	dictator	0.0.0.0	0.0.0.0.1	
# ::edge	law	topic	change-01	0.0.1	0.0.1.0	
# ::edge	make-01	ARG0	person	0.0	0.0.0	
# ::edge	make-01	ARG1	law	0.0	0.0.1	
# ::edge	make-01	ARG2-of	fortunate-41	0.0	0.0.2	
# ::edge	name	op1	"Asteroid"	0.0.2.0.0.1	0.0.2.0.0.1.0	
# ::edge	name	op1	"Europe"	0.0.1.0.1.0.1	0.0.1.0.1.0.1.0	
# ::edge	name	op1	"Turkey"	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	name	op2	"B-612"	0.0.2.0.0.1	0.0.2.0.0.1.1	
# ::edge	penalize-01	ARG1	subject	0.0.1.0.2.0	0.0.1.0.0	
# ::edge	penalize-01	topic	die-01	0.0.1.0.2.0	0.0.1.0.2.0.0	
# ::edge	person	ARG0-of	have-org-role-91	0.0.0	0.0.0.0	
# ::edge	planet	name	name	0.0.2.0.0	0.0.2.0.0.1	
# ::edge	planet	wiki	-	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	reputation	poss	planet	0.0.2.0	0.0.2.0.0	
# ::edge	subject	poss	person	0.0.1.0.0	0.0.0	
# ::edge	threaten-01	ARG0	dictator	0.0.1.0.2	0.0.0.0.1	
# ::edge	threaten-01	ARG1	penalize-01	0.0.1.0.2	0.0.1.0.2.0	
# ::edge	threaten-01	ARG2	subject	0.0.1.0.2	0.0.1.0.0	
(c5 / contrast-01
      :ARG2 (m / make-01
            :ARG0 (p3 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country :wiki "Turkey" :name (n / name :op1 "Turkey"))
                        :ARG2 (d / dictator)))
            :ARG1 (l / law
                  :topic (c2 / change-01
                        :ARG0 (s / subject
                              :poss p3)
                        :ARG3 (c3 / costume
                              :mod (c4 / continent :wiki "Europe" :name (n2 / name :op1 "Europe")))
                        :manner (t / threaten-01
                              :ARG0 d
                              :ARG1 (p / penalize-01
                                    :ARG1 s
                                    :topic (d2 / die-01
                                          :ARG1 s))
                              :ARG2 s)))
            :ARG2-of (f / fortunate-41
                  :ARG1 (r / reputation
                        :poss (p2 / planet :wiki - :name (n3 / name :op1 "Asteroid" :op2 "B-612"))))))

# ::node	0	cause-01	
# ::node	0.0	demonstrate-01	7-8
# ::node	0.0.0	astronomer	4-5
# ::node	0.0.0.0	dress-01	12-13
# ::node	0.0.0.0.0	and	16-17
# ::node	0.0.0.0.0.0	style	15-16
# ::node	0.0.0.0.0.1	elegance	17-18
# ::node	0.0.0.0.0.2	impress-01	14-15
# ::node	0.0.1	all	8-9
# ::node	0.0.1.0	over	9-10
# ::node	0.0.1.0.0	again	10-11
# ::node	0.0.2	date-entity	2-3
# ::node	0.0.2.0	1920	2-3
# ::root	0	cause-01
# ::edge	all	op1	over	0.0.1	0.0.1.0	
# ::edge	and	ARG0-of	impress-01	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	and	op1	style	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	and	op2	elegance	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	astronomer	ARG1-of	dress-01	0.0.0	0.0.0.0	
# ::edge	cause-01	ARG1	demonstrate-01	0	0.0	
# ::edge	date-entity	year	1920	0.0.2	0.0.2.0	
# ::edge	demonstrate-01	ARG0	astronomer	0.0	0.0.0	
# ::edge	demonstrate-01	time	all	0.0	0.0.1	
# ::edge	demonstrate-01	time	date-entity	0.0	0.0.2	
# ::edge	dress-01	ARG2	and	0.0.0.0	0.0.0.0.0	
# ::edge	over	mod	again	0.0.1.0	0.0.1.0.0	
(c / cause-01
      :ARG1 (d4 / demonstrate-01
            :ARG0 (a / astronomer
                  :ARG1-of (d2 / dress-01
                        :ARG2 (a4 / and
                              :op1 (s / style)
                              :op2 (e / elegance)
                              :ARG0-of (i / impress-01))))
            :time (a2 / all
                  :op1 (o / over
                        :mod (a3 / again)))
            :time (d3 / date-entity :year 1920)))

# ::node	0	cause-01	
# ::node	0.0	reason	3-4
# ::node	0.0.0	serious	2-3
# ::node	0.1	believe-01	5-6
# ::node	0.1.0	i	0-1
# ::node	0.1.1	come-01	14-15
# ::node	0.1.1.0	prince	13-14
# ::node	0.1.1.0.0	little	12-13
# ::node	0.1.1.1	asteroid	17-18
# ::node	0.1.1.1.0	-	
# ::node	0.1.1.1.1	name	20-21
# ::node	0.1.1.1.1.0	"B-612"	20-21
# ::node	0.1.1.1.2	planet	8-9
# ::root	0	cause-01
# ::edge	asteroid	domain	planet	0.1.1.1	0.1.1.1.2	
# ::edge	asteroid	name	name	0.1.1.1	0.1.1.1.1	
# ::edge	asteroid	wiki	-	0.1.1.1	0.1.1.1.0	
# ::edge	believe-01	ARG0	i	0.1	0.1.0	
# ::edge	believe-01	ARG1	come-01	0.1	0.1.1	
# ::edge	cause-01	ARG0	reason	0	0.0	
# ::edge	cause-01	ARG1	believe-01	0	0.1	
# ::edge	come-01	ARG1	prince	0.1.1	0.1.1.0	
# ::edge	come-01	ARG3	asteroid	0.1.1	0.1.1.1	
# ::edge	name	op1	"B-612"	0.1.1.1.1	0.1.1.1.1.0	
# ::edge	prince	mod	little	0.1.1.0	0.1.1.0.0	
# ::edge	reason	mod	serious	0.0	0.0.0	
(c / cause-01
      :ARG0 (r / reason
            :mod (s / serious))
      :ARG1 (b / believe-01
            :ARG0 (i / i)
            :ARG1 (c2 / come-01
                  :ARG1 (p2 / prince
                        :mod (l / little))
                  :ARG3 (a / asteroid :wiki -
                        :name (n4 / name :op1 "B-612")
                        :domain (p / planet)))))

# ::node	0	see-01	6-7
# ::node	0.0	asteroid	1-2
# ::node	0.0.0	this	0-1
# ::node	0.1	telescope	9-10
# ::node	0.2	have-frequency-91	2-3
# ::node	0.2.0	1	
# ::node	0.2.1	only	3-4
# ::root	0	see-01
# ::edge	asteroid	mod	this	0.0	0.0.0	
# ::edge	have-frequency-91	ARG2	1	0.2	0.2.0	
# ::edge	have-frequency-91	mod	only	0.2	0.2.1	
# ::edge	see-01	ARG1	asteroid	0	0.0	
# ::edge	see-01	ARG1-of	have-frequency-91	0	0.2	
# ::edge	see-01	instrument	telescope	0	0.1	
(s / see-01
      :ARG1 (a / asteroid
            :mod (t / this))
      :instrument (t2 / telescope)
      :ARG1-of (h / have-frequency-91
            :ARG2 1
            :mod (o / only)))

# ::node	0	give-01	10-11
# ::node	0.0	astronomer	2-3
# ::node	0.1	number	18-19
# ::node	0.2	thing	5-6
# ::node	0.2.0	1	4-5
# ::node	0.2.1	include-91	5-6
# ::node	0.2.1.0	this	
# ::node	0.3	only	16-17
# ::node	0.4	discover-01	3-4
# ::node	0.5	instead-of-91	
# ::node	0.5.0	name-01	13-14
# ::root	0	give-01
# ::edge	discover-01	ARG0	astronomer	0.4	0.0	
# ::edge	discover-01	ARG1	thing	0.4	0.2	
# ::edge	give-01	ARG0	astronomer	0	0.0	
# ::edge	give-01	ARG1	number	0	0.1	
# ::edge	give-01	ARG1-of	instead-of-91	0	0.5	
# ::edge	give-01	ARG2	thing	0	0.2	
# ::edge	give-01	mod	only	0	0.3	
# ::edge	give-01	time	discover-01	0	0.4	
# ::edge	include-91	ARG2	this	0.2.1	0.2.1.0	
# ::edge	instead-of-91	ARG2	name-01	0.5	0.5.0	
# ::edge	name-01	ARG0	astronomer	0.5.0	0.0	
# ::edge	name-01	ARG1	thing	0.5.0	0.2	
# ::edge	thing	ARG1-of	include-91	0.2	0.2.1	
# ::edge	thing	quant	1	0.2	0.2.0	
(g / give-01
      :ARG0 (a / astronomer)
      :ARG1 (n2 / number)
      :ARG2 (t / thing :quant 1
            :ARG1-of (i / include-91
                  :ARG2 (t2 / this)))
      :mod (o2 / only)
      :time (d / discover-01
            :ARG0 a
            :ARG1 t)
      :ARG1-of (i2 / instead-of-91
            :ARG2 (n3 / name-01
                  :ARG0 a
                  :ARG1 t)))

# ::node	0	possible	
# ::node	0.0	call-01	2-3
# ::node	0.0.0	he	0-1
# ::node	0.0.1	it	3-4
# ::node	0.0.2	name	9-11
# ::node	0.0.2.0	"Asteroid"	9-11
# ::node	0.0.2.1	325	9-11
# ::node	0.0.3	exemplify-01	
# ::root	0	possible
# ::edge	call-01	ARG0	he	0.0	0.0.0	
# ::edge	call-01	ARG0-of	exemplify-01	0.0	0.0.3	
# ::edge	call-01	ARG1	it	0.0	0.0.1	
# ::edge	call-01	ARG2	name	0.0	0.0.2	
# ::edge	name	op1	"Asteroid"	0.0.2	0.0.2.0	
# ::edge	name	op2	325	0.0.2	0.0.2.1	
# ::edge	possible	domain	call-01	0	0.0	
(p / possible
      :domain (c / call-01
            :ARG0 (h / he)
            :ARG1 (i / it)
            :ARG2 (n2 / name :op1 "Asteroid" :op2 325)
            :ARG0-of (e / exemplify-01)))

# ::node	0	contrast-01	0-1
# ::node	0.0	costume-01	5-6
# ::node	0.0.0	he	1-2
# ::node	0.0.1	country	4-5
# ::node	0.0.1.0	"Turkey"	
# ::node	0.0.1.1	name	4-5
# ::node	0.0.1.1.0	"Turkey"	4-5
# ::node	0.0.2	cause-01	
# ::node	0.0.2.0	believe-01	11-12
# ::node	0.0.2.0.0	somebody	
# ::node	0.0.2.0.0.0	-	
# ::node	0.0.2.0.1	thing	14-15
# ::node	0.0.2.0.1.0	say-01	14-15
# ::root	0	contrast-01
# ::edge	believe-01	ARG0	somebody	0.0.2.0	0.0.2.0.0	
# ::edge	believe-01	ARG1	thing	0.0.2.0	0.0.2.0.1	
# ::edge	cause-01	ARG1	believe-01	0.0.2	0.0.2.0	
# ::edge	contrast-01	ARG2	costume-01	0	0.0	
# ::edge	costume-01	ARG0-of	cause-01	0.0	0.0.2	
# ::edge	costume-01	ARG1	he	0.0	0.0.0	
# ::edge	costume-01	manner	country	0.0	0.0.1	
# ::edge	country	name	name	0.0.1	0.0.1.1	
# ::edge	country	wiki	"Turkey"	0.0.1	0.0.1.0	
# ::edge	name	op1	"Turkey"	0.0.1.1	0.0.1.1.0	
# ::edge	say-01	ARG0	he	0.0.2.0.1.0	0.0.0	
# ::edge	somebody	polarity	-	0.0.2.0.0	0.0.2.0.0.0	
# ::edge	thing	ARG1-of	say-01	0.0.2.0.1	0.0.2.0.1.0	
(c4 / contrast-01
      :ARG2 (c / costume-01
            :ARG1 (h / he)
            :manner (c2 / country :wiki "Turkey"
                  :name (n / name :op1 "Turkey"))
            :ARG0-of (c3 / cause-01
                  :ARG1 (b2 / believe-01
                        :ARG0 (s / somebody :polarity -)
                        :ARG1 (t / thing
                              :ARG1-of (s2 / say-01
                                    :ARG0 h))))))

# ::node	0	resemble-01	
# ::node	0.0	grown-up	0-1
# ::node	0.1	that	5-6
# ::root	0	resemble-01
# ::edge	resemble-01	ARG1	grown-up	0	0.0	
# ::edge	resemble-01	ARG2	that	0	0.1	
(r / resemble-01
      :ARG1 (g / grown-up)
      :ARG2 (t / that))

# ::node	0	see-01	
# ::node	0.0	astronomer	5-6
# ::node	0.0.0	country	4-5
# ::node	0.0.0.0	"Turkey"	
# ::node	0.0.0.1	name	4-5
# ::node	0.0.0.1.0	"Turkey"	4-5
# ::node	0.1	date-entity	8-9
# ::node	0.1.0	1909	8-9
# ::root	0	see-01
# ::edge	astronomer	mod	country	0.0	0.0.0	
# ::edge	country	name	name	0.0.0	0.0.0.1	
# ::edge	country	wiki	"Turkey"	0.0.0	0.0.0.0	
# ::edge	date-entity	year	1909	0.1	0.1.0	
# ::edge	name	op1	"Turkey"	0.0.0.1	0.0.0.1.0	
# ::edge	see-01	ARG0	astronomer	0	0.0	
# ::edge	see-01	time	date-entity	0	0.1	
(s / see-01
      :ARG0 (a / astronomer
            :mod (c / country :wiki "Turkey"
                  :name (n / name :op1 "Turkey")))
      :time (d / date-entity :year 1909))

# ::node	0	contrast-01	0-1
# ::node	0.0	add-01	4-5
# ::node	0.0.0	prince	3-4
# ::node	0.0.0.0	little	2-3
# ::node	0.0.1	follow-05	9-10
# ::node	0.0.1.0	eat-01	13-14
# ::node	0.0.1.0.0	they	11-12
# ::node	0.0.1.0.1	baobab	14-15
# ::node	0.0.1.0.2	also	12-13
# ::node	0.0.1.1	have-condition-91	
# ::root	0	contrast-01
# ::edge	add-01	ARG0	prince	0.0	0.0.0	
# ::edge	add-01	ARG1	follow-05	0.0	0.0.1	
# ::edge	contrast-01	ARG1	add-01	0	0.0	
# ::edge	eat-01	ARG0	they	0.0.1.0	0.0.1.0.0	
# ::edge	eat-01	ARG1	baobab	0.0.1.0	0.0.1.0.1	
# ::edge	eat-01	mod	also	0.0.1.0	0.0.1.0.2	
# ::edge	follow-05	ARG1	eat-01	0.0.1	0.0.1.0	
# ::edge	follow-05	ARG1-of	have-condition-91	0.0.1	0.0.1.1	
# ::edge	prince	mod	little	0.0.0	0.0.0.0	
(c / contrast-01
      :ARG1 (a / add-01
            :ARG0 (p / prince
                  :mod (l / little))
            :ARG1 (f / follow-05
                  :ARG1 (e / eat-01
                        :ARG0 (t / they)
                        :ARG1 (b / baobab)
                        :mod (a2 / also))
                  :ARG1-of (h / have-condition-91))))

# ::node	0	say-01	1-2
# ::node	0.0	i	0-1
# ::root	0	say-01
# ::edge	say-01	ARG0	i	0	0.0	
(s / say-01
  :ARG0 (i / i))

# ::node	0	contrast-01	1-2
# ::node	0.0	cause-01	
# ::node	0.0.0	amr-unknown	
# ::node	0.0.1	want-01	5-6
# ::node	0.0.1.0	you	4-5
# ::node	0.0.1.1	eat-01	9-10
# ::node	0.0.1.1.0	sheep	7-8
# ::node	0.0.1.1.1	baobab	12-13
# ::node	0.0.1.1.1.0	little	11-12
# ::root	0	contrast-01
# ::edge	baobab	mod	little	0.0.1.1.1	0.0.1.1.1.0	
# ::edge	cause-01	ARG0	amr-unknown	0.0	0.0.0	
# ::edge	cause-01	ARG1	want-01	0.0	0.0.1	
# ::edge	contrast-01	ARG2	cause-01	0	0.0	
# ::edge	eat-01	ARG0	sheep	0.0.1.1	0.0.1.1.0	
# ::edge	eat-01	ARG1	baobab	0.0.1.1	0.0.1.1.1	
# ::edge	want-01	ARG0	you	0.0.1	0.0.1.0	
# ::edge	want-01	ARG1	eat-01	0.0.1	0.0.1.1	
(c / contrast-01
      :ARG2 (c2 / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (e / eat-01
                        :ARG0 (s / sheep)
                        :ARG1 (b / baobab
                              :mod (l / little))))))

# ::node	0	answer-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	i	
# ::node	0.2	come-25	9-10
# ::node	0.3	immediate	
# ::node	0.4	speak-01	19-20
# ::node	0.4.0	something	21-22
# ::node	0.4.0.0	self-evident	24-25
# ::root	0	answer-01
# ::edge	answer-01	ARG0	he	0	0.0	
# ::edge	answer-01	ARG1	i	0	0.1	
# ::edge	answer-01	ARG2	come-25	0	0.2	
# ::edge	answer-01	conj-as-if	speak-01	0	0.4	
# ::edge	answer-01	time	immediate	0	0.3	
# ::edge	something	mod	self-evident	0.4.0	0.4.0.0	
# ::edge	speak-01	ARG0	he	0.4	0.0	
# ::edge	speak-01	ARG1	something	0.4	0.4.0	
(a / answer-01
      :ARG0 (h / he)
      :ARG1 (i2 / i)
      :ARG2 (c / come-25)
      :time (i / immediate)
      :conj-as-if (s / speak-01
            :ARG0 h
            :ARG1 (s2 / something
                  :mod (s3 / self-evident))))

# ::node	0	and	0-1
# ::node	0.0	oblige-02	3-4
# ::node	0.0.0	try-01	
# ::node	0.0.0.0	i	1-2
# ::node	0.0.0.1	solve-01	11-12
# ::node	0.0.0.1.0	problem	13-14
# ::node	0.0.0.1.0.0	this	12-13
# ::node	0.0.0.1.1	assist-01	17-18
# ::node	0.0.0.1.1.0	-	
# ::node	0.0.0.2	mental	8-9
# ::node	0.0.0.3	great	7-8
# ::root	0	and
# ::edge	and	op1	oblige-02	0	0.0	
# ::edge	assist-01	ARG1	i	0.0.0.1.1	0.0.0.0	
# ::edge	assist-01	polarity	-	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	oblige-02	ARG2	try-01	0.0	0.0.0	
# ::edge	problem	mod	this	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	solve-01	ARG0	i	0.0.0.1	0.0.0.0	
# ::edge	solve-01	ARG1	problem	0.0.0.1	0.0.0.1.0	
# ::edge	solve-01	ARG2-of	assist-01	0.0.0.1	0.0.0.1.1	
# ::edge	try-01	ARG0	i	0.0.0	0.0.0.0	
# ::edge	try-01	ARG1	solve-01	0.0.0	0.0.0.1	
# ::edge	try-01	manner	mental	0.0.0	0.0.0.2	
# ::edge	try-01	mod	great	0.0.0	0.0.0.3	
(a / and
      :op1 (o / oblige-02
            :ARG2 (t2 / try-01
                  :ARG0 (i / i)
                  :ARG1 (s / solve-01
                        :ARG0 i
                        :ARG1 (p / problem
                              :mod (t / this))
                        :ARG2-of (a2 / assist-01 :polarity -
                              :ARG1 i))
                  :manner (m2 / mental)
                  :mod (g / great))))

# ::node	0	make-02	7-8
# ::node	0.0	idea	1-2
# ::node	0.0.0	herd	4-5
# ::node	0.0.0.0	elephant	6-7
# ::node	0.1	laugh-01	11-12
# ::node	0.1.0	prince	10-11
# ::node	0.1.0.0	little	9-10
# ::root	0	make-02
# ::edge	herd	consist-of	elephant	0.0.0	0.0.0.0	
# ::edge	idea	topic	herd	0.0	0.0.0	
# ::edge	laugh-01	ARG0	prince	0.1	0.1.0	
# ::edge	make-02	ARG0	idea	0	0.0	
# ::edge	make-02	ARG1	laugh-01	0	0.1	
# ::edge	prince	mod	little	0.1.0	0.1.0.0	
(m / make-02
      :ARG0 (i / idea
            :topic (h / herd
                  :consist-of (e / elephant)))
      :ARG1 (l / laugh-01
            :ARG0 (p / prince
                  :mod (l2 / little))))

# ::node	0	say-01	16-17
# ::node	0.0	he	15-16
# ::node	0.1	obligate-01	
# ::node	0.1.0	stack-01	
# ::node	0.1.0.0	we	1-2
# ::node	0.1.0.1	they	
# ::root	0	say-01
# ::edge	obligate-01	ARG2	stack-01	0.1	0.1.0	
# ::edge	say-01	ARG0	he	0	0.0	
# ::edge	say-01	ARG1	obligate-01	0	0.1	
# ::edge	stack-01	ARG0	we	0.1.0	0.1.0.0	
# ::edge	stack-01	ARG1	they	0.1.0	0.1.0.1	
(s / say-01
      :ARG0 (h / he)
      :ARG1 (o / obligate-01
            :ARG2 (s2 / stack-01
                  :ARG0 (w / we)
                  :ARG1 (t / they))))

# ::node	0	contrast-01	0-1
# ::node	0.0	comment-02	5-6
# ::node	0.0.0	he	1-2
# ::node	0.0.1	start-05	16-17
# ::node	0.0.1.0	baobab	15-16
# ::node	0.0.1.1	little	20-21
# ::node	0.0.1.2	before	8-9
# ::node	0.0.1.2.0	grow-02	10-11
# ::node	0.0.1.2.0.0	big	12-13
# ::node	0.0.1.2.0.0.0	so	11-12
# ::node	0.0.2	wise	4-5
# ::root	0	contrast-01
# ::edge	before	op1	grow-02	0.0.1.2	0.0.1.2.0	
# ::edge	big	degree	so	0.0.1.2.0.0	0.0.1.2.0.0.0	
# ::edge	comment-02	ARG0	he	0.0	0.0.0	
# ::edge	comment-02	ARG1	start-05	0.0	0.0.1	
# ::edge	comment-02	manner	wise	0.0	0.0.2	
# ::edge	contrast-01	ARG2	comment-02	0	0.0	
# ::edge	grow-02	ARG1	baobab	0.0.1.2.0	0.0.1.0	
# ::edge	grow-02	ARG2	big	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	start-05	ARG0	baobab	0.0.1	0.0.1.0	
# ::edge	start-05	ARG2	little	0.0.1	0.0.1.1	
# ::edge	start-05	time	before	0.0.1	0.0.1.2	
(c2 / contrast-01
      :ARG2 (c / comment-02
            :ARG0 (h / he)
            :ARG1 (s / start-05
                  :ARG0 (b2 / baobab)
                  :ARG2 (l / little)
                  :time (b4 / before
                        :op1 (g / grow-02
                              :ARG1 b2
                              :ARG2 (b5 / big
                                    :degree (s2 / so)))))
            :manner (w / wise)))

# ::node	0	correct	4-5
# ::node	0.0	strict	3-4
# ::node	0.1	that	1-2
# ::root	0	correct
# ::edge	correct	domain	that	0	0.1	
# ::edge	correct	mod	strict	0	0.0	
(c / correct
      :mod (s / strict)
      :domain (t / that))

# ::node	0	be-located-at-91	
# ::node	0.0	and	24-25
# ::node	0.0.0	plant	26-27
# ::node	0.0.0.0	good	22-23
# ::node	0.0.1	plant	23-24
# ::node	0.0.1.0	bad	25-26
# ::node	0.0.2	indeed	0-1
# ::node	0.1	and	
# ::node	0.1.0	planet	10-11
# ::node	0.1.0.0	live-01	15-16
# ::node	0.1.0.0.0	prince	14-15
# ::node	0.1.0.0.0.0	little	13-14
# ::node	0.1.1	planet	20-21
# ::node	0.1.1.0	all	19-20
# ::node	0.2	learn-01	4-5
# ::node	0.2.0	i	3-4
# ::root	0	be-located-at-91
# ::edge	and	mod	indeed	0.0	0.0.2	
# ::edge	and	op1	planet	0.1	0.1.0	
# ::edge	and	op1	plant	0.0	0.0.0	
# ::edge	and	op2	planet	0.1	0.1.1	
# ::edge	and	op2	plant	0.0	0.0.1	
# ::edge	be-located-at-91	ARG1	and	0	0.0	
# ::edge	be-located-at-91	ARG1-of	learn-01	0	0.2	
# ::edge	be-located-at-91	ARG2	and	0	0.1	
# ::edge	learn-01	ARG0	i	0.2	0.2.0	
# ::edge	live-01	ARG0	prince	0.1.0.0	0.1.0.0.0	
# ::edge	planet	location-of	live-01	0.1.0	0.1.0.0	
# ::edge	planet	mod	all	0.1.1	0.1.1.0	
# ::edge	plant	mod	bad	0.0.1	0.0.1.0	
# ::edge	plant	mod	good	0.0.0	0.0.0.0	
# ::edge	prince	mod	little	0.1.0.0.0	0.1.0.0.0.0	
(b2 / be-located-at-91
      :ARG1 (a3 / and
            :op1 (p / plant
                  :mod (g / good))
            :op2 (p2 / plant
                  :mod (b / bad))
            :mod (i / indeed))
      :ARG2 (a / and
            :op1 (p3 / planet
                  :location-of (l / live-01
                        :ARG0 (p4 / prince
                              :mod (l2 / little))))
            :op2 (p5 / planet
                  :mod (a2 / all)))
      :ARG1-of (l3 / learn-01
            :ARG0 (i2 / i)))

# ::node	0	and	11-12
# ::node	0.0	seed	13-14
# ::node	0.0.0	good	8-9
# ::node	0.0.1	plant	16-17
# ::node	0.0.1.0	good	5-6
# ::node	0.1	seed	6-7
# ::node	0.1.0	bad	15-16
# ::node	0.1.1	plant	9-10
# ::node	0.1.1.0	bad	12-13
# ::node	0.2	cause-01	
# ::root	0	and
# ::edge	and	ARG1-of	cause-01	0	0.2	
# ::edge	and	op1	seed	0	0.0	
# ::edge	and	op2	seed	0	0.1	
# ::edge	plant	mod	bad	0.1.1	0.1.1.0	
# ::edge	plant	mod	good	0.0.1	0.0.1.0	
# ::edge	seed	mod	bad	0.1	0.1.0	
# ::edge	seed	mod	good	0.0	0.0.0	
# ::edge	seed	source	plant	0.0	0.0.1	
# ::edge	seed	source	plant	0.1	0.1.1	
(a / and
      :op1 (s / seed
            :mod (g / good)
            :source (p / plant
                  :mod (g2 / good)))
      :op2 (s2 / seed
            :mod (b / bad)
            :source (p2 / plant
                  :mod (b2 / bad)))
      :ARG1-of (c2 / cause-01))

# ::node	0	cause-01	
# ::node	0.0	learn-01	3-4
# ::node	0.0.0	i	0-1
# ::node	0.0.1	fact	6-7
# ::node	0.0.1.0	ordinal-entity	
# ::node	0.0.1.0.0	2	
# ::node	0.0.1.1	important	9-10
# ::node	0.0.1.1.0	great	8-9
# ::node	0.0.1.2	large	24-25
# ::node	0.0.1.2.0	more	
# ::node	0.0.1.2.0.0	any	23-24
# ::node	0.0.1.2.0.0.0	scarce	22-23
# ::node	0.0.1.2.1	house	27-28
# ::node	0.0.1.2.2	planet	15-16
# ::node	0.0.1.2.2.0	come-01	19-20
# ::node	0.0.1.2.2.0.0	prince	18-19
# ::node	0.0.1.2.2.0.0.0	little	17-18
# ::root	0	cause-01
# ::edge	any	degree	scarce	0.0.1.2.0.0	0.0.1.2.0.0.0	
# ::edge	cause-01	ARG1	learn-01	0	0.0	
# ::edge	come-01	ARG1	prince	0.0.1.2.2.0	0.0.1.2.2.0.0	
# ::edge	fact	domain	large	0.0.1	0.0.1.2	
# ::edge	fact	mod	important	0.0.1	0.0.1.1	
# ::edge	fact	ord	ordinal-entity	0.0.1	0.0.1.0	
# ::edge	important	degree	great	0.0.1.1	0.0.1.1.0	
# ::edge	large	compared-to	house	0.0.1.2	0.0.1.2.1	
# ::edge	large	degree	more	0.0.1.2	0.0.1.2.0	
# ::edge	large	domain	planet	0.0.1.2	0.0.1.2.2	
# ::edge	learn-01	ARG0	i	0.0	0.0.0	
# ::edge	learn-01	ARG1	fact	0.0	0.0.1	
# ::edge	more	mod	any	0.0.1.2.0	0.0.1.2.0.0	
# ::edge	ordinal-entity	value	2	0.0.1.0	0.0.1.0.0	
# ::edge	planet	ARG3-of	come-01	0.0.1.2.2	0.0.1.2.2.0	
# ::edge	prince	mod	little	0.0.1.2.2.0.0	0.0.1.2.2.0.0.0	
(c2 / cause-01
      :ARG1 (l / learn-01
            :ARG0 (i / i)
            :ARG1 (f / fact
                  :ord (o / ordinal-entity :value 2)
                  :mod (i2 / important
                        :degree (g / great))
                  :domain (l2 / large
                        :degree (m / more
                              :mod (a / any
                                    :degree (s2 / scarce)))
                        :compared-to (h / house)
                        :domain (p / planet
                              :ARG3-of (c / come-01
                                    :ARG1 (p2 / prince
                                          :mod (l3 / little))))))))

# ::node	0	chapter	0-1
# ::node	0.0	4	1-2
# ::root	0	chapter
# ::edge	chapter	mod	4	0	0.0	
(c / chapter
  :mod 4)

# ::node	0	ask-01	4-5
# ::node	0.0	prince	3-4
# ::node	0.0.0	little	28-29
# ::node	0.1	true	19-20
# ::node	0.1.0	interrogative	
# ::node	0.1.1	eat-01	27-28
# ::node	0.1.1.0	sheep	26-27
# ::node	0.1.1.1	bush	29-30
# ::node	0.1.1.1.0	little	2-3
# ::node	0.2	i	
# ::node	0.3	abrupt	6-7
# ::node	0.4	seize-01	10-11
# ::node	0.4.0	doubt-01	14-15
# ::node	0.4.0.0	grave	13-14
# ::root	0	ask-01
# ::edge	ask-01	ARG0	prince	0	0.0	
# ::edge	ask-01	ARG1	true	0	0.1	
# ::edge	ask-01	ARG2	i	0	0.2	
# ::edge	ask-01	conj-as-if	seize-01	0	0.4	
# ::edge	ask-01	manner	abrupt	0	0.3	
# ::edge	bush	mod	little	0.1.1.1	0.1.1.1.0	
# ::edge	doubt-01	ARG0	prince	0.4.0	0.0	
# ::edge	doubt-01	mod	grave	0.4.0	0.4.0.0	
# ::edge	eat-01	ARG0	sheep	0.1.1	0.1.1.0	
# ::edge	eat-01	ARG1	bush	0.1.1	0.1.1.1	
# ::edge	prince	mod	little	0.0	0.0.0	
# ::edge	seize-01	ARG0	doubt-01	0.4	0.4.0	
# ::edge	seize-01	ARG1	prince	0.4	0.0	
# ::edge	true	domain	eat-01	0.1	0.1.1	
# ::edge	true	mode	interrogative	0.1	0.1.0	
(a / ask-01
      :ARG0 (p / prince
            :mod (l2 / little))
      :ARG1 (t / true :mode interrogative
            :domain (e / eat-01
                  :ARG0 (s / sheep)
                  :ARG1 (b / bush
                        :mod (l / little))))
      :ARG2 (i2 / i)
      :manner (a2 / abrupt)
      :conj-as-if (s2 / seize-01
            :ARG0 (d / doubt-01
                  :ARG0 p
                  :mod (g / grave))
            :ARG1 p))

# ::node	0	obligate-01	
# ::node	0.0	thank-01	11-12
# ::node	0.0.0	i	6-7
# ::node	0.0.1	sheep	9-10
# ::node	0.0.2	it	13-14
# ::node	0.1	time	1-2
# ::node	0.1.0	this	0-1
# ::node	0.2	again	
# ::root	0	obligate-01
# ::edge	obligate-01	ARG2	thank-01	0	0.0	
# ::edge	obligate-01	mod	again	0	0.2	
# ::edge	obligate-01	time	time	0	0.1	
# ::edge	thank-01	ARG0	i	0.0	0.0.0	
# ::edge	thank-01	ARG1	sheep	0.0	0.0.1	
# ::edge	thank-01	ARG2	it	0.0	0.0.2	
# ::edge	time	mod	this	0.1	0.1.0	
(o / obligate-01
      :ARG2 (t / thank-01
            :ARG0 (i / i)
            :ARG1 (s / sheep)
            :ARG2 (i2 / it))
      :time (t2 / time
            :mod (t3 / this))
      :mod (a / again))

# ::node	0	know-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	exist-01	
# ::node	0.1.0	and	
# ::node	0.1.0.0	planet	10-11
# ::node	0.1.0.0.0	great	9-10
# ::node	0.1.0.0.1	planet	15-16
# ::node	0.1.0.0.1.0	"Earth"	
# ::node	0.1.0.0.1.1	name	15-16
# ::node	0.1.0.0.1.1.0	"Earth"	15-16
# ::node	0.1.0.0.2	planet	17-18
# ::node	0.1.0.0.2.0	"Jupiter"	
# ::node	0.1.0.0.2.1	name	17-18
# ::node	0.1.0.0.2.1.0	"Jupiter"	17-18
# ::node	0.1.0.0.3	planet	19-20
# ::node	0.1.0.0.3.0	"Mars"	
# ::node	0.1.0.0.3.1	name	19-20
# ::node	0.1.0.0.3.1.0	"Mars"	19-20
# ::node	0.1.0.0.4	planet	21-22
# ::node	0.1.0.0.4.0	"Venus"	
# ::node	0.1.0.0.4.1	name	21-22
# ::node	0.1.0.0.4.1.0	"Venus"	21-22
# ::node	0.1.0.0.5	name-01	28-29
# ::node	0.1.0.0.5.0	we	25-26
# ::node	0.1.0.1	planet	
# ::node	0.1.0.1.0	include-91	32-33
# ::node	0.1.0.1.0.0	planet	
# ::node	0.1.0.1.0.0.0	small	42-43
# ::node	0.1.0.1.0.0.0.0	so	41-42
# ::node	0.1.0.1.0.0.0.1	cause-01	
# ::node	0.1.0.1.0.0.0.1.0	difficult	
# ::node	0.1.0.1.0.0.0.1.0.0	see-01	49-50
# ::node	0.1.0.1.0.0.0.1.0.0.0	telescope	53-54
# ::node	0.1.0.1.1	other	35-36
# ::node	0.1.0.1.2	multiple	
# ::node	0.1.0.1.2.0	100	
# ::node	0.1.0.1.3	also	
# ::node	0.2	well	3-4
# ::node	0.2.0	very	2-3
# ::root	0	know-01
# ::edge	and	op1	planet	0.1.0	0.1.0.0	
# ::edge	and	op2	planet	0.1.0	0.1.0.1	
# ::edge	cause-01	ARG1	difficult	0.1.0.1.0.0.0.1	0.1.0.1.0.0.0.1.0	
# ::edge	difficult	domain	see-01	0.1.0.1.0.0.0.1.0	0.1.0.1.0.0.0.1.0.0	
# ::edge	exist-01	ARG1	and	0.1	0.1.0	
# ::edge	include-91	ARG1	planet	0.1.0.1.0	0.1.0.1.0.0	
# ::edge	know-01	ARG0	i	0	0.0	
# ::edge	know-01	ARG1	exist-01	0	0.1	
# ::edge	know-01	mod	well	0	0.2	
# ::edge	multiple	op1	100	0.1.0.1.2	0.1.0.1.2.0	
# ::edge	name	op1	"Earth"	0.1.0.0.1.1	0.1.0.0.1.1.0	
# ::edge	name	op1	"Jupiter"	0.1.0.0.2.1	0.1.0.0.2.1.0	
# ::edge	name	op1	"Mars"	0.1.0.0.3.1	0.1.0.0.3.1.0	
# ::edge	name	op1	"Venus"	0.1.0.0.4.1	0.1.0.0.4.1.0	
# ::edge	name-01	ARG0	we	0.1.0.0.5	0.1.0.0.5.0	
# ::edge	planet	ARG1-of	name-01	0.1.0.0	0.1.0.0.5	
# ::edge	planet	ARG2-of	include-91	0.1.0.1	0.1.0.1.0	
# ::edge	planet	example	planet	0.1.0.0	0.1.0.0.1	
# ::edge	planet	example	planet	0.1.0.0	0.1.0.0.2	
# ::edge	planet	example	planet	0.1.0.0	0.1.0.0.3	
# ::edge	planet	example	planet	0.1.0.0	0.1.0.0.4	
# ::edge	planet	mod	also	0.1.0.1	0.1.0.1.3	
# ::edge	planet	mod	great	0.1.0.0	0.1.0.0.0	
# ::edge	planet	mod	other	0.1.0.1	0.1.0.1.1	
# ::edge	planet	mod	small	0.1.0.1.0.0	0.1.0.1.0.0.0	
# ::edge	planet	name	name	0.1.0.0.1	0.1.0.0.1.1	
# ::edge	planet	name	name	0.1.0.0.2	0.1.0.0.2.1	
# ::edge	planet	name	name	0.1.0.0.3	0.1.0.0.3.1	
# ::edge	planet	name	name	0.1.0.0.4	0.1.0.0.4.1	
# ::edge	planet	quant	multiple	0.1.0.1	0.1.0.1.2	
# ::edge	planet	wiki	"Earth"	0.1.0.0.1	0.1.0.0.1.0	
# ::edge	planet	wiki	"Jupiter"	0.1.0.0.2	0.1.0.0.2.0	
# ::edge	planet	wiki	"Mars"	0.1.0.0.3	0.1.0.0.3.0	
# ::edge	planet	wiki	"Venus"	0.1.0.0.4	0.1.0.0.4.0	
# ::edge	see-01	ARG1	planet	0.1.0.1.0.0.0.1.0.0	0.1.0.1.0.0	
# ::edge	see-01	instrument	telescope	0.1.0.1.0.0.0.1.0.0	0.1.0.1.0.0.0.1.0.0.0	
# ::edge	small	ARG0-of	cause-01	0.1.0.1.0.0.0	0.1.0.1.0.0.0.1	
# ::edge	small	degree	so	0.1.0.1.0.0.0	0.1.0.1.0.0.0.0	
# ::edge	well	degree	very	0.2	0.2.0	
(k / know-01
      :ARG0 (i / i)
      :ARG1 (e / exist-01
            :ARG1 (a2 / and
                  :op1 (p / planet
                        :mod (g / great)
                        :example (p2 / planet :wiki "Earth" :name (n / name :op1 "Earth"))
                        :example (p3 / planet :wiki "Jupiter" :name (n2 / name :op1 "Jupiter"))
                        :example (p4 / planet :wiki "Mars" :name (n3 / name :op1 "Mars"))
                        :example (p5 / planet :wiki "Venus" :name (n4 / name :op1 "Venus"))
                        :ARG1-of (n5 / name-01
                              :ARG0 (w3 / we)))
                  :op2 (p7 / planet
                        :ARG2-of (i2 / include-91
                              :ARG1 (p6 / planet
                                    :mod (s2 / small
                                          :degree (s3 / so)
                                          :ARG0-of (c / cause-01
                                                :ARG1 (d / difficult
                                                      :domain (s4 / see-01
                                                            :ARG1 p6
                                                            :instrument (t / telescope)))))))
                        :mod (o / other)
                        :quant (m / multiple :op1 100)
                        :mod (a / also))))
      :mod (w / well
            :degree (v / very)))

# ::node	0	contrast-01	0-1
# ::node	0.0	surprise-01	5-6
# ::node	0.0.0	-	4-4
# ::node	0.0.1	that	1-2
# ::node	0.0.2	i	
# ::node	0.0.3	much	7-8
# ::node	0.0.4	real	4-5
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	surprise-01	0	0.0	
# ::edge	surprise-01	ARG0	that	0.0	0.0.1	
# ::edge	surprise-01	ARG1	i	0.0	0.0.2	
# ::edge	surprise-01	degree	much	0.0	0.0.3	
# ::edge	surprise-01	mod	real	0.0	0.0.4	
# ::edge	surprise-01	polarity	-	0.0	0.0.0	
(c / contrast-01
      :ARG2 (s / surprise-01 :polarity -
            :ARG0 (t / that)
            :ARG1 (i / i)
            :degree (m / much)
            :mod (r / real)))

# ::node	0	possible	10-11
# ::node	0.0	-	
# ::node	0.1	eliminate-01	
# ::node	0.1.0	you	4-5
# ::node	0.1.1	baobab	1-2
# ::node	0.1.2	ever	
# ::node	0.2	attend-01	17-18
# ::node	0.2.0	late	21-22
# ::node	0.2.0.0	too	20-21
# ::root	0	possible
# ::edge	attend-01	ARG0	you	0.2	0.1.0	
# ::edge	attend-01	ARG1	baobab	0.2	0.1.1	
# ::edge	attend-01	time	late	0.2	0.2.0	
# ::edge	eliminate-01	ARG0	you	0.1	0.1.0	
# ::edge	eliminate-01	ARG1	baobab	0.1	0.1.1	
# ::edge	eliminate-01	time	ever	0.1	0.1.2	
# ::edge	late	degree	too	0.2.0	0.2.0.0	
# ::edge	possible	condition	attend-01	0	0.2	
# ::edge	possible	domain	eliminate-01	0	0.1	
# ::edge	possible	polarity	-	0	0.0	
(p / possible :polarity -
      :domain (e / eliminate-01
            :ARG0 (y / you)
            :ARG1 (b / baobab)
            :time (e2 / ever))
      :condition (a / attend-01
            :ARG0 y
            :ARG1 b
            :time (l / late
                  :degree (t / too))))

# ::node	0	infest-01	6-7
# ::node	0.0	soil	1-2
# ::node	0.0.0	planet	4-5
# ::node	0.0.0.0	that	3-4
# ::node	0.1	they	
# ::root	0	infest-01
# ::edge	infest-01	ARG1	soil	0	0.0	
# ::edge	infest-01	ARG2	they	0	0.1	
# ::edge	planet	mod	that	0.0.0	0.0.0.0	
# ::edge	soil	poss	planet	0.0	0.0.0	
(i / infest-01
      :ARG1 (s / soil
            :poss (p / planet
                  :mod (t2 / that)))
      :ARG2 (t / they))

# ::node	0	be-located-at-91	
# ::node	0.0	seed	5-6
# ::node	0.0.0	terrible	4-5
# ::node	0.0.1	some	3-4
# ::node	0.0.2	baobab	25-26
# ::node	0.1	planet	8-9
# ::node	0.1.0	home	12-13
# ::node	0.1.0.0	prince	16-17
# ::node	0.1.0.0.0	little	15-16
# ::node	0.2	now	0-1
# ::root	0	be-located-at-91
# ::edge	be-located-at-91	ARG1	seed	0	0.0	
# ::edge	be-located-at-91	ARG2	planet	0	0.1	
# ::edge	be-located-at-91	time	now	0	0.2	
# ::edge	home	poss	prince	0.1.0	0.1.0.0	
# ::edge	planet	location-of	home	0.1	0.1.0	
# ::edge	prince	mod	little	0.1.0.0	0.1.0.0.0	
# ::edge	seed	mod	terrible	0.0	0.0.0	
# ::edge	seed	poss	baobab	0.0	0.0.2	
# ::edge	seed	quant	some	0.0	0.0.1	
(b2 / be-located-at-91
      :ARG1 (s / seed
            :mod (t / terrible)
            :quant (s2 / some)
            :poss (b / baobab))
      :ARG2 (p / planet
            :location-of (h / home
                  :poss (p2 / prince
                        :mod (l / little))))
      :time (n / now))

# ::node	0	contrast-01	0-1
# ::node	0.0	obligate-01	
# ::node	0.0.0	destroy-01	10-11
# ::node	0.0.0.0	one	22-23
# ::node	0.0.0.1	instant	20-21
# ::node	0.0.0.1.0	recognize-01	23-24
# ::node	0.0.0.1.1	ordinal-entity	
# ::node	0.0.0.1.1.0	1	8-9
# ::node	0.0.0.1.1.1	very	18-19
# ::node	0.0.0.2	soon	13-14
# ::node	0.0.0.2.0	most	
# ::node	0.0.0.2.1	possible	15-16
# ::node	0.0.1	plant	6-7
# ::node	0.0.1.0	bad	5-6
# ::node	0.0.1.1	it	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	obligate-01	0	0.0	
# ::edge	destroy-01	ARG0	one	0.0.0	0.0.0.0	
# ::edge	destroy-01	ARG1	it	0.0.0	0.0.1.1	
# ::edge	destroy-01	time	instant	0.0.0	0.0.0.1	
# ::edge	destroy-01	time	soon	0.0.0	0.0.0.2	
# ::edge	instant	ord	ordinal-entity	0.0.0.1	0.0.0.1.1	
# ::edge	instant	time-of	recognize-01	0.0.0.1	0.0.0.1.0	
# ::edge	obligate-01	ARG2	destroy-01	0.0	0.0.0	
# ::edge	obligate-01	condition	plant	0.0	0.0.1	
# ::edge	ordinal-entity	degree	very	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	ordinal-entity	value	1	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	plant	domain	it	0.0.1	0.0.1.1	
# ::edge	plant	mod	bad	0.0.1	0.0.1.0	
# ::edge	possible	domain	destroy-01	0.0.0.2.1	0.0.0	
# ::edge	recognize-01	ARG0	one	0.0.0.1.0	0.0.0.0	
# ::edge	recognize-01	ARG1	it	0.0.0.1.0	0.0.1.1	
# ::edge	soon	compared-to	possible	0.0.0.2	0.0.0.2.1	
# ::edge	soon	degree	most	0.0.0.2	0.0.0.2.0	
(c / contrast-01
      :ARG2 (o / obligate-01
            :ARG2 (d / destroy-01
                  :ARG0 (o2 / one)
                  :ARG1 i2
                  :time (i / instant
                        :time-of (r / recognize-01
                              :ARG0 o2
                              :ARG1 i2)
                        :ord (o3 / ordinal-entity :value 1
                              :degree (v / very)))
                  :time (s / soon
                        :degree (m / most)
                        :compared-to (p2 / possible
                              :domain d)))
            :condition (p / plant
                  :mod (b / bad)
                  :domain (i2 / it))))

# ::node	0	allow-01	
# ::node	0.0	one	17-18
# ::node	0.1	grow-01	21-22
# ::node	0.1.0	wish-01	25-26
# ::node	0.1.0.0	possible	
# ::node	0.2	or	8-9
# ::node	0.2.0	sprout	5-6
# ::node	0.2.0.0	radish	7-8
# ::node	0.2.1	sprig	10-11
# ::node	0.2.1.0	bush	15-16
# ::node	0.2.1.0.0	rose	13-14
# ::node	0.2.2	only	3-4
# ::node	0.2.3	it	1-2
# ::root	0	allow-01
# ::edge	allow-01	ARG0	one	0	0.0	
# ::edge	allow-01	ARG1	grow-01	0	0.1	
# ::edge	allow-01	condition	or	0	0.2	
# ::edge	bush	mod	rose	0.2.1.0	0.2.1.0.0	
# ::edge	grow-01	ARG1	it	0.1	0.2.3	
# ::edge	grow-01	location	wish-01	0.1	0.1.0	
# ::edge	or	domain	it	0.2	0.2.3	
# ::edge	or	mod	only	0.2	0.2.2	
# ::edge	or	op1	sprout	0.2	0.2.0	
# ::edge	or	op2	sprig	0.2	0.2.1	
# ::edge	sprig	part-of	bush	0.2.1	0.2.1.0	
# ::edge	sprout	part-of	radish	0.2.0	0.2.0.0	
# ::edge	wish-01	ARG0	it	0.1.0	0.2.3	
# ::edge	wish-01	mod	possible	0.1.0	0.1.0.0	
(a / allow-01
      :ARG0 (o / one)
      :ARG1 (g / grow-01
            :ARG1 i
            :location (w2 / wish-01
                  :ARG0 i
                  :mod (p / possible)))
      :condition (o2 / or
            :op1 (s / sprout
                  :part-of (r / radish))
            :op2 (s2 / sprig
                  :part-of (b2 / bush
                        :mod (r2 / rose)))
            :mod (o3 / only)
            :domain (i / it)))

# ::node	0	and	7-8
# ::node	0.0	stretch-01	5-6
# ::node	0.0.0	seed	3-4
# ::node	0.0.0.0	little	18-19
# ::node	0.0.0.1	this	1-2
# ::node	0.1	begin-01	8-9
# ::node	0.1.0	push-01	15-16
# ::node	0.1.0.0	sprig	19-20
# ::node	0.1.0.0.0	little	2-3
# ::node	0.1.0.0.1	charm-01	17-18
# ::node	0.1.0.1	upward	21-22
# ::node	0.1.0.1.0	sun	24-25
# ::node	0.1.0.2	offensive	20-21
# ::node	0.1.0.2.0	-	20-21
# ::node	0.1.1	timid	10-11
# ::node	0.1.1.0	at-first	
# ::node	0.2	then	0-1
# ::root	0	and
# ::edge	and	op1	stretch-01	0	0.0	
# ::edge	and	op2	begin-01	0	0.1	
# ::edge	and	time	then	0	0.2	
# ::edge	begin-01	ARG0	seed	0.1	0.0.0	
# ::edge	begin-01	ARG1	push-01	0.1	0.1.0	
# ::edge	begin-01	manner	timid	0.1	0.1.1	
# ::edge	offensive	polarity	-	0.1.0.2	0.1.0.2.0	
# ::edge	push-01	ARG0	seed	0.1.0	0.0.0	
# ::edge	push-01	ARG1	sprig	0.1.0	0.1.0.0	
# ::edge	push-01	ARG2	upward	0.1.0	0.1.0.1	
# ::edge	push-01	manner	offensive	0.1.0	0.1.0.2	
# ::edge	seed	mod	little	0.0.0	0.0.0.0	
# ::edge	seed	mod	this	0.0.0	0.0.0.1	
# ::edge	sprig	ARG0-of	charm-01	0.1.0.0	0.1.0.0.1	
# ::edge	sprig	mod	little	0.1.0.0	0.1.0.0.0	
# ::edge	stretch-01	ARG0	seed	0.0	0.0.0	
# ::edge	stretch-01	ARG1	seed	0.0	0.0.0	
# ::edge	timid	time	at-first	0.1.1	0.1.1.0	
# ::edge	upward	direction	sun	0.1.0.1	0.1.0.1.0	
(a / and
      :op1 (s / stretch-01
            :ARG0 (s2 / seed
                  :mod (l / little)
                  :mod (t2 / this))
            :ARG1 s2)
      :op2 (b / begin-01
            :ARG0 s2
            :ARG1 (p / push-01
                  :ARG0 s2
                  :ARG1 (s3 / sprig
                        :mod (l2 / little)
                        :ARG0-of (c / charm-01))
                  :ARG2 (u / upward
                        :direction (s4 / sun))
                  :manner (o / offensive :polarity -))
            :manner (t3 / timid
                  :time (a2 / at-first)))
      :time (t / then))

# ::node	0	sleep-01	1-2
# ::node	0.0	they	0-1
# ::node	0.1	heart	5-6
# ::node	0.1.0	deep	2-3
# ::node	0.1.1	darkness	10-11
# ::node	0.1.1.0	earth	8-9
# ::node	0.2	until	12-13
# ::node	0.2.0	seize-01	18-19
# ::node	0.2.0.0	desire-01	21-22
# ::node	0.2.0.0.0	awaken-01	23-24
# ::node	0.2.0.1	someone	13-14
# ::node	0.2.0.1.0	include-91	6-7
# ::root	0	sleep-01
# ::edge	darkness	poss	earth	0.1.1	0.1.1.0	
# ::edge	desire-01	ARG1	awaken-01	0.2.0.0	0.2.0.0.0	
# ::edge	heart	location	deep	0.1	0.1.0	
# ::edge	heart	part-of	darkness	0.1	0.1.1	
# ::edge	include-91	ARG2	they	0.2.0.1.0	0.0	
# ::edge	seize-01	ARG0	desire-01	0.2.0	0.2.0.0	
# ::edge	seize-01	ARG1	someone	0.2.0	0.2.0.1	
# ::edge	sleep-01	ARG0	they	0	0.0	
# ::edge	sleep-01	location	heart	0	0.1	
# ::edge	sleep-01	time	until	0	0.2	
# ::edge	someone	ARG1-of	include-91	0.2.0.1	0.2.0.1.0	
# ::edge	until	op1	seize-01	0.2	0.2.0	
(s / sleep-01
      :ARG0 (t / they)
      :location (h / heart
            :location (d / deep)
            :part-of (d2 / darkness
                  :poss (e / earth)))
      :time (u / until
            :op1 (s2 / seize-01
                  :ARG0 (d3 / desire-01
                        :ARG1 (a / awaken-01))
                  :ARG1 (s3 / someone
                        :ARG1-of (i / include-91
                              :ARG2 t)))))

# ::node	0	contrast-01	0-1
# ::node	0.0	visible	3-4
# ::node	0.0.0	-	3-4
# ::node	0.0.1	seed	1-2
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	visible	0	0.0	
# ::edge	visible	domain	seed	0.0	0.0.1	
# ::edge	visible	polarity	-	0.0	0.0.0	
(c / contrast-01
      :ARG2 (v / visible :polarity -
            :domain (s / seed)))

# ::node	0	bore-01	1-2
# ::node	0.0	it	4-5
# ::node	0.1	through	3-4
# ::node	0.1.0	it	0-1
# ::node	0.1.1	clear	2-3
# ::node	0.2	root	7-8
# ::root	0	bore-01
# ::edge	bore-01	ARG0	it	0	0.0	
# ::edge	bore-01	ARG2	through	0	0.1	
# ::edge	bore-01	ARG3	root	0	0.2	
# ::edge	root	poss	it	0.2	0.0	
# ::edge	through	mod	clear	0.1	0.1.1	
# ::edge	through	op1	it	0.1	0.1.0	
(b / bore-01
      :ARG0 (i / it)
      :ARG2 (t2 / through
            :op1 (i2 / it)
            :mod (c2 / clear))
      :ARG3 (r / root
            :poss i))

# ::node	0	spread-01	1-2
# ::node	0.0	it	0-1
# ::node	0.1	planet	5-6
# ::node	0.1.0	entire	4-5
# ::root	0	spread-01
# ::edge	planet	mod	entire	0.1	0.1.0	
# ::edge	spread-01	ARG1	it	0	0.0	
# ::edge	spread-01	ARG2	planet	0	0.1	
(s / spread-01
  :ARG1 (i / it)
  :ARG2 (p / planet
          :mod (e / entire)))

# ::node	0	contrast-01	0-1
# ::node	0.0	fault-01	9-10
# ::node	0.0.0	i	
# ::node	0.0.1	something	3-4
# ::node	0.0.1.0	that	1-2
# ::node	0.0.2	-	7-7
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	fault-01	0	0.0	
# ::edge	fault-01	ARG1	i	0.0	0.0.0	
# ::edge	fault-01	ARG2	something	0.0	0.0.1	
# ::edge	fault-01	polarity	-	0.0	0.0.2	
# ::edge	something	mod	that	0.0.1	0.0.1.0	
(c / contrast-01
  :ARG2 (f2 / fault-01
          :ARG1 (i / i)
          :ARG2 (s2 / something
                  :mod (t2 / that))
          :polarity -))

# ::node	0	explain-01	3-4
# ::node	0.0	-	
# ::node	0.1	person	
# ::node	0.1.0	have-rel-role-91	1-2
# ::node	0.1.0.0	friend	1-2
# ::node	0.2	anything	4-5
# ::node	0.3	i	
# ::node	0.4	ever	
# ::root	0	explain-01
# ::edge	explain-01	ARG0	person	0	0.1	
# ::edge	explain-01	ARG1	anything	0	0.2	
# ::edge	explain-01	ARG2	i	0	0.3	
# ::edge	explain-01	polarity	-	0	0.0	
# ::edge	explain-01	time	ever	0	0.4	
# ::edge	have-rel-role-91	ARG1	i	0.1.0	0.3	
# ::edge	have-rel-role-91	ARG2	friend	0.1.0	0.1.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.1	0.1.0	
(e / explain-01 :polarity -
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (f / friend)))
      :ARG1 (a / anything)
      :ARG2 (i / i)
      :time (e2 / ever))

# ::node	0	cause-01	
# ::node	0.0	fumble-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	along	3-4
# ::node	0.0.2	good	5-6
# ::node	0.0.2.0	most	5-6
# ::node	0.0.2.1	good	10-11
# ::node	0.0.2.1.0	now	12-13
# ::node	0.0.2.2	bad	13-14
# ::node	0.0.2.2.0	now	9-10
# ::node	0.0.2.3	fair-to-middling	19-20
# ::node	0.0.2.3.0	general	18-19
# ::node	0.0.2.3.1	hope-01	17-18
# ::node	0.0.2.4	possible	7-8
# ::root	0	cause-01
# ::edge	bad	time	now	0.0.2.2	0.0.2.2.0	
# ::edge	cause-01	ARG1	fumble-01	0	0.0	
# ::edge	fair-to-middling	ARG1-of	hope-01	0.0.2.3	0.0.2.3.1	
# ::edge	fair-to-middling	mod	general	0.0.2.3	0.0.2.3.0	
# ::edge	fumble-01	ARG0	i	0.0	0.0.0	
# ::edge	fumble-01	ARG1	along	0.0	0.0.1	
# ::edge	fumble-01	manner	good	0.0	0.0.2	
# ::edge	good	compared-to	possible	0.0.2	0.0.2.4	
# ::edge	good	degree	most	0.0.2	0.0.2.0	
# ::edge	good	example	bad	0.0.2	0.0.2.2	
# ::edge	good	example	fair-to-middling	0.0.2	0.0.2.3	
# ::edge	good	example	good	0.0.2	0.0.2.1	
# ::edge	good	time	now	0.0.2.1	0.0.2.1.0	
# ::edge	hope-01	ARG0	i	0.0.2.3.1	0.0.0	
(c / cause-01
      :ARG1 (f / fumble-01
            :ARG0 (i / i)
            :ARG1 (a / along)
            :manner (g / good
                  :degree (m / most)
                  :example (g2 / good
                        :time (n / now))
                  :example (b / bad
                        :time (n2 / now))
                  :example (f2 / fair-to-middling
                        :mod (g3 / general)
                        :ARG1-of (h / hope-01
                              :ARG0 i))
                  :compared-to (p / possible))))

# ::node	0	make-01	7-8
# ::node	0.0	i	5-6
# ::node	0.1	mistake	8-9
# ::node	0.1.0	detail	4-5
# ::node	0.1.0.0	important	3-4
# ::node	0.1.0.0.0	more	2-3
# ::node	0.1.0.1	certain	1-2
# ::node	0.2	also	10-11
# ::root	0	make-01
# ::edge	detail	mod	certain	0.1.0	0.1.0.1	
# ::edge	detail	mod	important	0.1.0	0.1.0.0	
# ::edge	important	degree	more	0.1.0.0	0.1.0.0.0	
# ::edge	make-01	ARG0	i	0	0.0	
# ::edge	make-01	ARG1	mistake	0	0.1	
# ::edge	make-01	mod	also	0	0.2	
# ::edge	mistake	topic	detail	0.1	0.1.0	
(m / make-01
  :ARG0 (i / i)
  :ARG1 (m2 / mistake
          :topic (d / detail
                   :mod (i2 / important
                          :degree (m3 / more))
                   :mod (c / certain)))
  :mod (a / also))

# ::node	0	resemble-01	
# ::node	0.0	i	1-2
# ::node	0.1	grown-up	7-8
# ::node	0.2	perhaps	0-1
# ::node	0.3	little	4-5
# ::root	0	resemble-01
# ::edge	resemble-01	ARG1	i	0	0.0	
# ::edge	resemble-01	ARG2	grown-up	0	0.1	
# ::edge	resemble-01	mod	perhaps	0	0.2	
# ::edge	resemble-01	quant	little	0	0.3	
(r / resemble-01
      :ARG1 (i / i)
      :ARG2 (g / grown-up)
      :mod (p / perhaps)
      :quant (l / little))

# ::node	0	obligate-01	
# ::node	0.0	i	0-1
# ::node	0.1	grow-02	4-5
# ::node	0.1.0	old	5-6
# ::root	0	obligate-01
# ::edge	grow-02	ARG1	i	0.1	0.0	
# ::edge	grow-02	ARG2	old	0.1	0.1.0	
# ::edge	obligate-01	ARG1	i	0	0.0	
# ::edge	obligate-01	ARG2	grow-02	0	0.1	
(o / obligate-01
  :ARG1 (i / i)
  :ARG2 (g / grow-02
          :ARG1 i
          :ARG2 (o2 / old)))

# ::node	0	think-01	1-2
# ::node	0.0	he	0-1
# ::node	0.1	resemble-01	
# ::node	0.1.0	i	6-7
# ::node	0.2	perhaps	3-4
# ::root	0	think-01
# ::edge	resemble-01	ARG1	i	0.1	0.1.0	
# ::edge	resemble-01	ARG2	he	0.1	0.0	
# ::edge	think-01	ARG0	he	0	0.0	
# ::edge	think-01	ARG1	resemble-01	0	0.1	
# ::edge	think-01	mod	perhaps	0	0.2	
(t / think-01
      :ARG0 (h / he)
      :ARG1 (r / resemble-01
            :ARG1 (i / i)
            :ARG2 h)
      :mod (p / perhaps))

# ::node	0	contrast-01	0-1
# ::node	0.0	know-01	7-8
# ::node	0.0.0	-	7-7
# ::node	0.0.1	i	1-2
# ::node	0.0.2	thing	10-11
# ::node	0.0.2.0	see-01	10-11
# ::node	0.0.2.0.0	sheep	11-12
# ::node	0.0.2.0.1	through	12-13
# ::node	0.0.2.0.1.0	wall	14-15
# ::node	0.0.2.0.1.0.0	box	16-17
# ::node	0.1	alas	3-4
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	know-01	0	0.0	
# ::edge	contrast-01	mod	alas	0	0.1	
# ::edge	know-01	ARG0	i	0.0	0.0.1	
# ::edge	know-01	ARG1	thing	0.0	0.0.2	
# ::edge	know-01	polarity	-	0.0	0.0.0	
# ::edge	see-01	ARG1	sheep	0.0.2.0	0.0.2.0.0	
# ::edge	see-01	path	through	0.0.2.0	0.0.2.0.1	
# ::edge	thing	manner-of	see-01	0.0.2	0.0.2.0	
# ::edge	through	op1	wall	0.0.2.0.1	0.0.2.0.1.0	
# ::edge	wall	consist-of	box	0.0.2.0.1.0	0.0.2.0.1.0.0	
(c / contrast-01
      :ARG2 (k / know-01 :polarity -
            :ARG0 (i / i)
            :ARG1 (t2 / thing
                  :manner-of (s / see-01
                        :ARG1 (s2 / sheep)
                        :path (t / through
                              :op1 (w / wall
                                    :consist-of (b2 / box))))))
      :mod (a / alas))

# ::node	0	chapter	0-1
# ::node	0.0	5	1-2
# ::root	0	chapter
# ::edge	chapter	mod	5	0	0.0	
(c / chapter :mod 5)

# ::node	0	learn-01	6-7
# ::node	0.0	i	4-5
# ::node	0.1	and	
# ::node	0.1.0	something	12-13
# ::node	0.1.0.0	planet	18-19
# ::node	0.1.0.0.0	prince	16-17
# ::node	0.1.0.0.0.0	little	15-16
# ::node	0.1.1	depart-01	21-22
# ::node	0.1.2	journey-01	26-27
# ::node	0.2	pass-03	3-4
# ::node	0.2.0	day	2-3
# ::node	0.2.0.0	each	1-2
# ::node	0.3	talk-01	10-11
# ::node	0.3.0	we	
# ::root	0	learn-01
# ::edge	and	op1	something	0.1	0.1.0	
# ::edge	and	op2	depart-01	0.1	0.1.1	
# ::edge	and	op3	journey-01	0.1	0.1.2	
# ::edge	day	mod	each	0.2.0	0.2.0.0	
# ::edge	depart-01	ARG0	prince	0.1.1	0.1.0.0.0	
# ::edge	depart-01	ARG1	planet	0.1.1	0.1.0.0	
# ::edge	journey-01	ARG0	prince	0.1.2	0.1.0.0.0	
# ::edge	learn-01	ARG0	i	0	0.0	
# ::edge	learn-01	ARG1	and	0	0.1	
# ::edge	learn-01	source	talk-01	0	0.3	
# ::edge	learn-01	time	pass-03	0	0.2	
# ::edge	pass-03	ARG1	day	0.2	0.2.0	
# ::edge	planet	poss	prince	0.1.0.0	0.1.0.0.0	
# ::edge	prince	mod	little	0.1.0.0.0	0.1.0.0.0.0	
# ::edge	something	topic	planet	0.1.0	0.1.0.0	
# ::edge	talk-01	ARG0	we	0.3	0.3.0	
(l / learn-01
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (s / something
                  :topic (p2 / planet
                        :poss (p3 / prince
                              :mod (l2 / little))))
            :op2 (d2 / depart-01
                  :ARG0 p3
                  :ARG1 p2)
            :op3 (j / journey-01
                  :ARG0 p3))
      :time (p / pass-03
            :ARG1 (d / day
                  :mod (e / each)))
      :source (t / talk-01
            :ARG0 (w / we)))

# ::node	0	and	0-1
# ::node	0.0	possible	7-8
# ::node	0.0.0	resemble-01	
# ::node	0.0.0.0	i	2-3
# ::node	0.0.0.1	grown-up	11-12
# ::node	0.0.0.1.0	interest-01	18-19
# ::node	0.0.0.1.0.0	-	16-17
# ::node	0.0.0.1.0.1	anything	20-21
# ::node	0.0.0.1.0.1.0	except-01	
# ::node	0.0.0.1.0.1.0.0	figure	22-23
# ::node	0.0.1	forget-01	3-4
# ::node	0.0.1.0	he	
# ::root	0	and
# ::edge	and	op2	possible	0	0.0	
# ::edge	anything	ARG2-of	except-01	0.0.0.1.0.1	0.0.0.1.0.1.0	
# ::edge	except-01	ARG1	figure	0.0.0.1.0.1.0	0.0.0.1.0.1.0.0	
# ::edge	forget-01	ARG0	i	0.0.1	0.0.0.0	
# ::edge	forget-01	ARG1	he	0.0.1	0.0.1.0	
# ::edge	grown-up	ARG1-of	interest-01	0.0.0.1	0.0.0.1.0	
# ::edge	interest-01	ARG2	anything	0.0.0.1.0	0.0.0.1.0.1	
# ::edge	interest-01	polarity	-	0.0.0.1.0	0.0.0.1.0.0	
# ::edge	possible	condition	forget-01	0.0	0.0.1	
# ::edge	possible	domain	resemble-01	0.0	0.0.0	
# ::edge	resemble-01	ARG1	i	0.0.0	0.0.0.0	
# ::edge	resemble-01	ARG2	grown-up	0.0.0	0.0.0.1	
(a / and
      :op2 (p / possible
            :domain (r / resemble-01
                  :ARG1 (i / i)
                  :ARG2 (g / grown-up
                        :ARG1-of (i2 / interest-01 :polarity -
                              :ARG2 (a2 / anything
                                    :ARG2-of (e / except-01
                                          :ARG1 (f / figure))))))
            :condition (f2 / forget-01
                  :ARG0 i
                  :ARG1 (h / he))))

# ::node	0	contrast-01	0-1
# ::node	0.0	reply-01	6-7
# ::node	0.0.0	-	5-6
# ::node	0.0.1	prince	3-4
# ::node	0.0.1.0	little	2-3
# ::root	0	contrast-01
# ::edge	contrast-01	ARG2	reply-01	0	0.0	
# ::edge	prince	mod	little	0.0.1	0.0.1.0	
# ::edge	reply-01	ARG0	prince	0.0	0.0.1	
# ::edge	reply-01	polarity	-	0.0	0.0.0	
(c / contrast-01
      :ARG2 (r / reply-01 :polarity -
            :ARG0 (p / prince
                  :mod (l / little))))

# ::node	0	say-01	
# ::node	0.0	contrast-01	0-1
# ::node	0.0.0	obligate-01	
# ::node	0.0.0.0	move-01	15-16
# ::node	0.0.0.0.0	chair	17-18
# ::node	0.0.0.0.1	step	20-21
# ::node	0.0.0.0.1.0	few	19-20
# ::node	0.0.0.0.2	only	
# ::node	0.0.0.1	planet	4-5
# ::node	0.0.0.1.0	tiny	3-4
# ::node	0.0.0.1.1	prince	8-9
# ::node	0.0.0.1.1.0	little	7-8
# ::node	0.0.0.1.1.1	i	
# ::root	0	say-01
# ::edge	chair	poss	prince	0.0.0.0.0	0.0.0.1.1	
# ::edge	contrast-01	ARG2	obligate-01	0.0	0.0.0	
# ::edge	move-01	ARG0	prince	0.0.0.0	0.0.0.1.1	
# ::edge	move-01	ARG1	chair	0.0.0.0	0.0.0.0.0	
# ::edge	move-01	extent	step	0.0.0.0	0.0.0.0.1	
# ::edge	move-01	mod	only	0.0.0.0	0.0.0.0.2	
# ::edge	obligate-01	ARG2	move-01	0.0.0	0.0.0.0	
# ::edge	obligate-01	location	planet	0.0.0	0.0.0.1	
# ::edge	planet	mod	tiny	0.0.0.1	0.0.0.1.0	
# ::edge	planet	poss	prince	0.0.0.1	0.0.0.1.1	
# ::edge	prince	mod	little	0.0.0.1.1	0.0.0.1.1.0	
# ::edge	prince	poss	i	0.0.0.1.1	0.0.0.1.1.1	
# ::edge	say-01	ARG1	contrast-01	0	0.0	
# ::edge	say-01	ARG2	prince	0	0.0.0.1.1	
# ::edge	step	quant	few	0.0.0.0.1	0.0.0.0.1.0	
(s2 / say-01
      :ARG1 (c2 / contrast-01
            :ARG2 (o / obligate-01
                  :ARG2 (m / move-01
                        :ARG0 p2
                        :ARG1 (c / chair
                              :poss p2)
                        :extent (s / step
                              :quant (f / few))
                        :mod (o2 / only))
                  :location (p / planet
                        :mod (t / tiny)
                        :poss (p2 / prince
                              :mod (l / little)
                              :poss (i / i)))))
      :ARG2 p2)

# ::node	0	possible	1-2
# ::node	0.0	see-01	2-3
# ::node	0.0.0	you	0-1
# ::node	0.0.1	and	6-7
# ::node	0.0.1.0	end-01	5-6
# ::node	0.0.1.0.0	day	4-5
# ::node	0.0.1.1	fall-01	9-10
# ::node	0.0.1.1.0	twilight	8-9
# ::node	0.0.2	like-01	12-13
# ::node	0.0.2.0	ever	
# ::root	0	possible
# ::edge	and	op1	end-01	0.0.1	0.0.1.0	
# ::edge	and	op2	fall-01	0.0.1	0.0.1.1	
# ::edge	end-01	ARG1	day	0.0.1.0	0.0.1.0.0	
# ::edge	fall-01	ARG1	twilight	0.0.1.1	0.0.1.1.0	
# ::edge	like-01	ARG0	you	0.0.2	0.0.0	
# ::edge	like-01	ARG1	see-01	0.0.2	0.0	
# ::edge	like-01	time	ever	0.0.2	0.0.2.0	
# ::edge	possible	domain	see-01	0	0.0	
# ::edge	see-01	ARG0	you	0.0	0.0.0	
# ::edge	see-01	ARG1	and	0.0	0.0.1	
# ::edge	see-01	time	like-01	0.0	0.0.2	
(p / possible
      :domain (s / see-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (e / end-01
                        :ARG1 (d / day))
                  :op2 (f / fall-01
                        :ARG1 (t / twilight)))
            :time (l / like-01
                  :ARG0 y
                  :ARG1 s
                  :time (e2 / ever))))

# ::node	0	possible	2-3
# ::node	0.0	go-02	12-13
# ::node	0.0.0	date-entity	
# ::node	0.0.0.0	"12:00"	
# ::node	0.0.1	sunset	16-17
# ::node	0.0.2	straight	13-14
# ::node	0.1	possible	11-12
# ::node	0.1.0	fly-01	3-4
# ::node	0.1.0.0	you	1-2
# ::node	0.1.0.1	temporal-quantity	8-9
# ::node	0.1.0.1.0	1	7-8
# ::node	0.1.0.1.1	minute	8-9
# ::node	0.1.0.2	country	5-6
# ::node	0.1.0.2.0	"France"	
# ::node	0.1.0.2.1	name	5-6
# ::node	0.1.0.2.1.0	"France"	5-6
# ::root	0	possible
# ::edge	country	name	name	0.1.0.2	0.1.0.2.1	
# ::edge	country	wiki	"France"	0.1.0.2	0.1.0.2.0	
# ::edge	date-entity	time	"12:00"	0.0.0	0.0.0.0	
# ::edge	fly-01	ARG1	you	0.1.0	0.1.0.0	
# ::edge	fly-01	destination	country	0.1.0	0.1.0.2	
# ::edge	fly-01	duration	temporal-quantity	0.1.0	0.1.0.1	
# ::edge	go-02	ARG0	you	0.0	0.1.0.0	
# ::edge	go-02	ARG3	date-entity	0.0	0.0.0	
# ::edge	go-02	ARG4	sunset	0.0	0.0.1	
# ::edge	go-02	manner	straight	0.0	0.0.2	
# ::edge	name	op1	"France"	0.1.0.2.1	0.1.0.2.1.0	
# ::edge	possible	condition	possible	0	0.1	
# ::edge	possible	domain	fly-01	0.1	0.1.0	
# ::edge	possible	domain	go-02	0	0.0	
# ::edge	temporal-quantity	quant	1	0.1.0.1	0.1.0.1.0	
# ::edge	temporal-quantity	unit	minute	0.1.0.1	0.1.0.1.1	
(p / possible
      :domain (g / go-02
            :ARG0 y
            :ARG3 (d / date-entity :time "12:00")
            :ARG4 (s / sunset)
            :manner (s2 / straight))
      :condition (p2 / possible
            :domain (f / fly-01
                  :ARG1 (y / you)
                  :duration (t / temporal-quantity :quant 1
                        :unit (m / minute))
                  :destination (c / country :wiki "France"
                        :name (n / name :op1 "France")))))

# ::node	0	fortunate-41	
# ::node	0.0	-	
# ::node	0.1	be-located-at-91	
# ::node	0.1.0	country	2-3
# ::node	0.1.0.0	"France"	
# ::node	0.1.0.1	name	2-3
# ::node	0.1.0.1.0	"France"	2-3
# ::node	0.1.1	away	6-7
# ::node	0.1.1.0	far	5-6
# ::node	0.1.1.0.0	too	4-5
# ::node	0.1.2	that	8-9
# ::root	0	fortunate-41
# ::edge	away	extent	far	0.1.1	0.1.1.0	
# ::edge	be-located-at-91	ARG1	country	0.1	0.1.0	
# ::edge	be-located-at-91	ARG2	away	0.1	0.1.1	
# ::edge	be-located-at-91	purpose	that	0.1	0.1.2	
# ::edge	country	name	name	0.1.0	0.1.0.1	
# ::edge	country	wiki	"France"	0.1.0	0.1.0.0	
# ::edge	far	degree	too	0.1.1.0	0.1.1.0.0	
# ::edge	fortunate-41	ARG2	be-located-at-91	0	0.1	
# ::edge	fortunate-41	polarity	-	0	0.0	
# ::edge	name	op1	"France"	0.1.0.1	0.1.0.1.0	
(f / fortunate-41 :polarity -
      :ARG2 (b / be-located-at-91
            :ARG1 (c / country :wiki "France"
                  :name (n / name :op1 "France"))
            :ARG2 (a / away
                  :extent (f2 / far
                        :degree (t / too)))
            :purpose (t2 / that)))

# ::node	0	sad	4-5
# ::node	0.0	interrogative	
# ::node	0.1	you	2-3
# ::node	0.2	then	6-7
# ::node	0.3	so	3-4
# ::root	0	sad
# ::edge	sad	degree	so	0	0.3	
# ::edge	sad	domain	you	0	0.1	
# ::edge	sad	mode	interrogative	0	0.0	
# ::edge	sad	time	then	0	0.2	
(s / sad :mode interrogative
      :domain (y / you)
      :time (t / then)
      :degree (s2 / so))

# ::node	0	ask-01	1-2
# ::node	0.0	i	0-1
# ::node	0.1	time	
# ::node	0.1.0	day	6-7
# ::node	0.1.0.0	sunset	12-13
# ::node	0.1.0.0.0	44	
# ::root	0	ask-01
# ::edge	ask-01	ARG0	i	0	0.0	
# ::edge	ask-01	ARG1	time	0	0.1	
# ::edge	day	poss	sunset	0.1.0	0.1.0.0	
# ::edge	sunset	quant	44	0.1.0.0	0.1.0.0.0	
# ::edge	time	time	day	0.1	0.1.0	
(a / ask-01
  :ARG0 (i / i)
  :ARG1 (t / time
          :time (d / day
                  :poss (s / sunset
                          :quant 44))))

# ::node	0	say-01	6-7
# ::node	0.0	you	5-6
# ::node	0.1	see-01	12-13
# ::node	0.1.0	44	
# ::node	0.1.1	sunset	14-15
# ::node	0.1.2	day	2-3
# ::node	0.1.2.0	one	1-2
# ::node	0.2	i	11-12
# ::root	0	say-01
# ::edge	day	mod	one	0.1.2	0.1.2.0	
# ::edge	say-01	ARG0	you	0	0.0	
# ::edge	say-01	ARG1	see-01	0	0.1	
# ::edge	say-01	ARG2	i	0	0.2	
# ::edge	see-01	ARG0	you	0.1	0.0	
# ::edge	see-01	ARG1	sunset	0.1	0.1.1	
# ::edge	see-01	frequency	44	0.1	0.1.0	
# ::edge	see-01	time	day	0.1	0.1.2	
(s / say-01
      :ARG0 (y / you)
      :ARG1 (s2 / see-01 :frequency 44
            :ARG0 y
            :ARG1 (s3 / sunset)
            :time (d / day
                  :mod (o / one)))
      :ARG2 (i / i))

# ::node	0	and	0-1
# ::node	0.0	add-01	5-6
# ::node	0.0.0	you	8-9
# ::node	0.0.1	know-01	9-10
# ::node	0.0.1.0	you	4-5
# ::node	0.0.1.1	love-01	12-13
# ::node	0.0.1.1.0	one	11-12
# ::node	0.0.1.1.1	sunset	14-15
# ::node	0.0.1.1.2	sad	20-21
# ::node	0.0.1.1.2.0	so	19-20
# ::node	0.0.2	late	3-4
# ::node	0.0.2.0	more	
# ::node	0.0.2.0.0	little	2-3
# ::root	0	and
# ::edge	add-01	ARG0	you	0.0	0.0.0	
# ::edge	add-01	ARG1	know-01	0.0	0.0.1	
# ::edge	add-01	time	late	0.0	0.0.2	
# ::edge	and	op1	add-01	0	0.0	
# ::edge	know-01	ARG0	you	0.0.1	0.0.1.0	
# ::edge	know-01	ARG1	love-01	0.0.1	0.0.1.1	
# ::edge	late	degree	more	0.0.2	0.0.2.0	
# ::edge	love-01	ARG0	one	0.0.1.1	0.0.1.1.0	
# ::edge	love-01	ARG1	sunset	0.0.1.1	0.0.1.1.1	
# ::edge	love-01	time	sad	0.0.1.1	0.0.1.1.2	
# ::edge	more	quant	little	0.0.2.0	0.0.2.0.0	
# ::edge	sad	domain	one	0.0.1.1.2	0.0.1.1.0	
# ::edge	sad	mod	so	0.0.1.1.2	0.0.1.1.2.0	
(a / and
      :op1 (a2 / add-01
            :ARG0 (y / you)
            :ARG1 (k / know-01
                  :ARG0 (y2 / you)
                  :ARG1 (l3 / love-01
                        :ARG0 (o / one)
                        :ARG1 (s / sunset)
                        :time (s2 / sad
                              :domain o
                              :mod (s3 / so))))
            :time (l / late
                  :degree (m / more
                        :quant (l2 / little)))))

# ::node	0	contrast-01	0-1
# ::node	0.0	sure	6-7
# ::node	0.0.0	i	1-2
# ::node	0.0.1	-	4-4
# ::node	0.0.2	at	4-5
# ::node	0.0.2.0	all	5-6
# ::node	0.0.3	succeed-01	8-9
# ::root	0	contrast-01
# ::edge	at	op1	all	0.0.2	0.0.2.0	
# ::edge	contrast-01	ARG2	sure	0	0.0	
# ::edge	succeed-01	ARG0	i	0.0.3	0.0.0	
# ::edge	sure	degree	at	0.0	0.0.2	
# ::edge	sure	domain	i	0.0	0.0.0	
# ::edge	sure	polarity	-	0.0	0.0.1	
# ::edge	sure	topic	succeed-01	0.0	0.0.3	
(c / contrast-01
  :ARG2 (s / sure
          :domain (i / i)
          :polarity -
          :degree (a / at
                    :op1 (a2 / all))
          :topic (s2 / succeed-01
                   :ARG0 i)))

# ::node	0	and	7-8
# ::node	0.0	go-06	2-3
# ::node	0.0.0	thing	
# ::node	0.0.0.0	draw-01	
# ::node	0.0.0.1	1	0-1
# ::node	0.0.1	along	3-4
# ::node	0.0.2	right	5-6
# ::node	0.0.2.0	all	4-5
# ::node	0.1	resemble-01	11-12
# ::node	0.1.0	thing	1-2
# ::node	0.1.0.0	draw-01	1-2
# ::node	0.1.0.1	another	8-9
# ::node	0.1.1	subject	14-15
# ::node	0.1.2	-	10-11
# ::root	0	and
# ::edge	and	op1	go-06	0	0.0	
# ::edge	and	op2	resemble-01	0	0.1	
# ::edge	go-06	ARG0	thing	0.0	0.0.0	
# ::edge	go-06	ARG2	along	0.0	0.0.1	
# ::edge	go-06	mod	right	0.0	0.0.2	
# ::edge	resemble-01	ARG1	thing	0.1	0.1.0	
# ::edge	resemble-01	ARG2	subject	0.1	0.1.1	
# ::edge	resemble-01	polarity	-	0.1	0.1.2	
# ::edge	right	mod	all	0.0.2	0.0.2.0	
# ::edge	subject	poss	thing	0.1.1	0.1.0	
# ::edge	thing	ARG1-of	draw-01	0.0.0	0.0.0.0	
# ::edge	thing	ARG1-of	draw-01	0.1.0	0.1.0.0	
# ::edge	thing	mod	another	0.1.0	0.1.0.1	
# ::edge	thing	quant	1	0.0.0	0.0.0.1	
(a / and
  :op1 (g / go-06
         :ARG0 (t / thing
                 :ARG1-of (d / draw-01)
                 :quant 1)
         :ARG2 (a2 / along)
         :mod (r / right
                :mod (a3 / all)))
  :op2 (r2 / resemble-01
         :ARG1 (t2 / thing
                 :ARG1-of (d2 / draw-01)
                 :mod (a4 / another))
         :ARG2 (s / subject
                 :poss t2)
         :polarity -))

# ::node	0	hard	2-3
# ::node	0.0	take-13	4-5
# ::node	0.0.0	i	13-14
# ::node	0.0.0.0	temporal-quantity	
# ::node	0.0.0.0.0	make-01	16-17
# ::node	0.0.0.0.0.0	-	
# ::node	0.0.0.0.0.1	picture	18-19
# ::node	0.0.0.0.0.1.0	any	17-18
# ::node	0.0.0.0.0.1.1	except-01	19-20
# ::node	0.0.0.0.0.1.1.0	and	28-29
# ::node	0.0.0.0.0.1.1.0.0	picture	
# ::node	0.0.0.0.0.1.1.0.0.0	boa	30-31
# ::node	0.0.0.0.0.1.1.0.0.0.0	constrictor	31-32
# ::node	0.0.0.0.0.1.1.0.0.0.1	from	32-33
# ::node	0.0.0.0.0.1.1.0.0.0.1.0	outside	27-28
# ::node	0.0.0.0.0.1.1.0.1	picture	
# ::node	0.0.0.0.0.1.1.0.1.0	boa	23-24
# ::node	0.0.0.0.0.1.1.0.1.0.0	constrictor	24-25
# ::node	0.0.0.0.0.1.1.0.1.0.1	from	25-26
# ::node	0.0.0.0.0.1.1.0.1.0.1.0	inside	34-35
# ::node	0.0.0.0.0.2	since	36-37
# ::node	0.0.0.0.0.2.0	time	
# ::node	0.0.0.0.0.2.0.0	age-01	10-11
# ::node	0.0.0.0.0.2.0.0.0	temporal-quantity	
# ::node	0.0.0.0.0.2.0.0.0.0	6	39-40
# ::node	0.0.0.0.0.2.0.0.0.1	year	
# ::node	0.0.0.0.0.3	ever	
# ::node	0.0.1	draw-01	6-7
# ::node	0.0.2	again	7-8
# ::node	0.1	cause-01	
# ::root	0	hard
# ::edge	age-01	ARG2	temporal-quantity	0.0.0.0.0.2.0.0	0.0.0.0.0.2.0.0.0	
# ::edge	and	op1	picture	0.0.0.0.0.1.1.0	0.0.0.0.0.1.1.0.0	
# ::edge	and	op2	picture	0.0.0.0.0.1.1.0	0.0.0.0.0.1.1.0.1	
# ::edge	boa	direction	from	0.0.0.0.0.1.1.0.0.0	0.0.0.0.0.1.1.0.0.0.1	
# ::edge	boa	direction	from	0.0.0.0.0.1.1.0.1.0	0.0.0.0.0.1.1.0.1.0.1	
# ::edge	boa	mod	constrictor	0.0.0.0.0.1.1.0.0.0	0.0.0.0.0.1.1.0.0.0.0	
# ::edge	boa	mod	constrictor	0.0.0.0.0.1.1.0.1.0	0.0.0.0.0.1.1.0.1.0.0	
# ::edge	except-01	ARG1	and	0.0.0.0.0.1.1	0.0.0.0.0.1.1.0	
# ::edge	from	op1	inside	0.0.0.0.0.1.1.0.1.0.1	0.0.0.0.0.1.1.0.1.0.1.0	
# ::edge	from	op1	outside	0.0.0.0.0.1.1.0.0.0.1	0.0.0.0.0.1.1.0.0.0.1.0	
# ::edge	hard	ARG1-of	cause-01	0	0.1	
# ::edge	hard	domain	take-13	0	0.0	
# ::edge	i	age	temporal-quantity	0.0.0	0.0.0.0	
# ::edge	make-01	ARG1	picture	0.0.0.0.0	0.0.0.0.0.1	
# ::edge	make-01	duration	since	0.0.0.0.0	0.0.0.0.0.2	
# ::edge	make-01	polarity	-	0.0.0.0.0	0.0.0.0.0.0	
# ::edge	make-01	time	ever	0.0.0.0.0	0.0.0.0.0.3	
# ::edge	picture	ARG2-of	except-01	0.0.0.0.0.1	0.0.0.0.0.1.1	
# ::edge	picture	mod	any	0.0.0.0.0.1	0.0.0.0.0.1.0	
# ::edge	picture	topic	boa	0.0.0.0.0.1.1.0.0	0.0.0.0.0.1.1.0.0.0	
# ::edge	picture	topic	boa	0.0.0.0.0.1.1.0.1	0.0.0.0.0.1.1.0.1.0	
# ::edge	since	op1	time	0.0.0.0.0.2	0.0.0.0.0.2.0	
# ::edge	take-13	ARG0	i	0.0	0.0.0	
# ::edge	take-13	ARG1	draw-01	0.0	0.0.1	
# ::edge	take-13	mod	again	0.0	0.0.2	
# ::edge	temporal-quantity	duration-of	make-01	0.0.0.0	0.0.0.0.0	
# ::edge	temporal-quantity	quant	6	0.0.0.0.0.2.0.0.0	0.0.0.0.0.2.0.0.0.0	
# ::edge	temporal-quantity	unit	year	0.0.0.0.0.2.0.0.0	0.0.0.0.0.2.0.0.0.1	
# ::edge	time	time-of	age-01	0.0.0.0.0.2.0	0.0.0.0.0.2.0.0	
(h / hard
      :domain (t / take-13
            :ARG0 (i / i
                  :age (t4 / temporal-quantity
                        :duration-of (m / make-01 :polarity -
                              :ARG1 (p / picture
                                    :mod (a5 / any)
                                    :ARG2-of (e2 / except-01
                                          :ARG1 (a6 / and
                                                :op1 (p2 / picture
                                                      :topic (b / boa
                                                            :mod (c2 / constrictor)
                                                            :direction (f / from
                                                                  :op1 (o / outside))))
                                                :op2 (p3 / picture
                                                      :topic (b2 / boa
                                                            :mod (c3 / constrictor)
                                                            :direction (f2 / from
                                                                  :op1 (i2 / inside)))))))
                              :duration (s / since
                                    :op1 (t2 / time
                                          :time-of (a7 / age-01
                                                :ARG2 (t3 / temporal-quantity :quant 6
                                                      :unit (y / year)))))
                              :time (e / ever))))
            :ARG1 (d / draw-01)
            :mod (a / again))
      :ARG1-of (c / cause-01))

# ::node	0	try-01	3-4
# ::node	0.0	i	0-1
# ::node	0.1	make-02	5-6
# ::node	0.1.0	true-41	9-10
# ::node	0.1.0.0	portrait	7-8
# ::node	0.1.0.1	life	11-12
# ::node	0.1.0.2	most	
# ::node	0.1.0.3	possible	13-14
# ::node	0.2	certain	2-3
# ::root	0	try-01
# ::edge	make-02	ARG0	i	0.1	0.0	
# ::edge	make-02	ARG1	true-41	0.1	0.1.0	
# ::edge	portrait	topic	i	0.1.0.0	0.0	
# ::edge	true-41	ARG1	portrait	0.1.0	0.1.0.0	
# ::edge	true-41	ARG2	life	0.1.0	0.1.0.1	
# ::edge	true-41	compared-to	possible	0.1.0	0.1.0.3	
# ::edge	true-41	degree	most	0.1.0	0.1.0.2	
# ::edge	try-01	ARG0	i	0	0.0	
# ::edge	try-01	ARG1	make-02	0	0.1	
# ::edge	try-01	mod	certain	0	0.2	
(t / try-01
      :ARG0 (i / i)
      :ARG1 (m / make-02
            :ARG0 i
            :ARG1 (t2 / true-41
                  :ARG1 (p / portrait
                        :topic i)
                  :ARG2 (l / life)
                  :degree (m2 / most)
                  :compared-to (p2 / possible)))
      :mod (c / certain))

# ::node	0	point-02	1-2
# ::node	0.0	i	0-1
# ::node	0.1	and	25-26
# ::node	0.1.0	tree	20-21
# ::node	0.1.0.0	big	22-23
# ::node	0.1.0.0.0	castle	24-25
# ::node	0.1.0.0.1	equal	
# ::node	0.1.0.1	baobab	49-50
# ::node	0.1.0.2	instead-of-91	
# ::node	0.1.0.2.0	bush	12-13
# ::node	0.1.0.2.0.0	little	11-12
# ::node	0.1.1	eat-02	45-46
# ::node	0.1.1.0	-	11-11
# ::node	0.1.1.1	baobab	8-9
# ::node	0.1.1.1.0	1	47-48
# ::node	0.1.1.1.1	single	48-49
# ::node	0.1.1.2	even-if	28-29
# ::node	0.1.1.2.0	take-05	31-32
# ::node	0.1.1.2.0.0	herd	34-35
# ::node	0.1.1.2.0.0.0	elephant	36-37
# ::node	0.1.1.2.0.0.1	whole	33-34
# ::node	0.2	prince	6-7
# ::node	0.2.0	little	5-6
# ::root	0	point-02
# ::edge	and	op1	tree	0.1	0.1.0	
# ::edge	and	op2	eat-02	0.1	0.1.1	
# ::edge	baobab	mod	single	0.1.1.1	0.1.1.1.1	
# ::edge	baobab	quant	1	0.1.1.1	0.1.1.1.0	
# ::edge	big	compared-to	castle	0.1.0.0	0.1.0.0.0	
# ::edge	big	degree	equal	0.1.0.0	0.1.0.0.1	
# ::edge	bush	domain	baobab	0.1.0.2.0	0.1.0.1	
# ::edge	bush	mod	little	0.1.0.2.0	0.1.0.2.0.0	
# ::edge	eat-02	ARG0	herd	0.1.1	0.1.1.2.0.0	
# ::edge	eat-02	ARG1	baobab	0.1.1	0.1.1.1	
# ::edge	eat-02	concession	even-if	0.1.1	0.1.1.2	
# ::edge	eat-02	polarity	-	0.1.1	0.1.1.0	
# ::edge	even-if	op1	take-05	0.1.1.2	0.1.1.2.0	
# ::edge	herd	consist-of	elephant	0.1.1.2.0.0	0.1.1.2.0.0.0	
# ::edge	herd	mod	whole	0.1.1.2.0.0	0.1.1.2.0.0.1	
# ::edge	instead-of-91	ARG2	bush	0.1.0.2	0.1.0.2.0	
# ::edge	point-02	ARG0	i	0	0.0	
# ::edge	point-02	ARG1	and	0	0.1	
# ::edge	point-02	beneficiary	prince	0	0.2	
# ::edge	prince	mod	little	0.2	0.2.0	
# ::edge	take-05	ARG0	prince	0.1.1.2.0	0.2	
# ::edge	take-05	ARG1	herd	0.1.1.2.0	0.1.1.2.0.0	
# ::edge	tree	ARG1-of	instead-of-91	0.1.0	0.1.0.2	
# ::edge	tree	domain	baobab	0.1.0	0.1.0.1	
# ::edge	tree	mod	big	0.1.0	0.1.0.0	
(p2 / point-02
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (t2 / tree
                  :mod (b5 / big
                        :compared-to (c / castle)
                        :degree (e4 / equal))
                  :domain (b2 / baobab)
                  :ARG1-of (i2 / instead-of-91
                        :ARG2 (b3 / bush
                              :mod (l3 / little)
                              :domain b2)))
            :op2 (e / eat-02 :polarity -
                  :ARG0 h
                  :ARG1 (b / baobab :quant 1
                        :mod (s / single))
                  :concession (e3 / even-if
                        :op1 (t / take-05
                              :ARG0 p
                              :ARG1 (h / herd
                                    :consist-of (e2 / elephant)
                                    :mod (w / whole))))))
      :beneficiary (p / prince
            :mod (l2 / little)))

# ::node	0	buy-01	11-12
# ::node	0.0	i	9-10
# ::node	0.1	and	16-17
# ::node	0.1.0	paint	15-16
# ::node	0.1.0.0	box	13-14
# ::node	0.1.1	pencil	18-19
# ::node	0.1.1.0	some	17-18
# ::node	0.2	that	3-4
# ::root	0	buy-01
# ::edge	and	op1	paint	0.1	0.1.0	
# ::edge	and	op2	pencil	0.1	0.1.1	
# ::edge	buy-01	ARG0	i	0	0.0	
# ::edge	buy-01	ARG1	and	0	0.1	
# ::edge	buy-01	purpose	that	0	0.2	
# ::edge	paint	location	box	0.1.0	0.1.0.0	
# ::edge	pencil	quant	some	0.1.1	0.1.1.0	
(b / buy-01
  :ARG0 (i / i)
  :ARG1 (a / and
          :op1 (p / paint
                 :location (b2 / box))
          :op2 (p2 / pencil
                 :quant (s / some)))
  :purpose (t2 / that))

# ::node	0	sad	5-6
# ::node	0.0	forget-01	1-2
# ::node	0.0.0	person	
# ::node	0.0.0.0	have-rel-role-91	3-4
# ::node	0.0.0.0.0	friend	3-4
# ::root	0	sad
# ::edge	forget-01	ARG1	person	0.0	0.0.0	
# ::edge	have-rel-role-91	ARG2	friend	0.0.0.0	0.0.0.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.0.0	0.0.0.0	
# ::edge	sad	domain	forget-01	0	0.0	
(s2 / sad
      :domain (f3 / forget-01
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (f / friend)))))

# ::node	0	have-03	3-4
# ::node	0.0	-	
# ::node	0.1	everyone	1-2
# ::node	0.2	person	4-5
# ::node	0.2.0	have-rel-role-91	4-5
# ::node	0.2.0.0	friend	6-7
# ::root	0	have-03
# ::edge	have-03	ARG0	everyone	0	0.1	
# ::edge	have-03	ARG1	person	0	0.2	
# ::edge	have-03	polarity	-	0	0.0	
# ::edge	have-rel-role-91	ARG1	everyone	0.2.0	0.1	
# ::edge	have-rel-role-91	ARG2	friend	0.2.0	0.2.0.0	
# ::edge	person	ARG0-of	have-rel-role-91	0.2	0.2.0	
(h / have-03 :polarity -
      :ARG0 (e / everyone)
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 e
                  :ARG2 (f / friend))))

# ::node	0	ah	1-2
# ::node	0.0	expressive	
# ::root	0	ah
# ::edge	ah	mode	expressive	0	0.0	
(a / ah :mode expressive)

# ::node	0	true	5-6
# ::node	0.0	that	3-4
# ::root	0	true
# ::edge	true	domain	that	0	0.0	
(t / true
      :domain (t2 / that))

# ::node	0	understand-01	3-4
# ::node	0.0	-	3-3
# ::node	0.1	i	0-1
# ::node	0.2	important	8-9
# ::node	0.2.0	so	7-8
# ::node	0.2.1	recommend-01	11-12
# ::node	0.2.1.0	eat-01	12-13
# ::node	0.2.1.0.0	sheep	10-11
# ::node	0.2.1.0.1	bush	14-15
# ::node	0.2.1.0.1.0	little	13-14
# ::node	0.2.2	cause-01	
# ::node	0.2.2.0	amr-unknown	
# ::root	0	understand-01
# ::edge	bush	mod	little	0.2.1.0.1	0.2.1.0.1.0	
# ::edge	cause-01	ARG0	amr-unknown	0.2.2	0.2.2.0	
# ::edge	eat-01	ARG0	sheep	0.2.1.0	0.2.1.0.0	
# ::edge	eat-01	ARG1	bush	0.2.1.0	0.2.1.0.1	
# ::edge	important	ARG1-of	cause-01	0.2	0.2.2	
# ::edge	important	domain	recommend-01	0.2	0.2.1	
# ::edge	important	mod	so	0.2	0.2.0	
# ::edge	recommend-01	ARG1	eat-01	0.2.1	0.2.1.0	
# ::edge	understand-01	ARG0	i	0	0.1	
# ::edge	understand-01	ARG1	important	0	0.2	
# ::edge	understand-01	polarity	-	0	0.0	
(u / understand-01 :polarity -
      :ARG0 (i / i)
      :ARG1 (i2 / important
            :mod (s2 / so)
            :domain (r / recommend-01
                  :ARG1 (e / eat-01
                        :ARG0 (s / sheep)
                        :ARG1 (b / bush
                              :mod (l / little))))
            :ARG1-of (c / cause-01
                  :ARG0 (a / amr-unknown))))

# ::node	0	glad	2-3
# ::node	0.0	i	0-1
# ::root	0	glad
# ::edge	glad	domain	i	0	0.0	
(g / glad
      :domain (i / i))

# ::node	0	hear-01	7-8
# ::node	0.0	i	6-7
# ::node	0.1	catastrophe	16-17
# ::node	0.1.0	baobab	19-20
# ::node	0.2	this	3-4
# ::node	0.3	day	12-13
# ::node	0.3.0	ordinal-entity	
# ::node	0.3.0.0	3	
# ::root	0	hear-01
# ::edge	catastrophe	poss	baobab	0.1	0.1.0	
# ::edge	day	ord	ordinal-entity	0.3	0.3.0	
# ::edge	hear-01	ARG0	i	0	0.0	
# ::edge	hear-01	ARG1	catastrophe	0	0.1	
# ::edge	hear-01	manner	this	0	0.2	
# ::edge	hear-01	time	day	0	0.3	
# ::edge	ordinal-entity	value	3	0.3.0	0.3.0.0	
(h / hear-01
      :ARG0 (i / i)
      :ARG1 (c / catastrophe
            :poss (b / baobab))
      :manner (t / this)
      :time (d / day
            :ord (o / ordinal-entity :value 3)))

# ::node	0	come-01	3-4
# ::node	0.0	information	1-2
# ::node	0.1	slow	5-6
# ::node	0.1.0	very	4-5
# ::node	0.2	fall-01	12-13
# ::node	0.2.0	thing	
# ::node	0.2.0.0	think-01	
# ::node	0.2.0.0.0	he	
# ::node	0.2.1	possible	
# ::root	0	come-01
# ::edge	come-01	ARG1	information	0	0.0	
# ::edge	come-01	manner	slow	0	0.1	
# ::edge	come-01	time	fall-01	0	0.2	
# ::edge	fall-01	ARG1	information	0.2	0.0	
# ::edge	fall-01	ARG3	thing	0.2	0.2.0	
# ::edge	fall-01	mod	possible	0.2	0.2.1	
# ::edge	slow	degree	very	0.1	0.1.0	
# ::edge	thing	ARG1-of	think-01	0.2.0	0.2.0.0	
# ::edge	think-01	ARG0	he	0.2.0.0	0.2.0.0.0	
(c / come-01
      :ARG1 (i / information)
      :manner (s / slow
            :degree (v / very))
      :time (f / fall-01
            :ARG1 i
            :ARG3 (t / thing
                  :ARG1-of (t2 / think-01
                        :ARG0 (h / he)))
            :mod (p / possible)))

# ::node	0	err-01	
# ::node	0.0	i	0-1
# ::node	0.1	height	12-13
# ::node	0.1.0	prince	10-11
# ::node	0.1.0.0	little	9-10
# ::node	0.2	too	5-6
# ::node	0.3	and	21-22
# ::node	0.3.0	tall	20-21
# ::node	0.3.0.0	too	24-25
# ::node	0.3.0.1	place	
# ::node	0.3.0.1.0	one	15-16
# ::node	0.3.1	short	25-26
# ::node	0.3.1.0	too	19-20
# ::node	0.3.1.1	place	16-17
# ::node	0.3.1.1.0	another	23-24
# ::node	0.4	some	2-3
# ::root	0	err-01
# ::edge	and	op1	tall	0.3	0.3.0	
# ::edge	and	op2	short	0.3	0.3.1	
# ::edge	err-01	ARG0	i	0	0.0	
# ::edge	err-01	example	and	0	0.3	
# ::edge	err-01	mod	some	0	0.4	
# ::edge	err-01	mod	too	0	0.2	
# ::edge	err-01	topic	height	0	0.1	
# ::edge	height	poss	prince	0.1	0.1.0	
# ::edge	place	mod	another	0.3.1.1	0.3.1.1.0	
# ::edge	place	mod	one	0.3.0.1	0.3.0.1.0	
# ::edge	prince	mod	little	0.1.0	0.1.0.0	
# ::edge	short	degree	too	0.3.1	0.3.1.0	
# ::edge	short	domain	prince	0.3.1	0.1.0	
# ::edge	short	location	place	0.3.1	0.3.1.1	
# ::edge	tall	degree	too	0.3.0	0.3.0.0	
# ::edge	tall	domain	prince	0.3.0	0.1.0	
# ::edge	tall	location	place	0.3.0	0.3.0.1	
(e / err-01
      :ARG0 (i / i)
      :topic (h / height
            :poss (p / prince
                  :mod (l / little)))
      :mod (t / too)
      :example (a / and
            :op1 (t2 / tall
                  :domain p
                  :degree (t3 / too)
                  :location (p2 / place
                        :mod (o / one)))
            :op2 (s / short
                  :domain p
                  :degree (t4 / too)
                  :location (p3 / place
                        :mod (a2 / another))))
      :mod (s2 / some))

# ::node	0	and	0-1
# ::node	0.0	feel-01	2-3
# ::node	0.0.0	i	1-2
# ::node	0.0.1	doubt-01	4-5
# ::node	0.0.1.0	color	7-8
# ::node	0.0.1.0.0	costume	10-11
# ::node	0.0.1.0.0.0	he	
# ::node	0.0.1.1	some	3-4
# ::root	0	and
# ::edge	and	op2	feel-01	0	0.0	
# ::edge	color	poss	costume	0.0.1.0	0.0.1.0.0	
# ::edge	costume	poss	he	0.0.1.0.0	0.0.1.0.0.0	
# ::edge	doubt-01	ARG0	i	0.0.1	0.0.0	
# ::edge	doubt-01	ARG1	color	0.0.1	0.0.1.0	
# ::edge	doubt-01	quant	some	0.0.1	0.0.1.1	
# ::edge	feel-01	ARG0	i	0.0	0.0.0	
# ::edge	feel-01	ARG1	doubt-01	0.0	0.0.1	
(a / and
  :op2 (f / feel-01
         :ARG0 (i / i)
         :ARG1 (d / doubt-01
                 :ARG0 i
                 :ARG1 (c / color
                         :poss (c2 / costume
                                 :poss (h / he)))
                 :quant (s / some))))

# ::node	0	present-01	8-9
# ::node	0.0	it	9-10
# ::node	0.1	organization	12-15
# ::node	0.1.0	"International_Astronautical_Congress"	
# ::node	0.1.1	name	12-15
# ::node	0.1.1.0	"International"	12-15
# ::node	0.1.1.1	"Astronomical"	12-15
# ::node	0.1.1.2	"Congress"	12-15
# ::node	0.2	on	0-1
# ::node	0.2.0	discover-01	3-4
# ::node	0.2.0.0	astronomer	6-7
# ::node	0.3	demonstrate-01	19-20
# ::node	0.3.0	great	18-19
# ::root	0	present-01
# ::edge	demonstrate-01	ARG0	astronomer	0.3	0.2.0.0	
# ::edge	demonstrate-01	mod	great	0.3	0.3.0	
# ::edge	discover-01	ARG0	astronomer	0.2.0	0.2.0.0	
# ::edge	name	op1	"International"	0.1.1	0.1.1.0	
# ::edge	name	op2	"Astronomical"	0.1.1	0.1.1.1	
# ::edge	name	op3	"Congress"	0.1.1	0.1.1.2	
# ::edge	on	op1	discover-01	0.2	0.2.0	
# ::edge	organization	name	name	0.1	0.1.1	
# ::edge	organization	wiki	"International_Astronautical_Congress"	0.1	0.1.0	
# ::edge	present-01	ARG0	astronomer	0	0.2.0.0	
# ::edge	present-01	ARG1	it	0	0.0	
# ::edge	present-01	ARG2	organization	0	0.1	
# ::edge	present-01	manner	demonstrate-01	0	0.3	
# ::edge	present-01	time	on	0	0.2	
(p / present-01
      :ARG0 a
      :ARG1 (i / it)
      :ARG2 (o / organization :wiki "International_Astronautical_Congress"
            :name (n / name :op1 "International" :op2 "Astronomical" :op3 "Congress"))
      :time (o2 / on
            :op1 (d3 / discover-01
                  :ARG0 (a / astronomer)))
      :manner (d2 / demonstrate-01
            :ARG0 a
            :mod (g / great)))

